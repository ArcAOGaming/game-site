This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/pages
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/pages/Earn/Earn.css
src/pages/Earn/Earn.tsx
src/pages/Earn/index.ts
src/pages/Home/Home.css
src/pages/Home/Home.tsx
src/pages/Home/index.ts
src/pages/Home/sections/Create/components/CoinFlowAnimation.tsx
src/pages/Home/sections/Create/components/CreateCoinFlowAnimation.css
src/pages/Home/sections/Create/components/index.ts
src/pages/Home/sections/Create/CreateSection.css
src/pages/Home/sections/Create/CreateSection.tsx
src/pages/Home/sections/Create/index.ts
src/pages/Home/sections/Earn/EarnSection.css
src/pages/Home/sections/Earn/EarnSection.tsx
src/pages/Home/sections/Earn/index.ts
src/pages/Home/sections/Footer/FooterSection.css
src/pages/Home/sections/Footer/FooterSection.tsx
src/pages/Home/sections/Footer/index.ts
src/pages/Home/sections/index.ts
src/pages/Home/sections/Mint/index.ts
src/pages/Home/sections/Mint/MintSection.css
src/pages/Home/sections/Mint/MintSection.tsx
src/pages/Home/sections/Own/components/CoinFlowAnimation.tsx
src/pages/Home/sections/Own/components/index.ts
src/pages/Home/sections/Own/components/OwnCoinFlowAnimation.css
src/pages/Home/sections/Own/index.ts
src/pages/Home/sections/Own/OwnSection.css
src/pages/Home/sections/Own/OwnSection.tsx
src/pages/Home/sections/Play/components/CoinFlowAnimation.css
src/pages/Home/sections/Play/components/CoinFlowAnimation.tsx
src/pages/Home/sections/Play/components/HeroButtons.css
src/pages/Home/sections/Play/components/HeroButtons.tsx
src/pages/Home/sections/Play/components/index.ts
src/pages/Home/sections/Play/components/PlayCoinFlowAnimation.css
src/pages/Home/sections/Play/components/StatsSection.css
src/pages/Home/sections/Play/components/StatsSection.tsx
src/pages/Home/sections/Play/components/VideoCarousel.css
src/pages/Home/sections/Play/components/VideoCarousel.tsx
src/pages/Home/sections/Play/index.ts
src/pages/Home/sections/Play/PlaySection.css
src/pages/Home/sections/Play/PlaySection.tsx
src/pages/index.ts
src/pages/Mint/components/ConnectArweaveAOWalletButton/ConnectArweaveAOWalletButton.css
src/pages/Mint/components/ConnectArweaveAOWalletButton/ConnectArweaveAOWalletButton.tsx
src/pages/Mint/components/ConnectArweaveAOWalletButton/index.ts
src/pages/Mint/components/ConnectEthereumWalletButton/ConnectEthereumWalletButton.css
src/pages/Mint/components/ConnectEthereumWalletButton/ConnectEthereumWalletButton.tsx
src/pages/Mint/components/ConnectEthereumWalletButton/index.ts
src/pages/Mint/components/index.ts
src/pages/Mint/components/PermawebMatchSection/index.ts
src/pages/Mint/components/PermawebMatchSection/PermawebMatchSection.css
src/pages/Mint/components/PermawebMatchSection/PermawebMatchSection.tsx
src/pages/Mint/components/StakingActions/DAIStakingActions.tsx
src/pages/Mint/components/StakingActions/ETHStakingActions.tsx
src/pages/Mint/components/StakingActions/index.ts
src/pages/Mint/components/StakingActions/StakingActions.css
src/pages/Mint/components/TokenomicsSection/index.ts
src/pages/Mint/components/TokenomicsSection/TokenomicsSection.css
src/pages/Mint/components/TokenomicsSection/TokenomicsSection.tsx
src/pages/Mint/components/UtilityBenefitsSection/index.ts
src/pages/Mint/components/UtilityBenefitsSection/UtilityBenefitsSection.css
src/pages/Mint/components/UtilityBenefitsSection/UtilityBenefitsSection.tsx
src/pages/Mint/components/WalletBalance/ArweaveWalletBalance.tsx
src/pages/Mint/components/WalletBalance/DAIStakingBalance.tsx
src/pages/Mint/components/WalletBalance/EthereumStakingBalance.tsx
src/pages/Mint/components/WalletBalance/EthereumWalletBalance.tsx
src/pages/Mint/components/WalletBalance/EthereumWalletTokenBalance.tsx
src/pages/Mint/components/WalletBalance/index.ts
src/pages/Mint/components/WalletBalance/WalletBalance.css
src/pages/Mint/components/WalletConnections/components/ArweaveConnection.tsx
src/pages/Mint/components/WalletConnections/components/DAIConnection.tsx
src/pages/Mint/components/WalletConnections/components/FlipLogo.tsx
src/pages/Mint/components/WalletConnections/components/GameYieldConnection.tsx
src/pages/Mint/components/WalletConnections/components/index.ts
src/pages/Mint/components/WalletConnections/components/STETHConnection.tsx
src/pages/Mint/components/WalletConnections/components/USDSConnection.tsx
src/pages/Mint/components/WalletConnections/index.ts
src/pages/Mint/components/WalletConnections/WalletConnections.css
src/pages/Mint/components/WalletConnections/WalletConnections.tsx
src/pages/Mint/index.ts
src/pages/Mint/Mint.css
src/pages/Mint/Mint.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/pages/Earn/index.ts">
export { default as Earn } from './Earn';
</file>

<file path="src/pages/Home/index.ts">
export * from './Home'
</file>

<file path="src/pages/Home/sections/Create/components/CoinFlowAnimation.tsx">
import React from 'react';
import './CreateCoinFlowAnimation.css';

interface CoinFlowAnimationProps {
  className?: string;
}

const CoinFlowAnimation: React.FC<CoinFlowAnimationProps> = ({ 
  className = '' 
}) => {
  return (
    <div className={`create-trading-animation ${className}`}>
      {/* Left side - Blue circle */}
      <div className="create-left-trader">
        <img 
          src="/logo-white-transparent.png" 
          alt="Blue Trader" 
          className="create-trader-logo"
        />
      </div>

      {/* Right side - White circle */}
      <div className="create-right-trader">
        <img 
          src="/logo-black-transparent.png" 
          alt="White Trader" 
          className="create-trader-logo"
        />
      </div>

      {/* Blue squares flowing from left to right (top line) */}
      <div className="create-square-flow create-square-1">
        <div className="create-square-token">
          <img src="/logo-white-transparent.png" alt="Square Token" className="create-token-logo" />
        </div>
      </div>
      <div className="create-square-flow create-square-2">
        <div className="create-square-token">
          <img src="/logo-white-transparent.png" alt="Square Token" className="create-token-logo" />
        </div>
      </div>
      <div className="create-square-flow create-square-3">
        <div className="create-square-token">
          <img src="/logo-white-transparent.png" alt="Square Token" className="create-token-logo" />
        </div>
      </div>

      {/* Blue circles flowing from right to left (bottom line) */}
      <div className="create-circle-flow create-circle-1">
        <div className="create-circle-token">
          <img src="/logo-white-transparent.png" alt="Circle Token" className="create-token-logo" />
        </div>
      </div>
      <div className="create-circle-flow create-circle-2">
        <div className="create-circle-token">
          <img src="/logo-white-transparent.png" alt="Circle Token" className="create-token-logo" />
        </div>
      </div>
      <div className="create-circle-flow create-circle-3">
        <div className="create-circle-token">
          <img src="/logo-white-transparent.png" alt="Circle Token" className="create-token-logo" />
        </div>
      </div>
    </div>
  );
};

export default CoinFlowAnimation;
</file>

<file path="src/pages/Home/sections/Create/components/CreateCoinFlowAnimation.css">
/* Create Section Trading Animation - Two traders exchanging squares for circles */
.create-trading-animation {
  position: relative;
  width: 400px;
  height: 200px;
  pointer-events: none;
  z-index: 1;
  margin: 20px auto;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* Left trader - Blue circle */
.create-left-trader {
  position: relative;
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: linear-gradient(135deg, #3498db, #2980b9);
  border: 3px solid #fff;
  box-shadow: 
    0 0 25px rgba(52, 152, 219, 0.8),
    inset 0 0 20px rgba(255, 255, 255, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: createLeftTraderPulse 3s ease-in-out infinite;
  z-index: 3;
}

/* Right trader - White circle with hue shift */
.create-right-trader {
  position: relative;
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: linear-gradient(135deg, #ecf0f1, #bdc3c7);
  border: 3px solid #34495e;
  box-shadow: 
    0 0 25px rgba(189, 195, 199, 0.8),
    inset 0 0 20px rgba(52, 73, 94, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: createRightTraderPulse 3s ease-in-out infinite 1.5s;
  z-index: 3;
}

.create-trader-logo {
  width: 50px;
  height: 50px;
  object-fit: contain;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
}

/* Square tokens flowing left to right (top line) */
.create-square-flow {
  position: absolute;
  top: 30px;
  z-index: 2;
}

.create-square-token {
  width: 24px;
  height: 24px;
  border-radius: 4px;
  background: linear-gradient(135deg, #3498db, #2980b9);
  border: 2px solid #fff;
  box-shadow: 0 0 10px rgba(52, 152, 219, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
}

.create-token-logo {
  width: 14px;
  height: 14px;
  object-fit: contain;
}

/* Square flow positioning and animations */
.create-square-1 {
  left: 80px;
  animation: createSquareFlow 4s ease-in-out infinite;
}

.create-square-2 {
  left: 80px;
  animation: createSquareFlow 4s ease-in-out infinite 1.3s;
}

.create-square-3 {
  left: 80px;
  animation: createSquareFlow 4s ease-in-out infinite 2.6s;
}

/* Circle tokens flowing right to left (bottom line) */
.create-circle-flow {
  position: absolute;
  bottom: 30px;
  z-index: 2;
}

.create-circle-token {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: linear-gradient(135deg, #3498db, #2980b9);
  border: 2px solid #fff;
  box-shadow: 0 0 10px rgba(52, 152, 219, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Circle flow positioning and animations */
.create-circle-1 {
  right: 80px;
  animation: createCircleFlow 4s ease-in-out infinite;
}

.create-circle-2 {
  right: 80px;
  animation: createCircleFlow 4s ease-in-out infinite 1.3s;
}

.create-circle-3 {
  right: 80px;
  animation: createCircleFlow 4s ease-in-out infinite 2.6s;
}

/* Keyframe Animations */
@keyframes createLeftTraderPulse {
  0%, 100% { 
    transform: scale(1); 
    box-shadow: 0 0 25px rgba(52, 152, 219, 0.8), inset 0 0 20px rgba(255, 255, 255, 0.3);
  }
  50% { 
    transform: scale(1.05); 
    box-shadow: 0 0 35px rgba(52, 152, 219, 1), inset 0 0 25px rgba(255, 255, 255, 0.4);
  }
}

@keyframes createRightTraderPulse {
  0%, 100% { 
    transform: scale(1); 
    box-shadow: 0 0 25px rgba(189, 195, 199, 0.8), inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  50% { 
    transform: scale(1.05); 
    box-shadow: 0 0 35px rgba(189, 195, 199, 1), inset 0 0 25px rgba(52, 73, 94, 0.4);
  }
}

/* Square tokens flowing from left to right */
@keyframes createSquareFlow {
  0% { 
    transform: translateX(0) scale(0.8); 
    opacity: 0.7; 
  }
  25% { 
    transform: translateX(80px) scale(1); 
    opacity: 1; 
  }
  75% { 
    transform: translateX(160px) scale(1); 
    opacity: 1; 
  }
  100% { 
    transform: translateX(240px) scale(0.8); 
    opacity: 0.3; 
  }
}

/* Circle tokens flowing from right to left */
@keyframes createCircleFlow {
  0% { 
    transform: translateX(0) scale(0.8); 
    opacity: 0.7; 
  }
  25% { 
    transform: translateX(-80px) scale(1); 
    opacity: 1; 
  }
  75% { 
    transform: translateX(-160px) scale(1); 
    opacity: 1; 
  }
  100% { 
    transform: translateX(-240px) scale(0.8); 
    opacity: 0.3; 
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .create-trading-animation {
    width: 320px;
    height: 160px;
  }
  
  .create-left-trader, .create-right-trader {
    width: 60px;
    height: 60px;
  }
  
  .create-trader-logo {
    width: 38px;
    height: 38px;
  }
  
  .create-square-token, .create-circle-token {
    width: 20px;
    height: 20px;
  }
  
  .create-token-logo {
    width: 12px;
    height: 12px;
  }
  
  .create-square-flow {
    top: 25px;
  }
  
  .create-circle-flow {
    bottom: 25px;
  }
  
  @keyframes createSquareFlow {
    0% { 
      transform: translateX(0) scale(0.8); 
      opacity: 0.7; 
    }
    25% { 
      transform: translateX(60px) scale(1); 
      opacity: 1; 
    }
    75% { 
      transform: translateX(120px) scale(1); 
      opacity: 1; 
    }
    100% { 
      transform: translateX(180px) scale(0.8); 
      opacity: 0.3; 
    }
  }
  
  @keyframes createCircleFlow {
    0% { 
      transform: translateX(0) scale(0.8); 
      opacity: 0.7; 
    }
    25% { 
      transform: translateX(-60px) scale(1); 
      opacity: 1; 
    }
    75% { 
      transform: translateX(-120px) scale(1); 
      opacity: 1; 
    }
    100% { 
      transform: translateX(-180px) scale(0.8); 
      opacity: 0.3; 
    }
  }
}

@media (max-width: 480px) {
  .create-trading-animation {
    width: 280px;
    height: 140px;
  }
  
  .create-left-trader, .create-right-trader {
    width: 50px;
    height: 50px;
  }
  
  .create-trader-logo {
    width: 32px;
    height: 32px;
  }
  
  .create-square-token, .create-circle-token {
    width: 18px;
    height: 18px;
  }
  
  .create-token-logo {
    width: 10px;
    height: 10px;
  }
  
  .create-square-flow {
    top: 20px;
  }
  
  .create-circle-flow {
    bottom: 20px;
  }
  
  @keyframes createSquareFlow {
    0% { 
      transform: translateX(0) scale(0.8); 
      opacity: 0.7; 
    }
    25% { 
      transform: translateX(50px) scale(1); 
      opacity: 1; 
    }
    75% { 
      transform: translateX(100px) scale(1); 
      opacity: 1; 
    }
    100% { 
      transform: translateX(150px) scale(0.8); 
      opacity: 0.3; 
    }
  }
  
  @keyframes createCircleFlow {
    0% { 
      transform: translateX(0) scale(0.8); 
      opacity: 0.7; 
    }
    25% { 
      transform: translateX(-50px) scale(1); 
      opacity: 1; 
    }
    75% { 
      transform: translateX(-100px) scale(1); 
      opacity: 1; 
    }
    100% { 
      transform: translateX(-150px) scale(0.8); 
      opacity: 0.3; 
    }
  }
}
</file>

<file path="src/pages/Home/sections/Create/components/index.ts">
export { default as CoinFlowAnimation } from './CoinFlowAnimation';
</file>

<file path="src/pages/Home/sections/Create/index.ts">
export { default as CreateSection } from './CreateSection';
</file>

<file path="src/pages/Home/sections/Earn/index.ts">
export { default as EarnSection } from './EarnSection';
</file>

<file path="src/pages/Home/sections/Footer/FooterSection.css">
/* Footer Section Styles */

.footer-section {
    min-height: auto;
    padding: 24px 0 16px;
    position: relative;
    background: linear-gradient(135deg,
            rgba(15, 23, 42, 0.95) 0%,
            rgba(30, 41, 59, 0.95) 100%);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

/* Background layers */
.footer-bg-layer-1 {
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg,
            rgba(168, 85, 247, 0.1) 0%,
            rgba(59, 130, 246, 0.1) 50%,
            rgba(6, 182, 212, 0.1) 100%);
}

.footer-bg-layer-2 {
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at 50% 50%,
            rgba(120, 119, 198, 0.05) 0%,
            transparent 70%);
}

/* Footer content */
.footer-content {
    position: relative;
    z-index: 10;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 24px;
}

.footer-main {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
    margin-bottom: 16px;
}

@media (min-width: 768px) {
    .footer-main {
        grid-template-columns: 1fr 1fr;
        gap: 24px;
    }
}

@media (min-width: 1024px) {
    .footer-main {
        grid-template-columns: 2fr 1fr;
    }
}

/* Footer brand */
.footer-brand {
    text-align: center;
}

@media (min-width: 768px) {
    .footer-brand {
        text-align: left;
    }
}

.footer-logo {
    font-size: 2.5rem;
    font-weight: 900;
    margin-bottom: 8px;
    background: linear-gradient(90deg,
            var(--gaming-purple) 0%,
            var(--gaming-pink) 50%,
            var(--gaming-cyan) 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.footer-description {
    font-size: 1rem;
    color: #9ca3af;
    line-height: 1.5;
    max-width: 400px;
    margin: 0 auto;
}

@media (min-width: 768px) {
    .footer-description {
        margin: 0;
    }
}

/* Footer social */
.footer-social {
    text-align: center;
}

@media (min-width: 768px) {
    .footer-social {
        text-align: left;
    }
}

.footer-social-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-gaming);
    margin-bottom: 16px;
}

.social-links {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
}

@media (min-width: 640px) {
    .social-links {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (min-width: 1024px) {
    .social-links {
        grid-template-columns: 1fr;
    }
}

.social-link {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    text-decoration: none;
    color: var(--text-gaming);
    transition: all 0.3s ease;
    backdrop-filter: blur(8px);
}

.social-link:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(168, 85, 247, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px -8px rgba(168, 85, 247, 0.3);
}

.social-icon {
    font-size: 1.5rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg,
            rgba(168, 85, 247, 0.2),
            rgba(59, 130, 246, 0.2));
    border-radius: 8px;
    flex-shrink: 0;
}

.social-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.social-name {
    font-weight: 600;
    font-size: 1rem;
    color: var(--text-gaming);
}

.social-description {
    font-size: 0.875rem;
    color: #9ca3af;
}

/* Footer bottom */
.footer-bottom {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 16px;
}

.footer-bottom-content {
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: center;
    text-align: center;
}

@media (min-width: 768px) {
    .footer-bottom-content {
        flex-direction: row;
        justify-content: space-between;
        text-align: left;
    }
}

.footer-copyright {
    color: #9ca3af;
    font-size: 0.875rem;
    margin: 0;
}

.footer-links {
    display: flex;
    gap: 32px;
    flex-wrap: wrap;
    justify-content: center;
}

@media (min-width: 768px) {
    .footer-links {
        justify-content: flex-end;
    }
}

.footer-link {
    color: #d1d5db;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: color 0.3s ease;
}

.footer-link:hover {
    color: var(--gaming-purple);
}

/* Responsive adjustments */
@media (max-width: 640px) {
    .footer-section {
        padding: 60px 0 30px;
    }

    .footer-content {
        padding: 0 16px;
    }

    .footer-main {
        gap: 32px;
        margin-bottom: 32px;
    }

    .footer-logo {
        font-size: 2rem;
    }

    .footer-description {
        font-size: 1rem;
    }

    .footer-social-title {
        font-size: 1.25rem;
    }

    .social-links {
        gap: 12px;
    }

    .social-link {
        padding: 12px;
    }

    .footer-links {
        gap: 24px;
    }
}
</file>

<file path="src/pages/Home/sections/Footer/FooterSection.tsx">
import { forwardRef } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faDiscord, faTelegram, faXTwitter } from '@fortawesome/free-brands-svg-icons';
import { faFile } from '@fortawesome/free-solid-svg-icons';
import { ARCAO } from '@arcaogaming/project-links';
import './FooterSection.css';

interface FooterSectionProps {
    className?: string;
}

const FooterSection = forwardRef<HTMLElement, FooterSectionProps>(
    ({ className = '' }, ref) => {
        const socialLinks = [
            {
                name: 'Discord',
                url: ARCAO.discord,
                icon: faDiscord,
                description: 'Join our community'
            },
            {
                name: 'Telegram',
                url: ARCAO.telegram,
                icon: faTelegram,
                description: 'Connect with leadership'
            },
            {
                name: 'Twitter/X',
                url: ARCAO.twitter,
                icon: faXTwitter,
                description: 'Follow us'
            },
            {
                name: 'Media Kit',
                url: ARCAO.docs, // Using docs as media kit for now
                icon: faFile,
                description: 'Brand assets'
            }
        ];

        return (
            <footer
                ref={ref}
                id="footer"
                className={`footer-section section ${className}`}
            >
                {/* Background layers */}
                <div className="footer-bg-layer-1"></div>
                <div className="footer-bg-layer-2"></div>

                {/* Floating particles */}
                <div className="floating-particles">
                    <div className="particle particle-1"></div>
                    <div className="particle particle-2"></div>
                    <div className="particle particle-3"></div>
                </div>

                {/* Grid overlay */}
                <div className="grid-overlay"></div>

                <div className="footer-content">
                    <div className="footer-main">
                        {/* Logo and description */}
                        <div className="footer-brand">
                            <h2 className="footer-logo">$GAME</h2>
                            <p className="footer-description">
                                The future of decentralized gaming. Own, create, earn, and play in the next generation of blockchain games.
                            </p>
                        </div>

                        {/* Social links */}
                        <div className="footer-social">
                            <h3 className="footer-social-title">Connect With Us</h3>
                            <div className="social-links">
                                {socialLinks.map((link) => (
                                    <a
                                        key={link.name}
                                        href={link.url}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="social-link"
                                    >
                                        <div className="social-icon">
                                            <FontAwesomeIcon icon={link.icon} />
                                        </div>
                                        <div className="social-info">
                                            <span className="social-name">{link.name}</span>
                                            <span className="social-description">{link.description}</span>
                                        </div>
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Footer bottom */}
                    <div className="footer-bottom">
                        <div className="footer-bottom-content">
                            <p className="footer-copyright">
                                © {new Date().getFullYear()} ArcAO Gaming. All rights reserved.
                            </p>
                            <div className="footer-links">
                                <a href={ARCAO.docs} target="_blank" rel="noopener noreferrer" className="footer-link">
                                    Documentation
                                </a>
                                <a href={ARCAO.github} target="_blank" rel="noopener noreferrer" className="footer-link">
                                    GitHub
                                </a>
                                <a href={ARCAO.website} target="_blank" rel="noopener noreferrer" className="footer-link">
                                    Website
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </footer>
        );
    }
);

FooterSection.displayName = 'FooterSection';

export default FooterSection;
</file>

<file path="src/pages/Home/sections/Footer/index.ts">
export { default as FooterSection } from './FooterSection';
</file>

<file path="src/pages/Home/sections/Mint/index.ts">
export { default as MintSection } from './MintSection';
</file>

<file path="src/pages/Home/sections/Own/components/CoinFlowAnimation.tsx">
import React from 'react';
import './OwnCoinFlowAnimation.css';

interface CoinFlowAnimationProps {
  className?: string;
}

const CoinFlowAnimation: React.FC<CoinFlowAnimationProps> = ({ 
  className = '' 
}) => {
  return (
    <div className={`own-magnetic-animation ${className}`}>
      {/* Central purple-blue square that attracts value */}
      <div className="own-central-magnet">
        <img 
          src="/logo-white-transparent.png" 
          alt="Value Magnet" 
          className="own-magnet-logo"
        />
      </div>

      {/* Green circles spawning from all sides and being attracted to center */}
      {/* Top side spawns */}
      <div className="own-attracted-token own-token-top-1">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>
      <div className="own-attracted-token own-token-top-2">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>

      {/* Right side spawns */}
      <div className="own-attracted-token own-token-right-1">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>
      <div className="own-attracted-token own-token-right-2">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>

      {/* Bottom side spawns */}
      <div className="own-attracted-token own-token-bottom-1">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>
      <div className="own-attracted-token own-token-bottom-2">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>

      {/* Left side spawns */}
      <div className="own-attracted-token own-token-left-1">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>
      <div className="own-attracted-token own-token-left-2">
        <div className="own-green-circle">
          <img src="/logo-white-transparent.png" alt="Value Token" className="own-circle-logo" />
        </div>
      </div>
    </div>
  );
};

export default CoinFlowAnimation;
</file>

<file path="src/pages/Home/sections/Own/components/index.ts">
export { default as CoinFlowAnimation } from './CoinFlowAnimation';
</file>

<file path="src/pages/Home/sections/Own/index.ts">
export { default as OwnSection } from './OwnSection';
</file>

<file path="src/pages/Home/sections/Own/OwnSection.css">
/* Own Section Styles - Blockchain/Ownership Theme */
.own-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
  padding: 80px 0;
}

.own-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Own Section Animated Backgrounds - Blockchain Theme */
.own-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(59, 130, 246, 0.2) 0%, 
    rgba(168, 85, 247, 0.15) 50%, 
    rgba(236, 72, 153, 0.2) 100%);
}

.own-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 60% 40%, 
    rgba(59, 130, 246, 0.15) 0%, 
    transparent 60%);
}

.own-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Floating Blockchain Elements */
.blockchain-element {
  position: absolute;
  font-size: 1.5rem;
  opacity: 0.3;
  pointer-events: none;
}

.chain-link-1 {
  top: 20%;
  left: 10%;
  animation: chain-float 6s ease-in-out infinite;
  animation-delay: 0s;
}

.chain-link-2 {
  bottom: 25%;
  right: 12%;
  animation: chain-float 7s ease-in-out infinite;
  animation-delay: 2s;
}

.shield-1 {
  top: 15%;
  right: 20%;
  animation: shield-pulse 5s ease-in-out infinite;
  animation-delay: 1s;
}

.shield-2 {
  bottom: 30%;
  left: 15%;
  animation: shield-pulse 6s ease-in-out infinite;
  animation-delay: 3s;
}

.own-grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(59, 130, 246, 0.03) 1px, transparent 1px),
    linear-gradient(90deg, rgba(59, 130, 246, 0.03) 1px, transparent 1px);
  background-size: 60px 60px;
  opacity: 0.4;
}

/* Own Section Floating Particles - Blockchain Theme */
.own-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.own-particle-1 {
  position: absolute;
  top: 30%;
  left: 8%;
  width: 12px;
  height: 12px;
  background: linear-gradient(45deg, rgba(59, 130, 246, 0.8), rgba(168, 85, 247, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 25px rgba(59, 130, 246, 0.6);
  animation: blockchain-float 4s ease-in-out infinite;
}

.own-particle-2 {
  position: absolute;
  top: 70%;
  right: 20%;
  width: 8px;
  height: 8px;
  background: linear-gradient(45deg, rgba(168, 85, 247, 0.8), rgba(236, 72, 153, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 20px rgba(168, 85, 247, 0.6);
  animation: blockchain-float 3.5s ease-in-out infinite reverse;
}

.own-particle-3 {
  position: absolute;
  bottom: 40%;
  left: 75%;
  width: 10px;
  height: 10px;
  background: linear-gradient(45deg, rgba(236, 72, 153, 0.8), rgba(59, 130, 246, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 22px rgba(236, 72, 153, 0.6);
  animation: blockchain-float 4.5s ease-in-out infinite;
}

.own-particle-4 {
  position: absolute;
  top: 45%;
  left: 3%;
  width: 6px;
  height: 6px;
  background: linear-gradient(45deg, rgba(99, 102, 241, 0.8), rgba(59, 130, 246, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 18px rgba(99, 102, 241, 0.6);
  animation: blockchain-float 3s ease-in-out infinite;
}

.own-particle-5 {
  position: absolute;
  bottom: 20%;
  right: 65%;
  width: 14px;
  height: 14px;
  background: linear-gradient(45deg, rgba(59, 130, 246, 0.7), rgba(168, 85, 247, 0.7));
  border-radius: 50%;
  box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
  animation: blockchain-float 5s ease-in-out infinite reverse;
}

/* Own Section Geometric Shapes - Blockchain Theme */
.own-shape-1 {
  position: absolute;
  top: 25%;
  right: 8%;
  width: 35px;
  height: 35px;
  background: linear-gradient(45deg, rgba(59, 130, 246, 0.3), rgba(168, 85, 247, 0.3));
  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
  animation: blockchain-glow 5s ease-in-out infinite;
}

.own-shape-2 {
  position: absolute;
  bottom: 35%;
  left: 5%;
  width: 28px;
  height: 28px;
  border: 2px solid rgba(168, 85, 247, 0.5);
  transform: rotate(45deg);
  animation: pulse 3s ease-in-out infinite;
}

.own-shape-3 {
  position: absolute;
  top: 60%;
  right: 80%;
  width: 20px;
  height: 20px;
  background: linear-gradient(45deg, 
    rgba(59, 130, 246, 0.4), 
    rgba(236, 72, 153, 0.4));
  border-radius: 50%;
  animation: bounce 2s infinite;
  animation-delay: 0.5s;
}

.own-shape-4 {
  position: absolute;
  top: 40%;
  left: 1%;
  width: 24px;
  height: 24px;
  border: 1px solid rgba(99, 102, 241, 0.6);
  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
  animation: ping 4.5s cubic-bezier(0, 0, 0.2, 1) infinite;
}

.own-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 24px;
  width: 100%;
}

.own-content {
  text-align: center;
  margin-bottom: 64px;
}

.own-title {
  font-size: clamp(2.5rem, 6vw, 4rem);
  font-weight: 900;
  margin-bottom: 16px;
  background: linear-gradient(90deg, 
    var(--gaming-cyan) 0%, 
    var(--gaming-purple) 50%, 
    var(--gaming-pink) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.own-subtitle {
  font-size: clamp(1.125rem, 2.5vw, 1.25rem);
  color: #d1d5db;
  margin-bottom: 24px;
  font-weight: 300;
}

.own-description {
  font-size: 1.125rem;
  color: #9ca3af;
  max-width: 768px;
  margin: 0 auto 64px;
  line-height: 1.75;
}

/* Features Grid */
.own-features {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 32px;
  max-width: 1000px;
  margin: 0 auto;
}

.feature-item {
  text-align: center;
  padding: 32px 24px;
  border-radius: 16px;
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(8px);
  border: 1px solid rgba(255, 255, 255, 0.08);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.feature-item:hover {
  transform: translateY(-8px);
  background: rgba(255, 255, 255, 0.06);
  border-color: rgba(255, 255, 255, 0.15);
  box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.3);
}

.feature-item::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(6, 182, 212, 0.05), 
    rgba(168, 85, 247, 0.05), 
    rgba(236, 72, 153, 0.05));
  opacity: 0;
  transition: opacity 0.3s ease;
}

.feature-item:hover::before {
  opacity: 1;
}

.feature-icon {
  font-size: 3rem;
  margin-bottom: 16px;
  position: relative;
  z-index: 10;
}

.feature-title {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 12px;
  color: var(--text-gaming);
  position: relative;
  z-index: 10;
}

.feature-description {
  font-size: 1rem;
  color: #9ca3af;
  line-height: 1.6;
  position: relative;
  z-index: 10;
}

/* AO Link Styling - Seamless integration */
.ao-link {
  color: inherit;
  text-decoration: none;
  background: linear-gradient(90deg, 
    rgba(59, 130, 246, 0.8) 0%, 
    rgba(168, 85, 247, 0.8) 50%, 
    rgba(236, 72, 153, 0.8) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 600;
  transition: all 0.3s ease;
  cursor: pointer;
}

.ao-link:hover {
  background: linear-gradient(90deg, 
    rgba(59, 130, 246, 1) 0%, 
    rgba(168, 85, 247, 1) 50%, 
    rgba(236, 72, 153, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  filter: brightness(1.2);
}

/* Responsive Design */
@media (max-width: 768px) {
  .own-section {
    padding: 60px 0;
  }
  
  .own-features {
    grid-template-columns: 1fr;
    gap: 24px;
  }
  
  .feature-item {
    padding: 24px 20px;
  }
  
  .feature-icon {
    font-size: 2.5rem;
  }
  
  .feature-title {
    font-size: 1.25rem;
  }
  
  .feature-description {
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .own-section {
    padding: 40px 0;
  }
  
  .own-content {
    margin-bottom: 48px;
  }
  
  .feature-item {
    padding: 20px 16px;
  }
  
  .feature-icon {
    font-size: 2rem;
    margin-bottom: 12px;
  }
  
  .feature-title {
    font-size: 1.125rem;
    margin-bottom: 8px;
  }
}

/* Animations */
@keyframes blockchain-float {
  0%, 100% {
    transform: translateY(0px) rotate(0deg) scale(1);
  }
  25% {
    transform: translateY(-10px) rotate(90deg) scale(1.05);
  }
  50% {
    transform: translateY(-15px) rotate(180deg) scale(1);
  }
  75% {
    transform: translateY(-5px) rotate(270deg) scale(1.02);
  }
}

@keyframes chain-float {
  0%, 100% {
    transform: translateY(0px) translateX(0px) rotate(0deg) scale(1);
  }
  25% {
    transform: translateY(-15px) translateX(10px) rotate(90deg) scale(1.1);
  }
  50% {
    transform: translateY(-25px) translateX(-5px) rotate(180deg) scale(1);
  }
  75% {
    transform: translateY(-10px) translateX(-15px) rotate(270deg) scale(1.05);
  }
}

@keyframes shield-pulse {
  0%, 100% {
    opacity: 0.3;
    transform: translateY(0px) translateX(0px) scale(1) rotate(0deg);
  }
  25% {
    opacity: 0.5;
    transform: translateY(-8px) translateX(8px) scale(1.15) rotate(45deg);
  }
  50% {
    opacity: 0.6;
    transform: translateY(-12px) translateX(-3px) scale(1.2) rotate(90deg);
  }
  75% {
    opacity: 0.4;
    transform: translateY(-5px) translateX(-10px) scale(1.1) rotate(135deg);
  }
}

@keyframes blockchain-glow {
  0%, 100% {
    opacity: 0.3;
    filter: brightness(1) drop-shadow(0 0 8px rgba(59, 130, 246, 0.3));
  }
  50% {
    opacity: 0.6;
    filter: brightness(1.3) drop-shadow(0 0 15px rgba(59, 130, 246, 0.5));
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.7;
    transform: scale(1.1);
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}
</file>

<file path="src/pages/Home/sections/Own/OwnSection.tsx">
import { forwardRef } from 'react';
import { AO, BAZAR, WANDER } from '@arcaogaming/project-links';
import { CoinFlowAnimation } from './components';
import './OwnSection.css';

interface OwnSectionProps {
  className?: string;
}

const OwnSection = forwardRef<HTMLElement, OwnSectionProps>(
  ({ className = '' }, ref) => {
    return (
      <section 
        ref={ref}
        id="own" 
        className={`own-section ${className}`}
      >
        {/* Animated background layers */}
        <div className="own-bg-layer-1"></div>
        <div className="own-bg-layer-2"></div>
        <div className="own-bg-layer-3"></div>
        
        {/* Grid overlay */}
        <div className="own-grid-overlay"></div>
        
        {/* Blockchain Elements */}
        <div className="blockchain-element chain-link-1">🔗</div>
        <div className="blockchain-element chain-link-2">⛓️</div>
        <div className="blockchain-element shield-1">🛡️</div>
        <div className="blockchain-element shield-2">🔒</div>
        
        {/* Floating particles */}
        <div className="own-particles">
          <div className="own-particle-1"></div>
          <div className="own-particle-2"></div>
          <div className="own-particle-3"></div>
          <div className="own-particle-4"></div>
          <div className="own-particle-5"></div>
          
          {/* Geometric shapes */}
          <div className="own-shape-1"></div>
          <div className="own-shape-2"></div>
          <div className="own-shape-3"></div>
          <div className="own-shape-4"></div>
        </div>

        <div className="own-container">
          <div className="own-content">
            <h2 className="own-title">Own Your Digital Assets</h2>
            
            {/* Coin Flow Animation */}
            <CoinFlowAnimation />
            
            <p className="own-subtitle">True ownership in the blockchain gaming ecosystem</p>
            <p className="own-description">
              Your in-game assets are truly yours. Trade, sell, or use them across multiple games. 
              Build wealth through gameplay and watch your digital portfolio grow as more games integrate with our ecosystem.
            </p>
            
            <div className="own-features">
              <div className="feature-item">
                <div className="feature-icon">🏆</div>
                <h3 className="feature-title">True Ownership</h3>
                <p className="feature-description">
                  Your assets are stored on the <a href={AO.mint} target="_blank" rel="noopener noreferrer" className="ao-link">Arweave/AO blockchain</a>, giving you complete control and ownership.
                </p>
              </div>
              
              <div className="feature-item">
                <div className="feature-icon">🔄</div>
                <h3 className="feature-title">Cross-Game Utility</h3>
                <p className="feature-description">
                  Use your assets across multiple games in our growing ecosystem and anywhere <a href={WANDER.website} target="_blank" rel="noopener noreferrer" className="ao-link">Wander wallet</a> connects.
                </p>
              </div>
              
              <div className="feature-item">
                <div className="feature-icon">📈</div>
                <h3 className="feature-title">Value Growth</h3>
                <p className="feature-description">
                  Watch your assets appreciate on <a href={BAZAR.website} target="_blank" rel="noopener noreferrer" className="ao-link">Bazar</a> as more games and players join the network.
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>
    );
  }
);

OwnSection.displayName = 'OwnSection';

export default OwnSection;
</file>

<file path="src/pages/Home/sections/Play/components/CoinFlowAnimation.css">
/* Base Coin Flow Animation Styles */
.coin-flow-animation {
  position: absolute;
  width: 300px;
  height: 300px;
  pointer-events: none;
  z-index: 1;
}

/* Main coin styling */
.coin-main {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 3;
}

.coin-circle {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: linear-gradient(135deg, #ffd700, #ffed4e);
  border: 3px solid #fff;
  box-shadow: 
    0 0 20px rgba(255, 215, 0, 0.6),
    inset 0 0 20px rgba(255, 255, 255, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: coinPulse 2s ease-in-out infinite;
}

.coin-logo {
  width: 50px;
  height: 50px;
  object-fit: contain;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
}

/* Flow coins styling */
.flow-coin {
  position: absolute;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: linear-gradient(135deg, #ffd700, #ffed4e);
  border: 2px solid #fff;
  box-shadow: 0 0 15px rgba(255, 215, 0, 0.4);
  display: flex;
  align-items: center;
  justify-content: center;
}

.flow-coin-logo {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

/* Flow trails */
.flow-trail {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0.3;
}

/* PLAY SECTION - Gaming ecosystem flow */
.coin-flow-play {
  top: 20%;
  right: 10%;
}

.path-gaming {
  position: absolute;
  width: 100%;
  height: 100%;
}

.path-gaming .coin-1 {
  top: 10%;
  left: 20%;
  animation: gameFlow1 4s ease-in-out infinite;
}

.path-gaming .coin-2 {
  top: 60%;
  left: 80%;
  animation: gameFlow2 4s ease-in-out infinite 1.3s;
}

.path-gaming .coin-3 {
  top: 80%;
  left: 30%;
  animation: gameFlow3 4s ease-in-out infinite 2.6s;
}

.trail-gaming {
  background: radial-gradient(circle, rgba(255, 215, 0, 0.2) 0%, transparent 70%);
  animation: trailPulse 3s ease-in-out infinite;
}

/* OWN SECTION - Blockchain security flow */
.coin-flow-own {
  top: 30%;
  left: 5%;
}

.path-blockchain {
  position: absolute;
  width: 100%;
  height: 100%;
}

.path-blockchain .coin-1 {
  top: 0%;
  left: 50%;
  animation: blockchainFlow1 5s linear infinite;
}

.path-blockchain .coin-2 {
  top: 50%;
  left: 0%;
  animation: blockchainFlow2 5s linear infinite 1.7s;
}

.path-blockchain .coin-3 {
  top: 50%;
  left: 100%;
  animation: blockchainFlow3 5s linear infinite 3.3s;
}

.trail-blockchain {
  background: conic-gradient(from 0deg, rgba(255, 215, 0, 0.3), transparent, rgba(255, 215, 0, 0.3));
  animation: blockchainRotate 8s linear infinite;
}

/* CREATE SECTION - Building/creation flow */
.coin-flow-create {
  top: 15%;
  right: 15%;
}

.path-creation {
  position: absolute;
  width: 100%;
  height: 100%;
}

.path-creation .coin-1 {
  top: 20%;
  left: 10%;
  animation: creationFlow1 6s ease-in-out infinite;
}

.path-creation .coin-2 {
  top: 70%;
  left: 60%;
  animation: creationFlow2 6s ease-in-out infinite 2s;
}

.path-creation .coin-3 {
  top: 40%;
  left: 90%;
  animation: creationFlow3 6s ease-in-out infinite 4s;
}

.trail-creation {
  background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), transparent, rgba(255, 215, 0, 0.2));
  animation: creationBuild 4s ease-in-out infinite;
}

/* MINT SECTION - Treasure/minting flow */
.coin-flow-mint {
  top: 25%;
  left: 10%;
}

.path-treasure {
  position: absolute;
  width: 100%;
  height: 100%;
}

.path-treasure .coin-1 {
  top: 30%;
  left: 20%;
  animation: treasureFlow1 3s ease-in-out infinite;
}

.path-treasure .coin-2 {
  top: 10%;
  left: 70%;
  animation: treasureFlow2 3s ease-in-out infinite 1s;
}

.path-treasure .coin-3 {
  top: 70%;
  left: 80%;
  animation: treasureFlow3 3s ease-in-out infinite 2s;
}

.trail-treasure {
  background: radial-gradient(ellipse, rgba(255, 215, 0, 0.3) 0%, transparent 60%);
  animation: treasureGlow 2.5s ease-in-out infinite;
}

/* EARN SECTION - Earning/rewards flow */
.coin-flow-earn {
  top: 20%;
  right: 8%;
}

.path-rewards {
  position: absolute;
  width: 100%;
  height: 100%;
}

.path-rewards .coin-1 {
  top: 0%;
  left: 30%;
  animation: rewardsFlow1 4s ease-in-out infinite;
}

.path-rewards .coin-2 {
  top: 40%;
  left: 80%;
  animation: rewardsFlow2 4s ease-in-out infinite 1.3s;
}

.path-rewards .coin-3 {
  top: 80%;
  left: 10%;
  animation: rewardsFlow3 4s ease-in-out infinite 2.7s;
}

.trail-rewards {
  background: conic-gradient(from 90deg, rgba(255, 215, 0, 0.4), transparent, rgba(255, 215, 0, 0.4));
  animation: rewardsRotate 6s linear infinite;
}

/* Keyframe Animations */
@keyframes coinPulse {
  0%, 100% { transform: translate(-50%, -50%) scale(1); }
  50% { transform: translate(-50%, -50%) scale(1.1); }
}

@keyframes trailPulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 0.6; }
}

/* Play section animations */
@keyframes gameFlow1 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  25% { transform: translate(100px, -50px) scale(0.8); opacity: 0.8; }
  50% { transform: translate(150px, 50px) scale(1.2); opacity: 0.6; }
  75% { transform: translate(50px, 100px) scale(0.9); opacity: 0.8; }
  100% { transform: translate(0, 0) scale(1); opacity: 1; }
}

@keyframes gameFlow2 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  25% { transform: translate(-80px, -30px) scale(1.1); opacity: 0.8; }
  50% { transform: translate(-120px, 40px) scale(0.7); opacity: 0.6; }
  75% { transform: translate(-40px, 80px) scale(1.3); opacity: 0.8; }
  100% { transform: translate(0, 0) scale(1); opacity: 1; }
}

@keyframes gameFlow3 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  25% { transform: translate(60px, -80px) scale(0.9); opacity: 0.8; }
  50% { transform: translate(120px, -40px) scale(1.4); opacity: 0.6; }
  75% { transform: translate(80px, -20px) scale(0.8); opacity: 0.8; }
  100% { transform: translate(0, 0) scale(1); opacity: 1; }
}

/* Own section animations */
@keyframes blockchainFlow1 {
  0% { transform: translate(0, 0) rotate(0deg); }
  25% { transform: translate(-100px, 100px) rotate(90deg); }
  50% { transform: translate(-200px, 0) rotate(180deg); }
  75% { transform: translate(-100px, -100px) rotate(270deg); }
  100% { transform: translate(0, 0) rotate(360deg); }
}

@keyframes blockchainFlow2 {
  0% { transform: translate(0, 0) rotate(0deg); }
  25% { transform: translate(100px, -50px) rotate(90deg); }
  50% { transform: translate(200px, 0) rotate(180deg); }
  75% { transform: translate(100px, 50px) rotate(270deg); }
  100% { transform: translate(0, 0) rotate(360deg); }
}

@keyframes blockchainFlow3 {
  0% { transform: translate(0, 0) rotate(0deg); }
  25% { transform: translate(-100px, -50px) rotate(-90deg); }
  50% { transform: translate(-200px, 0) rotate(-180deg); }
  75% { transform: translate(-100px, 50px) rotate(-270deg); }
  100% { transform: translate(0, 0) rotate(-360deg); }
}

@keyframes blockchainRotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Create section animations */
@keyframes creationFlow1 {
  0% { transform: translate(0, 0) scale(0.5); opacity: 0; }
  20% { transform: translate(50px, -30px) scale(1); opacity: 1; }
  40% { transform: translate(120px, 20px) scale(1.2); opacity: 0.8; }
  60% { transform: translate(180px, -10px) scale(0.9); opacity: 0.6; }
  80% { transform: translate(220px, 30px) scale(1.1); opacity: 0.4; }
  100% { transform: translate(250px, 0) scale(0.3); opacity: 0; }
}

@keyframes creationFlow2 {
  0% { transform: translate(0, 0) scale(0.5); opacity: 0; }
  20% { transform: translate(-40px, -60px) scale(1); opacity: 1; }
  40% { transform: translate(-80px, -100px) scale(1.3); opacity: 0.8; }
  60% { transform: translate(-120px, -80px) scale(0.8); opacity: 0.6; }
  80% { transform: translate(-160px, -120px) scale(1.1); opacity: 0.4; }
  100% { transform: translate(-200px, -100px) scale(0.3); opacity: 0; }
}

@keyframes creationFlow3 {
  0% { transform: translate(0, 0) scale(0.5); opacity: 0; }
  20% { transform: translate(-30px, 40px) scale(1); opacity: 1; }
  40% { transform: translate(-80px, 80px) scale(1.1); opacity: 0.8; }
  60% { transform: translate(-140px, 60px) scale(0.9); opacity: 0.6; }
  80% { transform: translate(-180px, 100px) scale(1.2); opacity: 0.4; }
  100% { transform: translate(-220px, 80px) scale(0.3); opacity: 0; }
}

@keyframes creationBuild {
  0%, 100% { transform: scaleY(1); opacity: 0.2; }
  50% { transform: scaleY(1.5); opacity: 0.4; }
}

/* Mint section animations */
@keyframes treasureFlow1 {
  0% { transform: translate(0, 0) scale(1) rotate(0deg); opacity: 1; }
  33% { transform: translate(80px, -40px) scale(1.3) rotate(120deg); opacity: 0.8; }
  66% { transform: translate(40px, 60px) scale(0.7) rotate(240deg); opacity: 0.6; }
  100% { transform: translate(0, 0) scale(1) rotate(360deg); opacity: 1; }
}

@keyframes treasureFlow2 {
  0% { transform: translate(0, 0) scale(1) rotate(0deg); opacity: 1; }
  33% { transform: translate(-60px, 80px) scale(1.2) rotate(-120deg); opacity: 0.8; }
  66% { transform: translate(-20px, -40px) scale(0.8) rotate(-240deg); opacity: 0.6; }
  100% { transform: translate(0, 0) scale(1) rotate(-360deg); opacity: 1; }
}

@keyframes treasureFlow3 {
  0% { transform: translate(0, 0) scale(1) rotate(0deg); opacity: 1; }
  33% { transform: translate(-80px, -60px) scale(1.4) rotate(120deg); opacity: 0.8; }
  66% { transform: translate(-40px, 20px) scale(0.6) rotate(240deg); opacity: 0.6; }
  100% { transform: translate(0, 0) scale(1) rotate(360deg); opacity: 1; }
}

@keyframes treasureGlow {
  0%, 100% { transform: scale(1); opacity: 0.3; }
  50% { transform: scale(1.2); opacity: 0.6; }
}

/* Earn section animations */
@keyframes rewardsFlow1 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  25% { transform: translate(60px, 80px) scale(1.2); opacity: 0.9; }
  50% { transform: translate(120px, 40px) scale(0.8); opacity: 0.7; }
  75% { transform: translate(80px, -20px) scale(1.1); opacity: 0.8; }
  100% { transform: translate(0, 0) scale(1); opacity: 1; }
}

@keyframes rewardsFlow2 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  25% { transform: translate(-100px, 40px) scale(0.9); opacity: 0.9; }
  50% { transform: translate(-60px, 100px) scale(1.3); opacity: 0.7; }
  75% { transform: translate(-30px, 60px) scale(0.7); opacity: 0.8; }
  100% { transform: translate(0, 0) scale(1); opacity: 1; }
}

@keyframes rewardsFlow3 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  25% { transform: translate(80px, -60px) scale(1.1); opacity: 0.9; }
  50% { transform: translate(140px, -20px) scale(0.9); opacity: 0.7; }
  75% { transform: translate(100px, -100px) scale(1.2); opacity: 0.8; }
  100% { transform: translate(0, 0) scale(1); opacity: 1; }
}

@keyframes rewardsRotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(-360deg); }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .coin-flow-animation {
    width: 200px;
    height: 200px;
  }
  
  .coin-circle {
    width: 60px;
    height: 60px;
  }
  
  .coin-logo {
    width: 36px;
    height: 36px;
  }
  
  .flow-coin {
    width: 30px;
    height: 30px;
  }
  
  .flow-coin-logo {
    width: 18px;
    height: 18px;
  }
}

@media (max-width: 480px) {
  .coin-flow-animation {
    width: 150px;
    height: 150px;
  }
  
  .coin-circle {
    width: 50px;
    height: 50px;
  }
  
  .coin-logo {
    width: 30px;
    height: 30px;
  }
  
  .flow-coin {
    width: 25px;
    height: 25px;
  }
  
  .flow-coin-logo {
    width: 15px;
    height: 15px;
  }
}
</file>

<file path="src/pages/Home/sections/Play/components/CoinFlowAnimation.tsx">
import React from 'react';
import './PlayCoinFlowAnimation.css';

interface CoinFlowAnimationProps {
  className?: string;
}

const CoinFlowAnimation: React.FC<CoinFlowAnimationProps> = ({ 
  className = '' 
}) => {
  // Commented out as requested - too broad for current implementation
  return null;
  
  /*
  return (
    <div className={`play-coin-flow-animation ${className}`}>
      <div className="play-coin-main">
        <div className="play-coin-circle">
          <img 
            src="/logo-white-transparent.png" 
            alt="$GAME Token" 
            className="play-coin-logo"
          />
        </div>
      </div>

      <div className="play-gaming-controller">🎮</div>

      <div className="play-gaming-flow">
        <div className="play-income-token play-income-token-1">
          <img src="/logo-white-transparent.png" alt="$GAME" className="play-income-token-logo" />
        </div>
        <div className="play-income-token play-income-token-2">
          <img src="/logo-white-transparent.png" alt="$GAME" className="play-income-token-logo" />
        </div>
        <div className="play-income-token play-income-token-3">
          <img src="/logo-white-transparent.png" alt="$GAME" className="play-income-token-logo" />
        </div>

        <div className="play-cost-token play-cost-token-1">
          <img src="/logo-white-transparent.png" alt="$GAME" className="play-cost-token-logo" />
        </div>
        <div className="play-cost-token play-cost-token-2">
          <img src="/logo-white-transparent.png" alt="$GAME" className="play-cost-token-logo" />
        </div>
        <div className="play-cost-token play-cost-token-3">
          <img src="/logo-white-transparent.png" alt="$GAME" className="play-cost-token-logo" />
        </div>
      </div>

      <div className="play-gaming-trail"></div>
    </div>
  );
  */
};

export default CoinFlowAnimation;
</file>

<file path="src/pages/Home/sections/Play/components/HeroButtons.css">
/* Hero Buttons Styles */
.hero-buttons {
  display: flex;
  flex-direction: column;
  gap: 16px;
  justify-content: center;
  align-items: center;
  margin-bottom: 64px;
}

@media (min-width: 640px) {
  .hero-buttons {
    flex-direction: row;
    flex-wrap: wrap;
    gap: 20px;
  }
}

.btn-primary {
  position: relative;
  padding: 16px 32px;
  background: linear-gradient(90deg, 
    var(--gaming-purple) 0%, 
    var(--gaming-pink) 50%, 
    var(--gaming-purple) 100%);
  border: 1px solid rgba(168, 85, 247, 0.2);
  border-radius: 16px;
  font-weight: 700;
  font-size: 1rem;
  color: var(--text-gaming);
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);
  overflow: hidden;
  min-width: 140px;
}

.btn-primary:hover {
  transform: scale(1.05);
  box-shadow: 0 25px 50px -12px rgba(168, 85, 247, 0.4);
}

.btn-primary::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(90deg, 
    var(--gaming-purple) 0%, 
    var(--gaming-pink) 50%, 
    var(--gaming-purple) 100%);
  border-radius: 16px;
  filter: blur(40px);
  opacity: 0;
  transition: opacity 0.5s ease;
}

.btn-primary:hover::before {
  opacity: 0.6;
}

.btn-primary::after {
  content: '';
  position: absolute;
  inset: 0;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.btn-primary:hover::after {
  opacity: 1;
}

.btn-secondary {
  position: relative;
  padding: 12px 24px;
  border: 2px solid rgba(156, 163, 175, 0.3);
  border-radius: 12px;
  font-weight: 600;
  font-size: 0.875rem;
  color: var(--text-gaming);
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(8px);
  cursor: pointer;
  transition: all 0.3s ease;
  overflow: hidden;
  min-width: 100px;
}

.btn-secondary:hover {
  transform: scale(1.05);
  border-color: rgba(6, 182, 212, 0.6);
  color: var(--gaming-cyan);
  box-shadow: 0 8px 25px -8px rgba(6, 182, 212, 0.2);
}

.btn-secondary::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(90deg, 
    rgba(6, 182, 212, 0.08), 
    rgba(59, 130, 246, 0.08));
  border-radius: 12px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.btn-secondary:hover::before {
  opacity: 1;
}

.btn-content {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: center;
}

.btn-icon {
  font-size: 1rem;
}

.btn-text {
  letter-spacing: 0.05em;
  font-weight: inherit;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .hero-buttons {
    gap: 12px;
  }
  
  .btn-primary {
    padding: 14px 28px;
    font-size: 0.9rem;
    min-width: 120px;
  }
  
  .btn-secondary {
    padding: 10px 20px;
    font-size: 0.8rem;
    min-width: 90px;
  }
  
  .btn-icon {
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .hero-buttons {
    flex-direction: column;
    gap: 10px;
    width: 100%;
    max-width: 280px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .btn-primary,
  .btn-secondary {
    width: 100%;
    min-width: unset;
  }
}
</file>

<file path="src/pages/Home/sections/Play/components/PlayCoinFlowAnimation.css">
/* Play Section Coin Flow Animation - Gaming Economy Flow */
.play-coin-flow-animation {
  position: relative;
  width: 300px;
  height: 200px;
  pointer-events: none;
  z-index: 1;
  margin: 20px auto;
}

/* Main coin styling */
.play-coin-main {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 3;
}

.play-coin-circle {
  width: 90px;
  height: 90px;
  border-radius: 50%;
  background: linear-gradient(135deg, #ffd700, #ffed4e);
  border: 4px solid #fff;
  box-shadow: 
    0 0 25px rgba(255, 215, 0, 0.7),
    inset 0 0 25px rgba(255, 255, 255, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: playMainCoinPulse 2.5s ease-in-out infinite;
}

.play-coin-logo {
  width: 55px;
  height: 55px;
  object-fit: contain;
  filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.3));
}

/* Gaming flow - tokens flowing in and out */
.play-gaming-flow {
  position: absolute;
  width: 100%;
  height: 100%;
}

/* Tokens flowing IN (earned from playing) */
.play-token-in {
  position: absolute;
  width: 35px;
  height: 35px;
  border-radius: 50%;
  background: linear-gradient(135deg, #00ff88, #00cc66);
  border: 2px solid #fff;
  box-shadow: 0 0 15px rgba(0, 255, 136, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.play-token-in-logo {
  width: 20px;
  height: 20px;
  object-fit: contain;
}

/* Tokens flowing OUT (spent on gameplay) */
.play-token-out {
  position: absolute;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: linear-gradient(135deg, #ff6b6b, #ff5252);
  border: 2px solid #fff;
  box-shadow: 0 0 12px rgba(255, 107, 107, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.play-token-out-logo {
  width: 18px;
  height: 18px;
  object-fit: contain;
}

/* Gaming controller/player representation */
.play-game-controller {
  position: absolute;
  top: 20%;
  left: 15%;
  font-size: 24px;
  animation: playControllerBounce 3s ease-in-out infinite;
}

/* Positioning and animations for incoming tokens (earnings) */
.play-token-in-1 {
  top: 10%;
  left: 70%;
  animation: playTokenFlowIn1 4s ease-in-out infinite;
}

.play-token-in-2 {
  top: 30%;
  left: 85%;
  animation: playTokenFlowIn2 4s ease-in-out infinite 1.3s;
}

.play-token-in-3 {
  top: 70%;
  left: 75%;
  animation: playTokenFlowIn3 4s ease-in-out infinite 2.6s;
}

/* Positioning and animations for outgoing tokens (costs) */
.play-token-out-1 {
  top: 60%;
  left: 10%;
  animation: playTokenFlowOut1 3.5s ease-in-out infinite;
}

.play-token-out-2 {
  top: 80%;
  left: 25%;
  animation: playTokenFlowOut2 3.5s ease-in-out infinite 1.2s;
}

.play-token-out-3 {
  top: 40%;
  left: 5%;
  animation: playTokenFlowOut3 3.5s ease-in-out infinite 2.4s;
}

/* Gaming trail effect */
.play-gaming-trail {
  position: absolute;
  width: 100%;
  height: 100%;
  background: radial-gradient(
    circle at 50% 50%, 
    rgba(255, 215, 0, 0.1) 0%, 
    rgba(0, 255, 136, 0.1) 30%,
    rgba(255, 107, 107, 0.1) 60%,
    transparent 80%
  );
  animation: playTrailRotate 8s linear infinite;
  opacity: 0.6;
}

/* Keyframe Animations */
@keyframes playMainCoinPulse {
  0%, 100% { 
    transform: translate(-50%, -50%) scale(1) rotate(0deg); 
    box-shadow: 0 0 25px rgba(255, 215, 0, 0.7), inset 0 0 25px rgba(255, 255, 255, 0.3);
  }
  50% { 
    transform: translate(-50%, -50%) scale(1.1) rotate(180deg); 
    box-shadow: 0 0 35px rgba(255, 215, 0, 0.9), inset 0 0 35px rgba(255, 255, 255, 0.4);
  }
}

@keyframes playControllerBounce {
  0%, 100% { transform: translateY(0px) rotate(-5deg); }
  50% { transform: translateY(-10px) rotate(5deg); }
}

@keyframes playTrailRotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Incoming token animations (earnings) */
@keyframes playTokenFlowIn1 {
  0% { 
    transform: translate(0, 0) scale(0.5); 
    opacity: 0; 
  }
  20% { 
    transform: translate(-30px, 20px) scale(1); 
    opacity: 1; 
  }
  50% { 
    transform: translate(-80px, 60px) scale(1.2); 
    opacity: 0.8; 
  }
  80% { 
    transform: translate(-120px, 100px) scale(0.8); 
    opacity: 0.4; 
  }
  100% { 
    transform: translate(-150px, 130px) scale(0.3); 
    opacity: 0; 
  }
}

@keyframes playTokenFlowIn2 {
  0% { 
    transform: translate(0, 0) scale(0.5); 
    opacity: 0; 
  }
  20% { 
    transform: translate(-40px, 30px) scale(1); 
    opacity: 1; 
  }
  50% { 
    transform: translate(-100px, 80px) scale(1.3); 
    opacity: 0.8; 
  }
  80% { 
    transform: translate(-140px, 120px) scale(0.7); 
    opacity: 0.4; 
  }
  100% { 
    transform: translate(-170px, 150px) scale(0.3); 
    opacity: 0; 
  }
}

@keyframes playTokenFlowIn3 {
  0% { 
    transform: translate(0, 0) scale(0.5); 
    opacity: 0; 
  }
  20% { 
    transform: translate(-35px, -20px) scale(1); 
    opacity: 1; 
  }
  50% { 
    transform: translate(-90px, -60px) scale(1.1); 
    opacity: 0.8; 
  }
  80% { 
    transform: translate(-130px, -100px) scale(0.8); 
    opacity: 0.4; 
  }
  100% { 
    transform: translate(-160px, -130px) scale(0.3); 
    opacity: 0; 
  }
}

/* Outgoing token animations (costs) */
@keyframes playTokenFlowOut1 {
  0% { 
    transform: translate(0, 0) scale(1); 
    opacity: 1; 
  }
  30% { 
    transform: translate(40px, -30px) scale(0.8); 
    opacity: 0.8; 
  }
  60% { 
    transform: translate(90px, -70px) scale(0.6); 
    opacity: 0.5; 
  }
  100% { 
    transform: translate(140px, -110px) scale(0.3); 
    opacity: 0; 
  }
}

@keyframes playTokenFlowOut2 {
  0% { 
    transform: translate(0, 0) scale(1); 
    opacity: 1; 
  }
  30% { 
    transform: translate(50px, -40px) scale(0.9); 
    opacity: 0.8; 
  }
  60% { 
    transform: translate(110px, -90px) scale(0.5); 
    opacity: 0.5; 
  }
  100% { 
    transform: translate(160px, -130px) scale(0.2); 
    opacity: 0; 
  }
}

@keyframes playTokenFlowOut3 {
  0% { 
    transform: translate(0, 0) scale(1); 
    opacity: 1; 
  }
  30% { 
    transform: translate(45px, -25px) scale(0.7); 
    opacity: 0.8; 
  }
  60% { 
    transform: translate(100px, -60px) scale(0.4); 
    opacity: 0.5; 
  }
  100% { 
    transform: translate(150px, -100px) scale(0.2); 
    opacity: 0; 
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .play-coin-flow-animation {
    width: 250px;
    height: 250px;
  }
  
  .play-coin-circle {
    width: 70px;
    height: 70px;
  }
  
  .play-coin-logo {
    width: 42px;
    height: 42px;
  }
  
  .play-token-in, .play-token-out {
    width: 25px;
    height: 25px;
  }
  
  .play-token-in-logo, .play-token-out-logo {
    width: 15px;
    height: 15px;
  }
}

@media (max-width: 480px) {
  .play-coin-flow-animation {
    width: 180px;
    height: 180px;
  }
  
  .play-coin-circle {
    width: 55px;
    height: 55px;
  }
  
  .play-coin-logo {
    width: 32px;
    height: 32px;
  }
  
  .play-token-in, .play-token-out {
    width: 20px;
    height: 20px;
  }
  
  .play-token-in-logo, .play-token-out-logo {
    width: 12px;
    height: 12px;
  }
}
</file>

<file path="src/pages/Home/sections/Play/components/StatsSection.css">
/* Stats Section Styles */
.stats-section {
  opacity: 1;
  transform: translateY(0);
  transition: all 0.8s ease-out;
  margin-bottom: 64px;
}

.stats-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Stats Grid */
.hero-stats {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 32px;
  max-width: 512px;
  margin: 0 auto;
}

.stat-item {
  text-align: center;
  position: relative;
  padding: 16px;
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.02);
  backdrop-filter: blur(8px);
  border: 1px solid rgba(255, 255, 255, 0.05);
  transition: all 0.3s ease;
}

.stat-item:hover {
  transform: translateY(-4px);
  background: rgba(255, 255, 255, 0.05);
  border-color: rgba(255, 255, 255, 0.1);
}

.stat-number {
  font-size: 1.875rem;
  font-weight: 700;
  margin-bottom: 4px;
  font-family: 'Courier New', monospace;
  letter-spacing: 0.05em;
  position: relative;
  text-shadow: 0 0 10px currentColor;
  transition: all 0.3s ease;
}

.stat-number.purple {
  color: var(--gaming-purple);
}

.stat-number.cyan {
  color: var(--gaming-cyan);
}

.stat-number.pink {
  color: var(--gaming-pink);
}

.stat-label {
  font-size: 0.875rem;
  color: #9ca3af;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  font-weight: 500;
}

/* Glow effect on hover */
.stat-item:hover .stat-number.purple {
  text-shadow: 0 0 20px var(--gaming-purple);
}

.stat-item:hover .stat-number.cyan {
  text-shadow: 0 0 20px var(--gaming-cyan);
}

.stat-item:hover .stat-number.pink {
  text-shadow: 0 0 20px var(--gaming-pink);
}

/* Responsive design */
@media (max-width: 768px) {
  .hero-stats {
    grid-template-columns: 1fr;
    gap: 24px;
    max-width: 300px;
  }
  
  .stat-number {
    font-size: 1.5rem;
  }
  
  .stat-item {
    padding: 12px;
  }
}

@media (max-width: 480px) {
  .hero-stats {
    gap: 16px;
  }
  
  .stat-number {
    font-size: 1.25rem;
  }
  
  .stat-label {
    font-size: 0.75rem;
  }
}
</file>

<file path="src/pages/Home/sections/Play/components/VideoCarousel.css">
/* Video Carousel Styles */
.video-carousel {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.carousel-container {
  position: relative;
  width: 100%;
  height: 400px;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.carousel-item {
  position: absolute;
  width: 350px;
  height: 300px;
  transition: all 0.8s cubic-bezier(0.4, 0.0, 0.2, 1);
  border-radius: 20px;
  overflow: hidden;
  background: linear-gradient(135deg, 
    rgba(168, 85, 247, 0.1) 0%, 
    rgba(59, 130, 246, 0.1) 50%, 
    rgba(6, 182, 212, 0.1) 100%);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 
    0 25px 50px -12px rgba(0, 0, 0, 0.25),
    0 0 0 1px rgba(255, 255, 255, 0.05);
}

/* Center position - main focus */
.carousel-item--center {
  transform: translateX(0) scale(1);
  opacity: 1;
  z-index: 30;
}

/* Left position */
.carousel-item--left {
  transform: translateX(-400px) scale(0.8);
  opacity: 0.7;
  z-index: 20;
}

/* Right position */
.carousel-item--right {
  transform: translateX(400px) scale(0.8);
  opacity: 0.7;
  z-index: 20;
}

/* Hidden items */
.carousel-item--hidden {
  transform: translateX(0) scale(0.5);
  opacity: 0;
  z-index: 10;
  pointer-events: none;
}

/* Video wrapper */
.video-wrapper {
  display: block;
  width: 100%;
  height: 100%;
  position: relative;
  text-decoration: none;
  color: inherit;
  cursor: pointer;
  transition: all 0.3s ease;
}

.video-wrapper:hover {
  transform: scale(1.02);
}

.carousel-video {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
}

/* Placeholder wrapper */
.placeholder-wrapper {
  display: block;
  width: 100%;
  height: 100%;
  text-decoration: none;
  color: inherit;
  background: linear-gradient(135deg, 
    rgba(168, 85, 247, 0.2) 0%, 
    rgba(59, 130, 246, 0.2) 50%, 
    rgba(6, 182, 212, 0.2) 100%);
  border-radius: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.placeholder-wrapper:hover {
  background: linear-gradient(135deg, 
    rgba(168, 85, 247, 0.3) 0%, 
    rgba(59, 130, 246, 0.3) 50%, 
    rgba(6, 182, 212, 0.3) 100%);
  transform: scale(1.05);
}

.placeholder-content {
  text-align: center;
  color: rgba(255, 255, 255, 0.8);
}

.placeholder-icon {
  font-size: 3rem;
  display: block;
  margin-bottom: 12px;
  opacity: 0.8;
}

.placeholder-text {
  font-size: 1.25rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  opacity: 0.9;
}

/* Hover effects */
.carousel-item:hover {
  box-shadow: 
    0 35px 70px -12px rgba(0, 0, 0, 0.4),
    0 0 0 1px rgba(168, 85, 247, 0.3);
}

/* Responsive design */
@media (max-width: 1024px) {
  .carousel-item {
    width: 300px;
    height: 250px;
  }
  
  .carousel-item--left {
    transform: translateX(-350px) scale(0.8);
  }
  
  .carousel-item--right {
    transform: translateX(350px) scale(0.8);
  }
}

@media (max-width: 768px) {
  .video-carousel {
    padding: 0 10px;
  }
  
  .carousel-container {
    height: 300px;
  }
  
  .carousel-item {
    width: 280px;
    height: 200px;
    border-radius: 16px;
  }
  
  .carousel-video {
    border-radius: 16px;
  }
  
  .placeholder-wrapper {
    border-radius: 16px;
  }
  
  .carousel-item--left {
    transform: translateX(-300px) scale(0.85);
  }
  
  .carousel-item--right {
    transform: translateX(300px) scale(0.85);
  }
  
  .placeholder-icon {
    font-size: 2.5rem;
  }
  
  .placeholder-text {
    font-size: 1rem;
  }
}

@media (max-width: 480px) {
  .carousel-container {
    height: 250px;
  }
  
  .carousel-item {
    width: 250px;
    height: 180px;
  }
  
  .carousel-item--left {
    transform: translateX(-270px) scale(0.9);
  }
  
  .carousel-item--right {
    transform: translateX(270px) scale(0.9);
  }
  
  .placeholder-icon {
    font-size: 2rem;
  }
  
  .placeholder-text {
    font-size: 0.875rem;
  }
}
</file>

<file path="src/pages/Home/sections/Play/components/VideoCarousel.tsx">
import { useEffect, useRef, useState } from 'react';
import { ARCAO, RUNEREALM } from '@arcaogaming/project-links';
import './VideoCarousel.css';

interface CarouselItem {
  id: string;
  type: 'video' | 'placeholder';
  src?: string;
  title?: string;
  icon?: string;
  link?: string;
}

const carouselItems: CarouselItem[] = [
  {
    id: 'video1',
    type: 'video',
    src: 'https://vphwoves2balumuaxe5rsbljbkkhhev22m2z22jlqkkbnetws2tq.ar.io/q89nVJLQQLoygLk7GQVpCpRzkrrTNZ1pK4KUFpJ2lqc',
    title: 'Game Video 1',
    link: RUNEREALM.gameSite
  },
  {
    id: 'video2',
    type: 'video',
    src: 'https://gfnoxx4rpevmj73fqqd2yhcakl7usqn4vz7qmeclttq3tn4kyuia.arweave.net/MVrr35F5KsT_ZYQHrBxAUv9JQbyufwYQS5zhubeKxRA',
    title: 'Game Video 2',
    link: ARCAO.website
  },
  {
    id: 'allgames',
    type: 'placeholder',
    title: 'All Games',
    icon: '🎮',
    link: ARCAO.website
  }
];

const VideoCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const videoRefs = useRef<(HTMLVideoElement | null)[]>([]);
  const incrementerRef = useRef(0);

  useEffect(() => {
    // Set video playback rate to 2x
    videoRefs.current.forEach(video => {
      if (video) {
        video.playbackRate = 2.0;
      }
    });
  }, []);

  useEffect(() => {
    let timeoutId: NodeJS.Timeout;

    const scheduleNext = () => {
      // Get current item based on incrementer
      const currentItem = carouselItems[incrementerRef.current];
      const delay = currentItem.id === 'allgames' ? 5000 : 10000;
      
      timeoutId = setTimeout(() => {
        // Increment the counter
        incrementerRef.current = (incrementerRef.current + 1) % carouselItems.length;
        
        // Update the display index
        setCurrentIndex(incrementerRef.current);
        
        // Schedule the next transition
        scheduleNext();
      }, delay);
    };

    // Start the first cycle after 10 seconds (Video1 is showing initially)
    timeoutId = setTimeout(() => {
      incrementerRef.current = (incrementerRef.current + 1) % carouselItems.length;
      setCurrentIndex(incrementerRef.current);
      scheduleNext();
    }, 10000);

    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, []);

  const getItemPosition = (index: number) => {
    // Calculate the relative position in a circular manner
    const diff = (index - currentIndex + carouselItems.length) % carouselItems.length;
    
    if (diff === 0) return 'center';
    if (diff === 1) return 'right';
    if (diff === carouselItems.length - 1) return 'left'; // This ensures proper left positioning
    
    return 'hidden';
  };

  return (
    <div className="video-carousel">
      <div className="carousel-container">
        {carouselItems.map((item, index) => {
          const position = getItemPosition(index);
          
          return (
            <div
              key={item.id}
              className={`carousel-item carousel-item--${position}`}
            >
              {item.type === 'video' ? (
                <a
                  href={item.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="video-wrapper"
                >
                  <video
                    ref={el => { videoRefs.current[index] = el; }}
                    className="carousel-video"
                    autoPlay
                    muted
                    loop
                    playsInline
                    preload="auto"
                  >
                    <source src={item.src} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                </a>
              ) : (
                <a
                  href={item.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="placeholder-wrapper"
                >
                  <div className="placeholder-content">
                    <span className="placeholder-icon">{item.icon}</span>
                    <span className="placeholder-text">{item.title}</span>
                  </div>
                </a>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default VideoCarousel;
</file>

<file path="src/pages/Home/sections/Play/index.ts">
export { default as PlaySection } from './PlaySection';
</file>

<file path="src/pages/Mint/components/ConnectArweaveAOWalletButton/ConnectArweaveAOWalletButton.css">
/* Wallet Button Styles - Mint Page Theme */
.wallet-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.wallet-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.75rem;
  padding: 1.5rem 2rem;
  border: none;
  border-radius: 16px;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.4s ease;
  text-decoration: none;
  min-width: 200px;
  justify-content: center;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  position: relative;
  overflow: hidden;
}

.wallet-button::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.1) 0%, 
    rgba(5, 150, 105, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.wallet-button:hover::before {
  opacity: 1;
}

.wallet-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.wallet-button:disabled::before {
  opacity: 0;
}

.wallet-button-primary {
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.8) 0%, 
    rgba(30, 41, 59, 0.8) 100%);
  color: rgba(34, 197, 94, 1);
  border: 2px solid rgba(34, 197, 94, 0.3);
  backdrop-filter: blur(16px);
  box-shadow: 0 8px 25px rgba(34, 197, 94, 0.2);
}

.wallet-button-primary:hover:not(:disabled) {
  transform: translateY(-4px);
  border-color: rgba(34, 197, 94, 0.6);
  box-shadow: 0 15px 35px rgba(34, 197, 94, 0.4);
  color: rgba(52, 211, 153, 1);
}

.wallet-button-secondary {
  background: rgba(15, 23, 42, 0.6);
  color: rgba(34, 197, 94, 1);
  border: 1px solid rgba(34, 197, 94, 0.2);
  backdrop-filter: blur(10px);
  flex-direction: row;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
}

.wallet-button-secondary:hover {
  background: rgba(15, 23, 42, 0.8);
  border-color: rgba(34, 197, 94, 0.4);
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(34, 197, 94, 0.2);
}

.wallet-button-icon {
  font-size: 1.2rem;
}

/* Logo Container and Animation */
.wallet-logo-container {
  position: relative;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 0.5rem;
}

.wallet-logo {
  position: absolute;
  width: 48px;
  height: 48px;
  object-fit: contain;
  opacity: 0;
  transform: rotateY(90deg) scale(0.8);
  transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  filter: drop-shadow(0 4px 12px rgba(34, 197, 94, 0.3));
}

.wallet-logo.active {
  opacity: 1;
  transform: rotateY(0deg) scale(1);
  animation: logo-glow 2s ease-in-out infinite;
}

.wallet-button-text {
  position: relative;
  z-index: 2;
  font-size: 1rem;
  font-weight: 700;
  text-align: center;
  background: linear-gradient(90deg, 
    rgba(34, 197, 94, 1) 0%, 
    rgba(5, 150, 105, 1) 50%,
    rgba(52, 211, 153, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: text-shimmer 3s ease-in-out infinite;
}

/* Connected State */
.wallet-connected {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  padding: 1.5rem;
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.8) 0%, 
    rgba(30, 41, 59, 0.8) 100%);
  border-radius: 20px;
  backdrop-filter: blur(16px);
  border: 2px solid rgba(34, 197, 94, 0.3);
  box-shadow: 0 8px 25px rgba(34, 197, 94, 0.2);
  position: relative;
  overflow: hidden;
}

.wallet-connected::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.05) 0%, 
    rgba(5, 150, 105, 0.05) 100%);
  opacity: 1;
}

.profile-container {
  display: flex;
  align-items: center;
  gap: 1rem;
  position: relative;
  z-index: 2;
}

.user-profile {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.profile-avatar {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  border: 2px solid rgba(34, 197, 94, 0.4);
  box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
  transition: all 0.3s ease;
}

.profile-avatar:hover {
  border-color: rgba(34, 197, 94, 0.6);
  transform: scale(1.05);
}

.profile-info {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.profile-name {
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  font-size: 1rem;
  text-shadow: 0 2px 4px rgba(34, 197, 94, 0.2);
}

.profile-address {
  font-size: 0.85rem;
  color: rgba(156, 163, 175, 1);
  cursor: pointer;
  transition: all 0.3s ease;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  background: rgba(15, 23, 42, 0.5);
  border: 1px solid rgba(34, 197, 94, 0.1);
}

.profile-address:hover {
  color: rgba(52, 211, 153, 1);
  background: rgba(15, 23, 42, 0.8);
  border-color: rgba(34, 197, 94, 0.3);
  transform: translateY(-1px);
}

/* Animations */
@keyframes logo-glow {
  0%, 100% {
    filter: drop-shadow(0 4px 12px rgba(34, 197, 94, 0.3));
  }
  50% {
    filter: drop-shadow(0 6px 16px rgba(34, 197, 94, 0.5)) brightness(1.1);
  }
}

@keyframes text-shimmer {
  0%, 100% {
    background-position: -200% center;
  }
  50% {
    background-position: 200% center;
  }
}

@keyframes treasure-pulse {
  0%, 100% {
    transform: scale(1);
    box-shadow: 0 8px 25px rgba(34, 197, 94, 0.2);
  }
  50% {
    transform: scale(1.02);
    box-shadow: 0 12px 35px rgba(34, 197, 94, 0.4);
  }
}

/* Loading state animation */
.wallet-button:disabled .wallet-logo {
  animation: logo-loading 1.5s ease-in-out infinite;
}

@keyframes logo-loading {
  0%, 100% {
    transform: rotateY(0deg) scale(1);
  }
  50% {
    transform: rotateY(180deg) scale(0.9);
  }
}

/* Responsive design */
@media (max-width: 768px) {
  .wallet-button {
    min-width: 180px;
    padding: 1.25rem 1.5rem;
    font-size: 0.9rem;
  }
  
  .wallet-logo-container {
    width: 40px;
    height: 40px;
  }
  
  .wallet-logo {
    width: 40px;
    height: 40px;
  }
  
  .wallet-connected {
    padding: 1.25rem;
  }
  
  .profile-avatar {
    width: 40px;
    height: 40px;
  }
  
  .wallet-button-text {
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .wallet-button {
    min-width: 160px;
    padding: 1rem 1.25rem;
  }
  
  .wallet-logo-container {
    width: 36px;
    height: 36px;
  }
  
  .wallet-logo {
    width: 36px;
    height: 36px;
  }
  
  .profile-avatar {
    width: 36px;
    height: 36px;
  }
}

/* Enhanced hover effects for the mint theme */
.wallet-button-primary:hover:not(:disabled) {
  animation: treasure-pulse 2s ease-in-out infinite;
}

.wallet-button-primary:hover:not(:disabled) .wallet-logo.active {
  animation: logo-glow 1s ease-in-out infinite, treasure-spin 3s linear infinite;
}

@keyframes treasure-spin {
  0% {
    transform: rotateY(0deg) scale(1);
  }
  25% {
    transform: rotateY(90deg) scale(1.1);
  }
  50% {
    transform: rotateY(180deg) scale(1);
  }
  75% {
    transform: rotateY(270deg) scale(1.1);
  }
  100% {
    transform: rotateY(360deg) scale(1);
  }
}
</file>

<file path="src/pages/Mint/components/ConnectArweaveAOWalletButton/index.ts">
export { default } from './ConnectArweaveAOWalletButton';
</file>

<file path="src/pages/Mint/components/ConnectEthereumWalletButton/ConnectEthereumWalletButton.css">
/* Ethereum Wallet Button Styles - Mint Page Theme */
.ethereum-wallet-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.ethereum-wallet-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.75rem;
  padding: 1.5rem 2rem;
  border: none;
  border-radius: 16px;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.4s ease;
  text-decoration: none;
  min-width: 220px;
  justify-content: center;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  position: relative;
  overflow: hidden;
}

.ethereum-wallet-button::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(59, 130, 246, 0.1) 0%, 
    rgba(99, 102, 241, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.ethereum-wallet-button:hover::before {
  opacity: 1;
}

.ethereum-wallet-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.ethereum-wallet-button:disabled::before {
  opacity: 0;
}

.ethereum-wallet-button-primary {
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.8) 0%, 
    rgba(30, 41, 59, 0.8) 100%);
  color: rgba(59, 130, 246, 1);
  border: 2px solid rgba(59, 130, 246, 0.3);
  backdrop-filter: blur(16px);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.2);
}

.ethereum-wallet-button-primary:hover:not(:disabled) {
  transform: translateY(-4px);
  border-color: rgba(59, 130, 246, 0.6);
  box-shadow: 0 15px 35px rgba(59, 130, 246, 0.4);
  color: rgba(99, 102, 241, 1);
}

.ethereum-wallet-button-secondary {
  background: rgba(15, 23, 42, 0.6);
  color: rgba(59, 130, 246, 1);
  border: 1px solid rgba(59, 130, 246, 0.2);
  backdrop-filter: blur(10px);
  flex-direction: row;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
}

.ethereum-wallet-button-secondary:hover {
  background: rgba(15, 23, 42, 0.8);
  border-color: rgba(59, 130, 246, 0.4);
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(59, 130, 246, 0.2);
}

.ethereum-wallet-button-icon {
  font-size: 1.2rem;
}

/* Logo Container and Animation */
.ethereum-logo-container {
  position: relative;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 0.5rem;
}

.ethereum-logo {
  width: 48px;
  height: 48px;
  object-fit: contain;
  filter: drop-shadow(0 4px 12px rgba(59, 130, 246, 0.3));
  animation: ethereum-glow 2s ease-in-out infinite;
}

.ethereum-wallet-button-text {
  position: relative;
  z-index: 2;
  font-size: 1rem;
  font-weight: 700;
  text-align: center;
  background: linear-gradient(90deg, 
    rgba(59, 130, 246, 1) 0%, 
    rgba(99, 102, 241, 1) 50%,
    rgba(139, 92, 246, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: ethereum-text-shimmer 3s ease-in-out infinite;
}

/* Connected State */
.ethereum-wallet-connected {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  padding: 1.5rem;
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.8) 0%, 
    rgba(30, 41, 59, 0.8) 100%);
  border-radius: 20px;
  backdrop-filter: blur(16px);
  border: 2px solid rgba(59, 130, 246, 0.3);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.2);
  position: relative;
  overflow: hidden;
}

.ethereum-wallet-connected::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(59, 130, 246, 0.05) 0%, 
    rgba(99, 102, 241, 0.05) 100%);
  opacity: 1;
}

.ethereum-profile-container {
  display: flex;
  align-items: center;
  gap: 1rem;
  position: relative;
  z-index: 2;
}

.ethereum-user-profile {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.ethereum-profile-avatar {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  border: 2px solid rgba(59, 130, 246, 0.4);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  transition: all 0.3s ease;
}

.ethereum-profile-avatar:hover {
  border-color: rgba(59, 130, 246, 0.6);
  transform: scale(1.05);
}

.ethereum-profile-avatar-placeholder {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  border: 2px solid rgba(59, 130, 246, 0.4);
  background: linear-gradient(135deg, 
    rgba(59, 130, 246, 0.1) 0%, 
    rgba(99, 102, 241, 0.1) 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.ethereum-avatar-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.ethereum-profile-info {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.ethereum-profile-name {
  font-weight: 700;
  color: rgba(59, 130, 246, 1);
  font-size: 1rem;
  text-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
}

.ethereum-profile-address {
  font-size: 0.85rem;
  color: rgba(156, 163, 175, 1);
  cursor: pointer;
  transition: all 0.3s ease;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  background: rgba(15, 23, 42, 0.5);
  border: 1px solid rgba(59, 130, 246, 0.1);
}

.ethereum-profile-address:hover {
  color: rgba(99, 102, 241, 1);
  background: rgba(15, 23, 42, 0.8);
  border-color: rgba(59, 130, 246, 0.3);
  transform: translateY(-1px);
}

.ethereum-balance {
  font-size: 0.9rem;
  color: rgba(34, 197, 94, 1);
  font-weight: 600;
  background: rgba(15, 23, 42, 0.5);
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  border: 1px solid rgba(34, 197, 94, 0.2);
}

.ethereum-network {
  font-size: 0.8rem;
  color: rgba(139, 92, 246, 1);
  font-weight: 500;
  background: rgba(15, 23, 42, 0.5);
  padding: 0.2rem 0.4rem;
  border-radius: 4px;
  border: 1px solid rgba(139, 92, 246, 0.2);
  text-align: center;
}

.ethereum-wallet-error {
  color: rgba(239, 68, 68, 1);
  font-size: 0.85rem;
  text-align: center;
  padding: 0.5rem;
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  border-radius: 8px;
  margin-top: 0.5rem;
}

/* Animations */
@keyframes ethereum-glow {
  0%, 100% {
    filter: drop-shadow(0 4px 12px rgba(59, 130, 246, 0.3));
  }
  50% {
    filter: drop-shadow(0 6px 16px rgba(59, 130, 246, 0.5)) brightness(1.1);
  }
}

@keyframes ethereum-text-shimmer {
  0%, 100% {
    background-position: -200% center;
  }
  50% {
    background-position: 200% center;
  }
}

@keyframes ethereum-pulse {
  0%, 100% {
    transform: scale(1);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.2);
  }
  50% {
    transform: scale(1.02);
    box-shadow: 0 12px 35px rgba(59, 130, 246, 0.4);
  }
}

/* Loading state animation */
.ethereum-wallet-button:disabled .ethereum-logo {
  animation: ethereum-loading 1.5s ease-in-out infinite;
}

@keyframes ethereum-loading {
  0%, 100% {
    transform: rotateY(0deg) scale(1);
  }
  50% {
    transform: rotateY(180deg) scale(0.9);
  }
}

/* Responsive design */
@media (max-width: 768px) {
  .ethereum-wallet-button {
    min-width: 200px;
    padding: 1.25rem 1.5rem;
    font-size: 0.9rem;
  }
  
  .ethereum-logo-container {
    width: 40px;
    height: 40px;
  }
  
  .ethereum-logo {
    width: 40px;
    height: 40px;
  }
  
  .ethereum-wallet-connected {
    padding: 1.25rem;
  }
  
  .ethereum-profile-avatar,
  .ethereum-profile-avatar-placeholder {
    width: 40px;
    height: 40px;
  }
  
  .ethereum-avatar-icon {
    width: 20px;
    height: 20px;
  }
  
  .ethereum-wallet-button-text {
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .ethereum-wallet-button {
    min-width: 180px;
    padding: 1rem 1.25rem;
  }
  
  .ethereum-logo-container {
    width: 36px;
    height: 36px;
  }
  
  .ethereum-logo {
    width: 36px;
    height: 36px;
  }
  
  .ethereum-profile-avatar,
  .ethereum-profile-avatar-placeholder {
    width: 36px;
    height: 36px;
  }
  
  .ethereum-avatar-icon {
    width: 18px;
    height: 18px;
  }
}

/* Enhanced hover effects for the mint theme */
.ethereum-wallet-button-primary:hover:not(:disabled) {
  animation: ethereum-pulse 2s ease-in-out infinite;
}

.ethereum-wallet-button-primary:hover:not(:disabled) .ethereum-logo {
  animation: ethereum-glow 1s ease-in-out infinite, ethereum-spin 3s linear infinite;
}

@keyframes ethereum-spin {
  0% {
    transform: rotateY(0deg) scale(1);
  }
  25% {
    transform: rotateY(90deg) scale(1.1);
  }
  50% {
    transform: rotateY(180deg) scale(1);
  }
  75% {
    transform: rotateY(270deg) scale(1.1);
  }
  100% {
    transform: rotateY(360deg) scale(1);
  }
}
</file>

<file path="src/pages/Mint/components/ConnectEthereumWalletButton/index.ts">
export { default } from './ConnectEthereumWalletButton';
</file>

<file path="src/pages/Mint/components/PermawebMatchSection/index.ts">
export { default as PermawebMatchSection } from './PermawebMatchSection';
</file>

<file path="src/pages/Mint/components/PermawebMatchSection/PermawebMatchSection.css">
/* Permaweb Match Section Styles */
.permaweb-match-section {
    display: flex;
    justify-content: center;
    flex: 1;
}

.permaweb-match-card {
    background: linear-gradient(135deg,
            rgba(15, 23, 42, 0.8) 0%,
            rgba(30, 41, 59, 0.8) 100%);
    border: 2px solid rgba(34, 197, 94, 0.3);
    border-radius: 16px;
    padding: 20px;
    backdrop-filter: blur(16px);
    max-width: 300px;
    width: 100%;
    position: relative;
    overflow: hidden;
    transition: all 0.4s ease;
    text-align: center;
}

.permaweb-match-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
}

.permaweb-match-card:hover::before {
    opacity: 1;
}

.permaweb-match-card:hover {
    transform: translateY(-4px);
    border-color: rgba(34, 197, 94, 0.6);
    box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.3);
}

.match-ratio {
    font-size: 4rem;
    font-weight: 900;
    background: linear-gradient(90deg,
            rgba(34, 197, 94, 1) 0%,
            rgba(5, 150, 105, 1) 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: ratio-glow 3s ease-in-out infinite;
    margin-bottom: 8px;
    position: relative;
    z-index: 2;
}

.match-subtitle {
    font-size: 1.2rem;
    font-weight: 700;
    color: rgba(34, 197, 94, 1);
    margin-bottom: 12px;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    position: relative;
    z-index: 2;
}

.match-description {
    color: #9ca3af;
    line-height: 1.5;
    font-size: 0.9rem;
    position: relative;
    z-index: 2;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
    .permaweb-match-card {
        margin: 0 16px;
        padding: 18px;
    }

    .match-ratio {
        font-size: 3rem;
    }

    .match-subtitle {
        font-size: 1rem;
    }

    .match-description {
        font-size: 0.85rem;
    }
}

@media (max-width: 480px) {
    .permaweb-match-card {
        margin: 0 12px;
        padding: 16px;
    }

    .match-ratio {
        font-size: 2.5rem;
    }

    .match-subtitle {
        font-size: 0.9rem;
    }

    .match-description {
        font-size: 0.8rem;
    }
}

/* Animations */
@keyframes ratio-glow {

    0%,
    100% {
        filter: brightness(1);
        transform: scale(1);
    }

    50% {
        filter: brightness(1.2);
        transform: scale(1.05);
    }
}

@keyframes dot-pulse {

    0%,
    100% {
        transform: scale(1);
        opacity: 1;
    }

    50% {
        transform: scale(1.2);
        opacity: 0.8;
    }
}

@keyframes line-flow {
    0% {
        left: -100%;
    }

    100% {
        left: 100%;
    }
}
</file>

<file path="src/pages/Mint/components/PermawebMatchSection/PermawebMatchSection.tsx">
import './PermawebMatchSection.css';

const PermawebMatchSection = () => {
    return (
        <div className="permaweb-match-section">
            <div className="permaweb-match-card">
                <div className="match-ratio">4:1</div>
                <div className="match-subtitle">Match</div>
                <div className="match-description">
                    All investment is matched 4:1 by the permaweb index.
                </div>
            </div>
        </div>
    );
};

export default PermawebMatchSection;
</file>

<file path="src/pages/Mint/components/StakingActions/DAIStakingActions.tsx">
import React, { useState, useEffect } from 'react';
import { useAccount, useWriteContract, useWaitForTransactionReceipt, useReadContract } from 'wagmi';
import { parseEther, formatEther } from 'viem';
import { useAOSDAIStaking, useArweaveAOWallet } from '../../../../shared/contexts';
import { daiStaking, DAI_TOKEN_ADDRESS } from '../../../../utils/AO/DAIStaking';
import { ERC20_ABI } from '../../../../utils/AO/shared/erc20Abi';
import './StakingActions.css';

export const DAIStakingActions: React.FC = () => {
    const { address, isConnected } = useAccount();
    const { address: arweaveAddress } = useArweaveAOWallet();
    const { stakingBalance, refetch } = useAOSDAIStaking();

    const [stakeAmount, setStakeAmount] = useState('');
    const [unstakeAmount, setUnstakeAmount] = useState('');
    const [isStaking, setIsStaking] = useState(false);
    const [isUnstaking, setIsUnstaking] = useState(false);

    // Read DAI balance
    const { data: daiBalance } = useReadContract({
        address: DAI_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'balanceOf',
        args: address ? [address] : undefined,
        query: {
            enabled: !!address && isConnected,
        },
    });

    // Read DAI allowance
    const { data: daiAllowance, refetch: refetchAllowance } = useReadContract({
        address: DAI_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'allowance',
        args: address ? [address, daiStaking.getStakingContractAddress()] : undefined,
        query: {
            enabled: !!address && isConnected,
        },
    });

    // Contract write hooks
    const { writeContract: writeApprove, data: approveHash } = useWriteContract();
    const { writeContract: writeStake, data: stakeHash } = useWriteContract();
    const { writeContract: writeUnstake, data: unstakeHash } = useWriteContract();

    // Transaction receipt hooks
    const { isLoading: isApproveLoading, isSuccess: isApproveSuccess } = useWaitForTransactionReceipt({
        hash: approveHash,
    });

    const { isLoading: isStakeLoading, isSuccess: isStakeSuccess } = useWaitForTransactionReceipt({
        hash: stakeHash,
    });

    const { isLoading: isUnstakeLoading, isSuccess: isUnstakeSuccess } = useWaitForTransactionReceipt({
        hash: unstakeHash,
    });

    // Handle successful transactions
    useEffect(() => {
        if (isApproveSuccess) {
            refetchAllowance();
        }
    }, [isApproveSuccess, refetchAllowance]);

    useEffect(() => {
        if (isStakeSuccess) {
            setStakeAmount('');
            setIsStaking(false);
            refetch();
        }
    }, [isStakeSuccess, refetch]);

    useEffect(() => {
        if (isUnstakeSuccess) {
            setUnstakeAmount('');
            setIsUnstaking(false);
            refetch();
        }
    }, [isUnstakeSuccess, refetch]);

    const handleApprove = async () => {
        if (!stakeAmount || !address) return;

        try {
            const amount = parseEther(stakeAmount);
            writeApprove({
                address: DAI_TOKEN_ADDRESS,
                abi: ERC20_ABI,
                functionName: 'approve',
                args: [daiStaking.getStakingContractAddress(), amount],
            } as any);
        } catch (error) {
            console.error('Approve error:', error);
        }
    };

    const handleStake = async () => {
        if (!stakeAmount || !address || !arweaveAddress) return;

        try {
            setIsStaking(true);
            const stakeConfig = daiStaking.createStakeConfig(0, stakeAmount, arweaveAddress);
            writeStake(stakeConfig as any);
        } catch (error) {
            console.error('Stake error:', error);
            setIsStaking(false);
        }
    };

    const handleUnstake = async () => {
        if (!unstakeAmount || !address || !arweaveAddress) return;

        try {
            setIsUnstaking(true);
            const unstakeConfig = daiStaking.createWithdrawConfig(0, unstakeAmount, arweaveAddress);
            writeUnstake(unstakeConfig as any);
        } catch (error) {
            console.error('Unstake error:', error);
            // Show user-friendly error message
            if (error instanceof Error) {
                alert(`Unstake failed: ${error.message}`);
            } else {
                alert('Unstake failed. Please check your wallet and try again.');
            }
            setIsUnstaking(false);
        }
    };

    if (!isConnected) {
        return (
            <div className="staking-actions-card">
                <div className="staking-actions-header">
                    <img src="/dai-logo.png" alt="DAI" className="staking-actions-icon" />
                    <div className="staking-actions-title">DAI Staking Actions</div>
                </div>
                <div className="staking-actions-content">
                    <div className="staking-actions-status">Connect wallet to stake DAI</div>
                </div>
            </div>
        );
    }

    if (!arweaveAddress) {
        return (
            <div className="staking-actions-card">
                <div className="staking-actions-header">
                    <img src="/dai-logo.png" alt="DAI" className="staking-actions-icon" />
                    <div className="staking-actions-title">DAI Staking Actions</div>
                </div>
                <div className="staking-actions-content">
                    <div className="staking-actions-status">Connect Arweave wallet to stake DAI</div>
                </div>
            </div>
        );
    }

    const needsApproval = stakeAmount && daiAllowance !== undefined &&
        parseEther(stakeAmount) > (daiAllowance as bigint);

    const maxStakeAmount = daiBalance ? formatEther(daiBalance as bigint) : '0';
    const maxUnstakeAmount = stakingBalance.stakedAmount ?
        daiStaking.formatAmount(stakingBalance.stakedAmount) : '0';

    return (
        <div className="staking-actions-card">
            <div className="staking-actions-header">
                <img src="/dai-logo.png" alt="DAI" className="staking-actions-icon" />
                <div className="staking-actions-title">DAI Staking Actions</div>
            </div>
            <div className="staking-actions-content">
                {/* Stake Section */}
                <div className="staking-action-section">
                    <h4 className="staking-action-title">Stake DAI</h4>
                    <div className="staking-input-group">
                        <input
                            type="number"
                            placeholder="Amount to stake"
                            value={stakeAmount}
                            onChange={(e) => setStakeAmount(e.target.value)}
                            className="staking-input"
                            disabled={isStaking || isStakeLoading || isApproveLoading}
                        />
                        <button
                            onClick={() => setStakeAmount(maxStakeAmount)}
                            className="staking-max-btn"
                            disabled={isStaking || isStakeLoading || isApproveLoading}
                        >
                            MAX
                        </button>
                    </div>
                    <div className="staking-balance-info">
                        Available: {maxStakeAmount} DAI
                    </div>

                    {needsApproval ? (
                        <button
                            onClick={handleApprove}
                            disabled={!stakeAmount || isApproveLoading || isStaking}
                            className="staking-action-btn approve-btn"
                        >
                            {isApproveLoading ? 'Approving...' : 'Approve DAI'}
                        </button>
                    ) : (
                        <button
                            onClick={handleStake}
                            disabled={!stakeAmount || isStaking || isStakeLoading || needsApproval}
                            className="staking-action-btn stake-btn"
                        >
                            {isStaking || isStakeLoading ? 'Staking...' : 'Stake DAI'}
                        </button>
                    )}
                </div>

                {/* Unstake Section */}
                <div className="staking-action-section">
                    <h4 className="staking-action-title">Unstake DAI</h4>
                    <div className="staking-input-group">
                        <input
                            type="number"
                            placeholder="Amount to unstake"
                            value={unstakeAmount}
                            onChange={(e) => setUnstakeAmount(e.target.value)}
                            className="staking-input"
                            disabled={isUnstaking || isUnstakeLoading}
                        />
                        <button
                            onClick={() => setUnstakeAmount(maxUnstakeAmount)}
                            className="staking-max-btn"
                            disabled={isUnstaking || isUnstakeLoading}
                        >
                            MAX
                        </button>
                    </div>
                    <div className="staking-balance-info">
                        Staked: {maxUnstakeAmount} DAI
                    </div>

                    <button
                        onClick={handleUnstake}
                        disabled={!unstakeAmount || isUnstaking || isUnstakeLoading}
                        className="staking-action-btn unstake-btn"
                    >
                        {isUnstaking || isUnstakeLoading ? 'Unstaking...' : 'Unstake DAI'}
                    </button>
                </div>
            </div>
        </div>
    );
};
</file>

<file path="src/pages/Mint/components/StakingActions/index.ts">
export { DAIStakingActions } from './DAIStakingActions';
export { ETHStakingActions } from './ETHStakingActions';
</file>

<file path="src/pages/Mint/components/StakingActions/StakingActions.css">
.staking-actions-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 20px;
    margin: 10px 0;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}

.staking-actions-card:hover {
    border-color: rgba(255, 255, 255, 0.2);
    background: rgba(255, 255, 255, 0.08);
}

.staking-actions-header {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    gap: 12px;
}

.staking-actions-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
}

.staking-actions-title {
    font-size: 18px;
    font-weight: 600;
    color: #ffffff;
}

.staking-actions-content {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.staking-actions-status {
    text-align: center;
    color: rgba(255, 255, 255, 0.7);
    padding: 20px;
    font-size: 14px;
}

.staking-action-section {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 8px;
    padding: 16px;
}

.staking-action-title {
    font-size: 16px;
    font-weight: 600;
    color: #ffffff;
    margin: 0 0 16px 0;
}

.staking-input-group {
    display: flex;
    gap: 8px;
    margin-bottom: 8px;
}

.staking-input {
    flex: 1;
    padding: 12px 16px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #ffffff;
    font-size: 14px;
    transition: all 0.3s ease;
}

.staking-input:focus {
    outline: none;
    border-color: #00d4ff;
    background: rgba(255, 255, 255, 0.08);
}

.staking-input:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.staking-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.staking-max-btn {
    padding: 12px 16px;
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 8px;
    color: #00d4ff;
    font-size: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 60px;
}

.staking-max-btn:hover:not(:disabled) {
    background: rgba(0, 212, 255, 0.2);
    border-color: rgba(0, 212, 255, 0.5);
}

.staking-max-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.staking-balance-info {
    font-size: 12px;
    color: rgba(255, 255, 255, 0.6);
    margin-bottom: 12px;
}

.staking-action-btn {
    width: 100%;
    padding: 14px 20px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.staking-action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.approve-btn {
    background: linear-gradient(135deg, #ff6b35, #ff8e53);
    color: #ffffff;
}

.approve-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #ff5722, #ff7043);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
}

.stake-btn {
    background: linear-gradient(135deg, #00d4ff, #00b8e6);
    color: #ffffff;
}

.stake-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #00bfff, #00a6d6);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 212, 255, 0.3);
}

.unstake-btn {
    background: linear-gradient(135deg, #ff4757, #ff6b7a);
    color: #ffffff;
}

.unstake-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #ff3742, #ff5a6a);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 71, 87, 0.3);
}

/* Responsive design */
@media (max-width: 768px) {
    .staking-actions-card {
        padding: 16px;
        margin: 8px 0;
    }

    .staking-actions-content {
        gap: 20px;
    }

    .staking-action-section {
        padding: 12px;
    }

    .staking-input-group {
        flex-direction: column;
        gap: 8px;
    }

    .staking-max-btn {
        min-width: auto;
    }
}

/* Animation for loading states */
@keyframes pulse {
    0% {
        opacity: 1;
    }

    50% {
        opacity: 0.5;
    }

    100% {
        opacity: 1;
    }
}

.staking-action-btn:disabled {
    animation: pulse 2s infinite;
}
</file>

<file path="src/pages/Mint/components/TokenomicsSection/index.ts">
export { default } from './TokenomicsSection';
</file>

<file path="src/pages/Mint/components/UtilityBenefitsSection/index.ts">
export { default } from './UtilityBenefitsSection';
</file>

<file path="src/pages/Mint/components/UtilityBenefitsSection/UtilityBenefitsSection.tsx">
import React from 'react';
import './UtilityBenefitsSection.css';

const UtilityBenefitsSection: React.FC = () => {
    const benefits = [
        'Microtransactions Across Gaming Ecosystem',
        'Game Subscriptions',
        'Governance',
        'Game Sales',
        'Staking',
        'GameFi Accelerator',
        'Game Ambassadors'
    ];

    return (
        <div className="utility-benefits-section">
            <div className="utility-benefits-card">
                <div className="utility-benefits-header">
                    <div className="utility-benefits-icon">
                        <img src="/game-token.png" alt="GAME Token" />
                    </div>
                    <h3 className="utility-benefits-title">Utility & Benefits</h3>
                </div>

                <div className="utility-benefits-content">
                    {benefits.map((benefit, index) => (
                        <div key={index} className="utility-benefit-item">
                            <span className="benefit-icon">✓</span>
                            <span className="benefit-text">{benefit}</span>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default UtilityBenefitsSection;
</file>

<file path="src/pages/Mint/components/WalletBalance/ArweaveWalletBalance.tsx">
import { useArweaveAOWallet } from '../../../../shared/contexts/ArweaveAOWallet';
import './WalletBalance.css';

const ArweaveWalletBalance = () => {
  const { isConnected, arBalance, isLoadingBalance, address } = useArweaveAOWallet();

  if (!isConnected) {
    return null;
  }

  return (
    <div className="wallet-balance-container">
      <div className="wallet-balance-header">
        <span className="wallet-balance-icon">🏴‍☠️</span>
        <span className="wallet-balance-title">Arweave Wallet</span>
      </div>
      <div className="wallet-balance-content">
        <div className="wallet-balance-address">
          {address ? `${address.slice(0, 6)}...${address.slice(-4)}` : 'Connected'}
        </div>
        <div className="wallet-balance-amount">
          {isLoadingBalance ? (
            <span className="wallet-balance-loading">Loading...</span>
          ) : (
            <span className="wallet-balance-value">
              {arBalance !== null ? `${arBalance.toFixed(4)} AR` : 'N/A'}
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default ArweaveWalletBalance;
</file>

<file path="src/pages/Mint/components/WalletBalance/EthereumWalletBalance.tsx">
import { useAppKitAccount, useAccount, useBalance } from '../../../../shared/contexts/EthereumWallet';
import { formatEther } from 'viem';
import './WalletBalance.css';

const EthereumWalletBalance = () => {
  const { isConnected, address } = useAppKitAccount();
  const { address: wagmiAddress } = useAccount();
  const { data: balance } = useBalance({ address: wagmiAddress });

  if (!isConnected) {
    return null;
  }

  const formatBalance = (balance: bigint | undefined) => {
    if (!balance) return 'N/A';
    const formatted = formatEther(balance);
    return `${parseFloat(formatted).toFixed(4)} ETH`;
  };

  return (
    <div className="wallet-balance-container">
      <div className="wallet-balance-header">
        <span className="wallet-balance-icon">⚡</span>
        <span className="wallet-balance-title">Ethereum Wallet</span>
      </div>
      <div className="wallet-balance-content">
        <div className="wallet-balance-address">
          {address ? `${address.slice(0, 6)}...${address.slice(-4)}` : 'Connected'}
        </div>
        <div className="wallet-balance-amount">
          <span className="wallet-balance-value">
            {formatBalance(balance?.value)}
          </span>
        </div>
      </div>
    </div>
  );
};

export default EthereumWalletBalance;
</file>

<file path="src/pages/Mint/components/WalletBalance/EthereumWalletTokenBalance.tsx">
import React from 'react';
import { useEthereumWalletTokens } from '../../../../shared/contexts';
import './WalletBalance.css';

export function EthereumWalletTokenBalance() {
    const { isConnected, eth, dai, steth, isLoading, hasError, refetch } = useEthereumWalletTokens();

    if (!isConnected) {
        return (
            <div className="wallet-balance">
                <div className="wallet-balance-header">
                    <h3>Token Balances</h3>
                </div>
                <div className="wallet-balance-content">
                    <p>Connect Ethereum wallet to view token balances</p>
                </div>
            </div>
        );
    }

    if (isLoading) {
        return (
            <div className="wallet-balance">
                <div className="wallet-balance-header">
                    <h3>Token Balances</h3>
                </div>
                <div className="wallet-balance-content">
                    <p>Loading token balances...</p>
                </div>
            </div>
        );
    }

    if (hasError) {
        return (
            <div className="wallet-balance">
                <div className="wallet-balance-header">
                    <h3>Token Balances</h3>
                    <button onClick={refetch} className="refresh-button">
                        Refresh
                    </button>
                </div>
                <div className="wallet-balance-content">
                    <p className="error">Error loading token balances</p>
                </div>
            </div>
        );
    }

    const formatBalance = (balance: string) => {
        const num = parseFloat(balance);
        if (num === 0) return '0';
        if (num < 0.0001) return '< 0.0001';
        return num.toFixed(4);
    };

    return (
        <div className="wallet-balance">
            <div className="wallet-balance-header">
                <h3>Token Balances</h3>
                <button onClick={refetch} className="refresh-button">
                    Refresh
                </button>
            </div>
            <div className="wallet-balance-content">
                <div className="token-balance-item">
                    <div className="token-info">
                        <span className="token-symbol">{eth.symbol}</span>
                        <span className="token-name">{eth.name}</span>
                    </div>
                    <div className="token-amount">
                        {formatBalance(eth.formatted)}
                    </div>
                </div>

                <div className="token-balance-item">
                    <div className="token-info">
                        <span className="token-symbol">{dai.symbol}</span>
                        <span className="token-name">{dai.name}</span>
                    </div>
                    <div className="token-amount">
                        {formatBalance(dai.formatted)}
                    </div>
                </div>

                <div className="token-balance-item">
                    <div className="token-info">
                        <span className="token-symbol">{steth.symbol}</span>
                        <span className="token-name">{steth.name}</span>
                    </div>
                    <div className="token-amount">
                        {formatBalance(steth.formatted)}
                    </div>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/pages/Mint/components/WalletConnections/index.ts">
export { default as WalletConnections } from './WalletConnections';
</file>

<file path="src/pages/Mint/index.ts">
export { default as Mint } from './Mint';
</file>

<file path="src/pages/Earn/Earn.css">
/* Earn Page Styles - Rewards/Golden Theme */
.earn-page {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.earn-page.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Earn Page Animated Backgrounds - Golden/Rewards Theme */
.earn-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(146, 64, 14, 0.4) 0%, 
    rgba(251, 191, 36, 0.3) 50%, 
    rgba(245, 158, 11, 0.4) 100%);
}

.earn-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 40% 60%, 
    rgba(251, 191, 36, 0.2) 0%, 
    transparent 60%);
}

.earn-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Floating Coin Elements */
.coin-element {
  position: absolute;
  font-size: 2rem;
  opacity: 0.4;
  pointer-events: none;
}

.coin-stack-1 {
  top: 15%;
  left: 12%;
  animation: coin-stack-bounce 5s ease-in-out infinite;
  animation-delay: 0s;
}

.coin-stack-2 {
  bottom: 20%;
  right: 15%;
  animation: coin-stack-bounce 6s ease-in-out infinite;
  animation-delay: 1.5s;
}

.coin-rain-1 {
  top: 5%;
  left: 70%;
  animation: coin-rain 8s linear infinite;
  animation-delay: 2s;
}

.coin-rain-2 {
  top: 10%;
  right: 30%;
  animation: coin-rain 10s linear infinite;
  animation-delay: 4s;
}

.earn-grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(251, 191, 36, 0.02) 1px, transparent 1px),
    linear-gradient(90deg, rgba(251, 191, 36, 0.02) 1px, transparent 1px);
  background-size: 70px 70px;
  opacity: 0.5;
}

/* Earn Page Floating Particles - Coin/Gold Theme */
.earn-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.earn-particle-1 {
  position: absolute;
  top: 25%;
  left: 10%;
  width: 14px;
  height: 14px;
  background: linear-gradient(45deg, rgba(251, 191, 36, 0.9), rgba(245, 158, 11, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 30px rgba(251, 191, 36, 0.8);
  animation: coin-float 3.5s ease-in-out infinite;
}

.earn-particle-2 {
  position: absolute;
  top: 65%;
  right: 25%;
  width: 10px;
  height: 10px;
  background: linear-gradient(45deg, rgba(245, 158, 11, 0.9), rgba(217, 119, 6, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 25px rgba(245, 158, 11, 0.8);
  animation: coin-float 2.8s ease-in-out infinite reverse;
}

.earn-particle-3 {
  position: absolute;
  bottom: 35%;
  left: 80%;
  width: 12px;
  height: 12px;
  background: linear-gradient(45deg, rgba(217, 119, 6, 0.9), rgba(251, 191, 36, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 28px rgba(217, 119, 6, 0.8);
  animation: coin-float 4s ease-in-out infinite;
}

.earn-particle-4 {
  position: absolute;
  top: 40%;
  left: 5%;
  width: 8px;
  height: 8px;
  background: linear-gradient(45deg, rgba(252, 211, 77, 0.9), rgba(251, 191, 36, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 20px rgba(252, 211, 77, 0.8);
  animation: coin-float 3s ease-in-out infinite;
}

.earn-particle-5 {
  position: absolute;
  bottom: 15%;
  right: 70%;
  width: 16px;
  height: 16px;
  background: linear-gradient(45deg, rgba(251, 191, 36, 0.8), rgba(245, 158, 11, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 35px rgba(251, 191, 36, 0.7);
  animation: coin-float 4.2s ease-in-out infinite reverse;
}

.earn-particle-6 {
  position: absolute;
  top: 80%;
  left: 30%;
  width: 6px;
  height: 6px;
  background: linear-gradient(45deg, rgba(245, 158, 11, 0.9), rgba(252, 211, 77, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 18px rgba(245, 158, 11, 0.8);
  animation: coin-float 2.5s ease-in-out infinite;
}

/* Earn Page Geometric Shapes - Treasure/Coin Theme */
.earn-shape-1 {
  position: absolute;
  top: 18%;
  right: 12%;
  width: 42px;
  height: 42px;
  background: linear-gradient(45deg, rgba(251, 191, 36, 0.4), rgba(245, 158, 11, 0.4));
  clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
  animation: golden-glow 4s ease-in-out infinite;
}

.earn-shape-2 {
  position: absolute;
  bottom: 30%;
  left: 8%;
  width: 30px;
  height: 30px;
  border: 2px solid rgba(245, 158, 11, 0.6);
  transform: rotate(45deg);
  animation: pulse 2.8s ease-in-out infinite;
}

.earn-shape-3 {
  position: absolute;
  top: 55%;
  right: 85%;
  width: 22px;
  height: 22px;
  background: linear-gradient(45deg, 
    rgba(251, 191, 36, 0.4), 
    rgba(245, 158, 11, 0.4));
  border-radius: 50%;
  animation: bounce 1.8s infinite;
  animation-delay: 0.3s;
}

.earn-shape-4 {
  position: absolute;
  top: 35%;
  left: 2%;
  width: 26px;
  height: 26px;
  border: 1px solid rgba(252, 211, 77, 0.7);
  clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
  animation: ping 4s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Earn Page Content */
.earn-content {
  position: relative;
  z-index: 10;
  max-width: 1536px;
  margin: 0 auto;
  padding: 0 24px;
}

.earn-title {
  font-size: clamp(3rem, 8vw, 7rem);
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(90deg, 
    rgba(251, 191, 36, 1) 0%, 
    rgba(245, 158, 11, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: golden-glow 3.5s ease-in-out infinite;
  text-align: center;
}

.earn-description {
  font-size: 1.25rem;
  color: #d1d5db;
  max-width: 768px;
  margin: 0 auto 64px;
  line-height: 1.75;
  text-align: center;
}

/* Earn Rewards Grid - Optimized for 3 Cards */
.earn-rewards {
  display: grid;
  grid-template-columns: 1fr;
  gap: 32px;
  margin-bottom: 64px;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding: 0 20px;
}

@media (min-width: 640px) {
  .earn-rewards {
    grid-template-columns: 1fr 1fr;
    gap: 28px;
    padding: 0 24px;
  }
  
  /* Center the third card when in 2-column layout */
  .earn-rewards .earn-reward-card:nth-child(3) {
    grid-column: 1 / -1;
    max-width: 400px;
    margin: 0 auto;
  }
}

@media (min-width: 1024px) {
  .earn-rewards {
    grid-template-columns: repeat(3, 1fr);
    gap: 32px;
    padding: 0 40px;
  }
  
  /* Reset the third card styling for 3-column layout */
  .earn-rewards .earn-reward-card:nth-child(3) {
    grid-column: auto;
    max-width: none;
    margin: 0;
  }
}

@media (min-width: 1280px) {
  .earn-rewards {
    gap: 40px;
    padding: 0;
  }
}

/* Base Card Styles */
.earn-reward-card {
  position: relative;
  padding: 36px 24px;
  backdrop-filter: blur(16px);
  text-align: center;
  transition: all 0.4s ease;
  overflow: hidden;
  cursor: pointer;
  border-radius: 20px;
  min-height: 280px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

/* Card 1 - Stream & Create (Content Theme - Purple) */
.earn-reward-card:nth-child(1) {
  background: linear-gradient(135deg, 
    rgba(147, 51, 234, 0.15) 0%, 
    rgba(139, 92, 246, 0.15) 100%);
  border: 2px solid rgba(147, 51, 234, 0.3);
  transform: rotate(-0.5deg);
}

.earn-reward-card:nth-child(1)::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(147, 51, 234, 0.1) 0%, 
    rgba(139, 92, 246, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
  border-radius: 20px;
}

.earn-reward-card:nth-child(1):hover {
  transform: rotate(0deg) translateY(-8px) scale(1.02);
  border-color: rgba(147, 51, 234, 0.5);
  box-shadow: 0 25px 50px -12px rgba(147, 51, 234, 0.3);
}

.earn-reward-card:nth-child(1):hover::before {
  opacity: 1;
}

/* Card 2 - Affiliate Sales (Business Theme - Green/Emerald) */
.earn-reward-card:nth-child(2) {
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.15) 0%, 
    rgba(16, 185, 129, 0.15) 100%);
  border: 2px solid rgba(34, 197, 94, 0.3);
  transform: rotate(0.5deg);
}

.earn-reward-card:nth-child(2)::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.1) 0%, 
    rgba(16, 185, 129, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
  border-radius: 20px;
}

.earn-reward-card:nth-child(2):hover {
  transform: rotate(0deg) translateY(-8px) scale(1.02);
  border-color: rgba(34, 197, 94, 0.6);
  box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.4);
}

.earn-reward-card:nth-child(2):hover::before {
  opacity: 1;
}

/* Card 3 - ARCAO Ambassador (Premium Theme - Gold/Yellow) */
.earn-reward-card:nth-child(3) {
  background: linear-gradient(135deg, 
    rgba(251, 191, 36, 0.15) 0%, 
    rgba(245, 158, 11, 0.15) 100%);
  border: 2px solid rgba(251, 191, 36, 0.4);
  transform: rotate(-0.3deg);
  position: relative;
}

.earn-reward-card:nth-child(3)::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(251, 191, 36, 0.1) 0%, 
    rgba(245, 158, 11, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
  border-radius: 20px;
}

.earn-reward-card:nth-child(3):hover {
  transform: rotate(0deg) translateY(-10px) scale(1.03);
  border-color: rgba(251, 191, 36, 0.7);
  box-shadow: 0 30px 60px -12px rgba(251, 191, 36, 0.5);
}

.earn-reward-card:nth-child(3):hover::before {
  opacity: 1;
}

/* Clickable Card Styles - Remove generic hover */
.earn-reward-card-clickable {
  cursor: pointer;
}

/* Ambassador Card Hover Effect */
.ambassador-card {
  position: relative;
}

.ambassador-hover-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: linear-gradient(90deg, 
    rgba(251, 191, 36, 1) 0%, 
    rgba(245, 158, 11, 1) 100%);
  color: rgba(15, 23, 42, 1);
  padding: 12px 24px;
  border-radius: 12px;
  font-weight: 700;
  font-size: 1.1rem;
  opacity: 0;
  pointer-events: none;
  transition: all 0.3s ease;
  z-index: 20;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  box-shadow: 0 10px 30px rgba(251, 191, 36, 0.4);
}

.ambassador-card:hover .ambassador-hover-text {
  opacity: 1;
  transform: translate(-50%, -50%) scale(1.05);
}

.ambassador-card:hover .earn-reward-icon,
.ambassador-card:hover .earn-reward-title,
.ambassador-card:hover .earn-reward-amount,
.ambassador-card:hover .earn-reward-description {
  opacity: 0.3;
  transition: opacity 0.3s ease;
}

.earn-reward-icon {
  font-size: 3.5rem;
  margin-bottom: 20px;
  display: block;
  position: relative;
  z-index: 2;
  animation: golden-glow 4s ease-in-out infinite;
}

.earn-reward-title {
  font-size: 1.4rem;
  font-weight: 700;
  margin-bottom: 12px;
  position: relative;
  z-index: 2;
}

/* Card-specific title colors */
.earn-reward-card:nth-child(1) .earn-reward-title {
  color: rgba(147, 51, 234, 1);
}

.earn-reward-card:nth-child(2) .earn-reward-title {
  color: rgba(34, 197, 94, 1);
}

.earn-reward-card:nth-child(3) .earn-reward-title {
  color: rgba(251, 191, 36, 1);
}

.earn-reward-amount {
  font-size: 2rem;
  font-weight: 900;
  color: white;
  margin-bottom: 8px;
  position: relative;
  z-index: 2;
}

.earn-reward-description {
  color: #9ca3af;
  line-height: 1.6;
  position: relative;
  z-index: 2;
  font-size: 0.95rem;
}

/* Ambassador Application Section */
.ambassador-application {
  margin-top: 80px;
  padding: 60px 40px;
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.95) 0%, 
    rgba(30, 41, 59, 0.9) 50%,
    rgba(51, 65, 85, 0.95) 100%);
  border: 2px solid rgba(251, 191, 36, 0.3);
  border-radius: 24px;
  backdrop-filter: blur(20px);
  text-align: center;
  position: relative;
  overflow: hidden;
  box-shadow: 
    0 0 40px rgba(0, 0, 0, 0.3),
    0 0 80px rgba(251, 191, 36, 0.1),
    inset 0 1px 0 rgba(148, 163, 184, 0.1);
}

.ambassador-application::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.8) 0%, 
    rgba(30, 41, 59, 0.6) 50%,
    rgba(51, 65, 85, 0.8) 100%);
  opacity: 1;
  border-radius: 24px;
}

.ambassador-application::after {
  content: '';
  position: absolute;
  inset: -1px;
  background: linear-gradient(45deg, 
    rgba(251, 191, 36, 0.2), 
    rgba(148, 163, 184, 0.1), 
    rgba(251, 191, 36, 0.2));
  border-radius: 24px;
  z-index: -1;
  opacity: 0.8;
  animation: golden-border-glow 6s ease-in-out infinite;
}

.ambassador-section-title {
  font-size: 2.5rem;
  font-weight: 900;
  margin-bottom: 20px;
  background: linear-gradient(90deg, 
    rgba(251, 191, 36, 1) 0%, 
    rgba(245, 158, 11, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  position: relative;
  z-index: 2;
}

.ambassador-section-description {
  font-size: 1.2rem;
  color: #d1d5db;
  margin-bottom: 40px;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  line-height: 1.6;
  position: relative;
  z-index: 2;
}

.ambassador-form-container {
  position: relative;
  z-index: 2;
  max-width: 1600px;
  width: 95%;
  margin: 0 auto;
  min-height: 1200px;
  padding: 0 20px;
}

@media (min-width: 768px) {
  .ambassador-form-container {
    width: 90%;
    padding: 0 40px;
  }
}

@media (min-width: 1024px) {
  .ambassador-form-container {
    width: 85%;
    padding: 0 60px;
  }
}

@media (min-width: 1440px) {
  .ambassador-form-container {
    width: 80%;
    max-width: 1800px;
  }
}

.ambassador-form-container iframe {
  border-radius: 8px;
  background: transparent !important;
  /* Prevent inheritance */
  * {
    all: revert;
  }
  background: transparent;
}

@media (max-width: 768px) {
  .ambassador-application {
    margin-top: 60px;
    padding: 40px 24px;
  }
  
  .ambassador-section-title {
    font-size: 2rem;
  }
  
  .ambassador-section-description {
    font-size: 1rem;
  }
  
  .ambassador-form-placeholder {
    padding: 40px 24px;
  }
}

/* Animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes golden-glow {
  0%, 100% {
    opacity: 1;
    filter: brightness(1) drop-shadow(0 0 10px rgba(251, 191, 36, 0.3));
  }
  50% {
    opacity: 0.85;
    filter: brightness(1.3) drop-shadow(0 0 20px rgba(251, 191, 36, 0.5));
  }
}

@keyframes coin-float {
  0%, 100% {
    transform: translateY(0px) rotate(0deg) scale(1);
  }
  25% {
    transform: translateY(-12px) rotate(90deg) scale(1.1);
  }
  50% {
    transform: translateY(-20px) rotate(180deg) scale(1);
  }
  75% {
    transform: translateY(-8px) rotate(270deg) scale(1.05);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.15);
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Coin Animation Keyframes */
@keyframes coin-stack-bounce {
  0%, 100% {
    transform: translateY(0px) scale(1);
  }
  50% {
    transform: translateY(-15px) scale(1.1);
  }
}

@keyframes coin-rain {
  0% {
    transform: translateY(-20px) translateX(0px) rotate(0deg);
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    transform: translateY(100vh) translateX(50px) rotate(360deg);
    opacity: 0;
  }
}

@keyframes golden-border-glow {
  0%, 100% {
    opacity: 0.6;
    filter: brightness(1) blur(0px);
  }
  50% {
    opacity: 0.8;
    filter: brightness(1.2) blur(1px);
  }
}
</file>

<file path="src/pages/Home/Home.css">
/* Gaming Home Page Styles */

.gaming-home {
  background: 
    /* Smooth section transitions with gradients */
    linear-gradient(180deg,
      /* Play section - Purple/Pink theme */
      rgba(168, 85, 247, 0.15) 0%,
      rgba(168, 85, 247, 0.1) 20%,
      rgba(168, 85, 247, 0.05) 25%,
      
      /* Earn section - Golden/Yellow theme */
      rgba(251, 191, 36, 0.05) 30%,
      rgba(251, 191, 36, 0.1) 40%,
      rgba(251, 191, 36, 0.05) 50%,
      
      /* Create section - Blue/Cyan theme */
      rgba(59, 130, 246, 0.05) 55%,
      rgba(59, 130, 246, 0.1) 65%,
      rgba(59, 130, 246, 0.05) 75%,
      
      /* Mint section - Green/Emerald theme */
      rgba(34, 197, 94, 0.05) 80%,
      rgba(34, 197, 94, 0.1) 90%,
      rgba(34, 197, 94, 0.05) 100%
    ),
    /* Base dark background */
    linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.95) 100%);
  background-attachment: fixed;
  color: var(--text-gaming);
  position: relative;
  overflow-x: hidden;
}

.gaming-home::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: 
    linear-gradient(rgba(255, 255, 255, 0.01) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.01) 1px, transparent 1px);
  background-size: 100px 100px;
  opacity: 0.3;
  pointer-events: none;
  z-index: 1;
}

.gaming-home > * {
  position: relative;
  z-index: 2;
}

/* Hero Section */
.hero-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.hero-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Animated Backgrounds */
.hero-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(168, 85, 247, 0.3) 0%, 
    rgba(59, 130, 246, 0.2) 50%, 
    rgba(6, 182, 212, 0.3) 100%);
}

.hero-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 50% 50%, 
    rgba(120, 119, 198, 0.15) 0%, 
    transparent 70%);
}

.hero-bg-layer-3 {
  position: absolute;
  inset: 0;
  background: conic-gradient(from 0deg at 50% 50%, 
    rgba(168, 85, 247, 0.1) 0deg,
    rgba(59, 130, 246, 0.1) 120deg,
    rgba(34, 197, 94, 0.1) 240deg,
    rgba(168, 85, 247, 0.1) 360deg);
  animation: spin 20s linear infinite;
}

.grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(255, 255, 255, 0.02) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.02) 1px, transparent 1px);
  background-size: 50px 50px;
  opacity: 0.3;
}

/* Floating Particles */
.floating-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.particle {
  position: absolute;
  border-radius: 50%;
}

.particle-1 {
  top: 25%;
  left: 25%;
  width: 12px;
  height: 12px;
  background-color: var(--gaming-purple);
  box-shadow: 0 0 20px rgba(168, 85, 247, 0.5);
  animation: pulse 2s ease-in-out infinite;
}

.particle-2 {
  top: 75%;
  right: 25%;
  width: 8px;
  height: 8px;
  background-color: var(--gaming-cyan);
  box-shadow: 0 0 16px rgba(6, 182, 212, 0.5);
  animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
}

.particle-3 {
  top: 50%;
  left: 75%;
  width: 10px;
  height: 10px;
  background-color: var(--gaming-pink);
  box-shadow: 0 0 18px rgba(236, 72, 153, 0.5);
  animation: pulse 2s ease-in-out infinite;
}

.particle-4 {
  top: 33%;
  right: 33%;
  width: 6px;
  height: 6px;
  background-color: var(--gaming-yellow);
  box-shadow: 0 0 14px rgba(251, 191, 36, 0.5);
  animation: bounce 1s infinite;
}

.particle-5 {
  bottom: 25%;
  left: 33%;
  width: 8px;
  height: 8px;
  background-color: var(--gaming-emerald);
  box-shadow: 0 0 16px rgba(5, 150, 105, 0.5);
  animation: pulse 2s ease-in-out infinite;
}

/* Geometric Shapes */
.geometric-shape-1 {
  position: absolute;
  top: 20%;
  right: 20%;
  width: 32px;
  height: 32px;
  border: 1px solid rgba(168, 85, 247, 0.3);
  transform: rotate(45deg);
  animation: spin 8s linear infinite;
}

.geometric-shape-2 {
  position: absolute;
  bottom: 33%;
  left: 20%;
  width: 24px;
  height: 24px;
  border: 1px solid rgba(6, 182, 212, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

.geometric-shape-3 {
  position: absolute;
  top: 66%;
  right: 66%;
  width: 16px;
  height: 16px;
  background: linear-gradient(45deg, 
    rgba(236, 72, 153, 0.2), 
    rgba(168, 85, 247, 0.2));
  transform: rotate(12deg);
  animation: bounce 1s infinite;
  animation-delay: 1s;
}

/* Hero Content */
.hero-content {
  position: relative;
  z-index: 10;
  text-align: center;
  max-width: 1152px;
  margin: 0 auto;
  padding: 0 24px;
}

.hero-title {
  font-size: clamp(3rem, 8vw, 6rem);
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(90deg, 
    var(--gaming-purple) 0%, 
    var(--gaming-pink) 50%, 
    var(--gaming-cyan) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: pulse 3s ease-in-out infinite;
}

.hero-subtitle {
  font-size: clamp(1.25rem, 3vw, 1.5rem);
  color: #d1d5db;
  margin-bottom: 16px;
  font-weight: 300;
}

.hero-description {
  font-size: 1.125rem;
  color: #9ca3af;
  max-width: 768px;
  margin: 0 auto 48px;
  line-height: 1.75;
}

/* Buttons */
.hero-buttons {
  display: flex;
  flex-direction: column;
  gap: 24px;
  justify-content: center;
  align-items: center;
  margin-bottom: 64px;
}

@media (min-width: 640px) {
  .hero-buttons {
    flex-direction: row;
  }
}

.btn-primary {
  position: relative;
  padding: 16px 48px;
  background: linear-gradient(90deg, 
    var(--gaming-purple) 0%, 
    var(--gaming-pink) 50%, 
    var(--gaming-purple) 100%);
  border: 1px solid rgba(168, 85, 247, 0.2);
  border-radius: 16px;
  font-weight: 700;
  font-size: 1.125rem;
  color: var(--text-gaming);
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);
  overflow: hidden;
}

.btn-primary:hover {
  transform: scale(1.1);
  box-shadow: 0 25px 50px -12px rgba(168, 85, 247, 0.4);
}

.btn-primary::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(90deg, 
    var(--gaming-purple) 0%, 
    var(--gaming-pink) 50%, 
    var(--gaming-purple) 100%);
  border-radius: 16px;
  filter: blur(40px);
  opacity: 0;
  transition: opacity 0.5s ease;
}

.btn-primary:hover::before {
  opacity: 0.6;
}

.btn-primary::after {
  content: '';
  position: absolute;
  inset: 0;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.btn-primary:hover::after {
  opacity: 1;
}

.btn-secondary {
  position: relative;
  padding: 16px 48px;
  border: 2px solid rgba(156, 163, 175, 0.5);
  border-radius: 16px;
  font-weight: 700;
  font-size: 1.125rem;
  color: var(--text-gaming);
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(8px);
  cursor: pointer;
  transition: all 0.3s ease;
  overflow: hidden;
}

.btn-secondary:hover {
  transform: scale(1.1);
  border-color: rgba(6, 182, 212, 0.8);
  color: var(--gaming-cyan);
  box-shadow: 0 8px 25px -8px rgba(6, 182, 212, 0.3);
}

.btn-secondary::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(90deg, 
    rgba(6, 182, 212, 0.1), 
    rgba(59, 130, 246, 0.1));
  border-radius: 16px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.btn-secondary:hover::before {
  opacity: 1;
}

.btn-content {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  gap: 12px;
}

.btn-icon {
  font-size: 1.25rem;
}

.btn-text {
  letter-spacing: 0.05em;
}

/* Stats Section */
.hero-stats {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 32px;
  max-width: 512px;
  margin: 0 auto;
}

.stat-item {
  text-align: center;
}

.stat-number {
  font-size: 1.875rem;
  font-weight: 700;
  margin-bottom: 4px;
}

.stat-number.purple {
  color: var(--gaming-purple);
}

.stat-number.cyan {
  color: var(--gaming-cyan);
}

.stat-number.pink {
  color: var(--gaming-pink);
}

.stat-label {
  font-size: 0.875rem;
  color: #9ca3af;
  text-transform: uppercase;
  letter-spacing: 0.1em;
}

/* Section Styles */
.section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

.section-create {
  background: linear-gradient(135deg, 
    rgba(30, 58, 138, 0.3) 0%, 
    rgba(6, 182, 212, 0.3) 100%);
}

.section-mint {
  background: linear-gradient(135deg, 
    rgba(5, 46, 22, 0.3) 0%, 
    rgba(5, 150, 105, 0.3) 100%);
}

/* Animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}
</file>

<file path="src/pages/Home/sections/Create/CreateSection.css">
/* Create Section Styles */
.create-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.create-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Create Section Animated Backgrounds */
.create-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(30, 58, 138, 0.4) 0%, 
    rgba(59, 130, 246, 0.3) 50%, 
    rgba(6, 182, 212, 0.4) 100%);
}

.create-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 30% 70%, 
    rgba(59, 130, 246, 0.2) 0%, 
    transparent 60%);
}

.create-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Creative Building Elements */
.building-element {
  position: absolute;
  font-size: 1.5rem;
  opacity: 0.4;
  pointer-events: none;
}

.building-block-1 {
  top: 15%;
  left: 10%;
  animation: build-up 8s ease-in-out infinite;
  animation-delay: 0s;
}

.building-block-2 {
  top: 25%;
  right: 15%;
  animation: build-sideways 10s ease-in-out infinite;
  animation-delay: 1s;
}

.building-block-3 {
  bottom: 30%;
  left: 20%;
  animation: build-rotate 12s ease-in-out infinite;
  animation-delay: 2s;
}

.building-tool-1 {
  top: 60%;
  right: 25%;
  animation: tool-work 6s ease-in-out infinite;
  animation-delay: 0.5s;
}

.building-tool-2 {
  bottom: 20%;
  right: 10%;
  animation: tool-craft 9s ease-in-out infinite;
  animation-delay: 1.5s;
}

.create-grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(59, 130, 246, 0.03) 1px, transparent 1px),
    linear-gradient(90deg, rgba(59, 130, 246, 0.03) 1px, transparent 1px);
  background-size: 60px 60px;
  opacity: 0.4;
}

/* Create Section Floating Particles */
.create-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.create-particle-1 {
  position: absolute;
  top: 20%;
  left: 15%;
  width: 10px;
  height: 10px;
  background-color: rgba(59, 130, 246, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 20px rgba(59, 130, 246, 0.6);
  animation: float 3s ease-in-out infinite;
}

.create-particle-2 {
  position: absolute;
  top: 60%;
  right: 20%;
  width: 8px;
  height: 8px;
  background-color: rgba(6, 182, 212, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 16px rgba(6, 182, 212, 0.6);
  animation: float 2.5s ease-in-out infinite reverse;
}

.create-particle-3 {
  position: absolute;
  bottom: 30%;
  left: 70%;
  width: 12px;
  height: 12px;
  background-color: rgba(30, 58, 138, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 18px rgba(30, 58, 138, 0.6);
  animation: float 3.5s ease-in-out infinite;
}

.create-particle-4 {
  position: absolute;
  top: 40%;
  left: 80%;
  width: 6px;
  height: 6px;
  background-color: rgba(147, 197, 253, 0.9);
  border-radius: 50%;
  box-shadow: 0 0 12px rgba(147, 197, 253, 0.7);
  animation: float 2s ease-in-out infinite;
}

.create-particle-5 {
  position: absolute;
  bottom: 60%;
  right: 10%;
  width: 9px;
  height: 9px;
  background-color: rgba(34, 211, 238, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 15px rgba(34, 211, 238, 0.6);
  animation: float 4s ease-in-out infinite reverse;
}

/* Create Section Geometric Shapes */
.create-shape-1 {
  position: absolute;
  top: 15%;
  right: 15%;
  width: 40px;
  height: 40px;
  background: linear-gradient(45deg, rgba(59, 130, 246, 0.3), rgba(6, 182, 212, 0.3));
  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
  animation: build-up 6s ease-in-out infinite;
}

.create-shape-2 {
  position: absolute;
  bottom: 20%;
  left: 10%;
  width: 28px;
  height: 28px;
  border: 2px solid rgba(6, 182, 212, 0.4);
  border-radius: 50%;
  animation: pulse 2.5s ease-in-out infinite;
}

.create-shape-3 {
  position: absolute;
  top: 70%;
  right: 70%;
  width: 20px;
  height: 20px;
  background: linear-gradient(45deg, 
    rgba(59, 130, 246, 0.3), 
    rgba(6, 182, 212, 0.3));
  transform: rotate(30deg);
  animation: bounce 1.5s infinite;
  animation-delay: 0.5s;
}

.create-shape-4 {
  position: absolute;
  top: 25%;
  left: 5%;
  width: 16px;
  height: 16px;
  border: 1px solid rgba(147, 197, 253, 0.5);
  border-radius: 50%;
  animation: ping 2s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Create Section Content */
.create-content {
  position: relative;
  z-index: 10;
  max-width: 1536px;
  margin: 0 auto;
  padding: 0 24px;
}

.create-title {
  font-size: clamp(3rem, 8vw, 7rem);
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(90deg, 
    rgba(59, 130, 246, 1) 0%, 
    rgba(6, 182, 212, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: pulse 3s ease-in-out infinite;
  text-align: center;
}

.create-description {
  font-size: 1.25rem;
  color: #d1d5db;
  max-width: 768px;
  margin: 0 auto 64px;
  line-height: 1.75;
  text-align: center;
}

/* Create Feature Cards */
.create-features {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 32px;
}

.create-feature-card {
  position: relative;
  padding: 32px;
  background: rgba(15, 23, 42, 0.6);
  border: 1px solid rgba(59, 130, 246, 0.2);
  border-radius: 24px;
  backdrop-filter: blur(16px);
  transition: all 0.4s ease;
  overflow: hidden;
}

.create-feature-card::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(59, 130, 246, 0.1) 0%, 
    rgba(6, 182, 212, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.create-feature-card:hover::before {
  opacity: 1;
}

.create-feature-card:hover {
  transform: translateY(-8px) scale(1.02);
  border-color: rgba(59, 130, 246, 0.5);
  box-shadow: 0 25px 50px -12px rgba(59, 130, 246, 0.3);
}

.create-feature-icon {
  font-size: 3rem;
  margin-bottom: 24px;
  display: block;
  position: relative;
  z-index: 2;
}

.create-feature-title {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 16px;
  color: rgba(59, 130, 246, 1);
  position: relative;
  z-index: 2;
}

.create-feature-card:nth-child(2) .create-feature-title {
  color: rgba(6, 182, 212, 1);
}

.create-feature-description {
  color: #9ca3af;
  line-height: 1.6;
  position: relative;
  z-index: 2;
}

/* Reality Protocol Link Styling - Seamless integration */
.reality-link {
  color: inherit;
  text-decoration: none;
  background: linear-gradient(90deg, 
    rgba(59, 130, 246, 0.8) 0%, 
    rgba(6, 182, 212, 0.8) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 600;
  transition: all 0.3s ease;
  cursor: pointer;
}

.reality-link:hover {
  background: linear-gradient(90deg, 
    rgba(59, 130, 246, 1) 0%, 
    rgba(6, 182, 212, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  filter: brightness(1.2);
}

/* Animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-20px);
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Building Animation Keyframes */
@keyframes build-up {
  0%, 100% {
    transform: translateY(0px) scale(1);
  }
  25% {
    transform: translateY(-15px) scale(1.1);
  }
  50% {
    transform: translateY(-30px) scale(1.2);
  }
  75% {
    transform: translateY(-15px) scale(1.1);
  }
}

@keyframes build-sideways {
  0%, 100% {
    transform: translateX(0px) rotate(0deg);
  }
  33% {
    transform: translateX(20px) rotate(15deg);
  }
  66% {
    transform: translateX(-10px) rotate(-10deg);
  }
}

@keyframes build-rotate {
  0%, 100% {
    transform: rotate(0deg) scale(1);
  }
  50% {
    transform: rotate(180deg) scale(1.3);
  }
}

@keyframes tool-work {
  0%, 100% {
    transform: rotate(0deg) translateY(0px);
  }
  25% {
    transform: rotate(-15deg) translateY(-5px);
  }
  50% {
    transform: rotate(15deg) translateY(-10px);
  }
  75% {
    transform: rotate(-10deg) translateY(-5px);
  }
}

@keyframes tool-craft {
  0%, 100% {
    transform: scale(1) rotate(0deg);
  }
  20% {
    transform: scale(1.2) rotate(45deg);
  }
  40% {
    transform: scale(0.9) rotate(90deg);
  }
  60% {
    transform: scale(1.1) rotate(135deg);
  }
  80% {
    transform: scale(1.05) rotate(180deg);
  }
}
</file>

<file path="src/pages/Home/sections/Create/CreateSection.tsx">
import { forwardRef } from 'react';
import { CoinFlowAnimation } from './components';
import './CreateSection.css';

interface CreateSectionProps {
  className?: string;
}

const CreateSection = forwardRef<HTMLElement, CreateSectionProps>(
  ({ className = '' }, ref) => {
    return (
      <section 
        ref={ref}
        id="create" 
        className={`create-section ${className}`}
      >
        {/* Animated background layers */}
        <div className="create-bg-layer-1"></div>
        <div className="create-bg-layer-2"></div>
        <div className="create-bg-layer-3"></div>
        
        {/* Grid overlay */}
        <div className="create-grid-overlay"></div>
        
        {/* Building Elements */}
        <div className="building-element building-block-1">🧱</div>
        <div className="building-element building-block-2">🏗️</div>
        <div className="building-element building-block-3">⚙️</div>
        <div className="building-element building-tool-1">🔧</div>
        <div className="building-element building-tool-2">🔨</div>

        {/* Floating particles */}
        <div className="create-particles">
          <div className="create-particle-1"></div>
          <div className="create-particle-2"></div>
          <div className="create-particle-3"></div>
          <div className="create-particle-4"></div>
          <div className="create-particle-5"></div>
          
          {/* Geometric shapes */}
          <div className="create-shape-1"></div>
          <div className="create-shape-2"></div>
          <div className="create-shape-3"></div>
          <div className="create-shape-4"></div>
        </div>

        <div className="create-content">
          <h2 className="create-title">CREATE</h2>
          
          {/* Coin Flow Animation */}
          <CoinFlowAnimation />
          <p className="create-description">
            Build immersive worlds, design unique characters, and craft legendary items 
            with our powerful creation tools powered by cutting-edge technology.
          </p>

          <div className="create-features">
            <div className="create-feature-card">
              <span className="create-feature-icon">🌍</span>
              <h3 className="create-feature-title">Build Worlds</h3>
              <p className="create-feature-description">
                Create stunning environments with our intuitive drag-and-drop world builder. 
                Design landscapes, cities, and dungeons with unlimited creativity using <a href="https://github.com/elliotsayes/Reality" target="_blank" rel="noopener noreferrer" className="reality-link">Reality Protocol</a>.
              </p>
            </div>
            
            <div className="create-feature-card">
              <span className="create-feature-icon">🎨</span>
              <h3 className="create-feature-title">Design Characters</h3>
              <p className="create-feature-description">
                Design unique avatars and NPCs with advanced customization options. 
                Bring your characters to life with detailed appearance and personality traits.
              </p>
            </div>
            
            <div className="create-feature-card">
              <span className="create-feature-icon">💎</span>
              <h3 className="create-feature-title">Craft Rare Items</h3>
              <p className="create-feature-description">
                Craft powerful weapons, armor, and magical items with unique properties. 
                Balance stats and create legendary equipment for epic adventures.
              </p>
            </div>
          </div>
        </div>
      </section>
    );
  }
);

CreateSection.displayName = 'CreateSection';

export default CreateSection;
</file>

<file path="src/pages/Home/sections/Own/components/OwnCoinFlowAnimation.css">
/* Own Section Magnetic Animation - Central square attracts green circles from all sides */
.own-magnetic-animation {
  position: relative;
  width: clamp(200px, 50vw, 300px);
  height: clamp(200px, 50vw, 300px);
  pointer-events: none;
  z-index: 1;
  margin: clamp(15px, 4vw, 20px) auto;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Central purple-blue square that acts as a magnet */
.own-central-magnet {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: clamp(60px, 15vw, 90px);
  height: clamp(60px, 15vw, 90px);
  border-radius: clamp(8px, 2vw, 12px);
  background: linear-gradient(135deg, #8e44ad, #3498db);
  border: clamp(3px, 1vw, 4px) solid #fff;
  box-shadow: 
    0 0 clamp(30px, 8vw, 40px) rgba(142, 68, 173, 0.8),
    inset 0 0 clamp(20px, 6vw, 30px) rgba(255, 255, 255, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: ownMagnetPulse 2s ease-in-out infinite;
  z-index: 5;
}

.own-magnet-logo {
  width: clamp(36px, 9vw, 55px);
  height: clamp(36px, 9vw, 55px);
  object-fit: contain;
  filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.4));
}

/* Green circles that are attracted to the center */
.own-attracted-token {
  position: absolute;
  z-index: 3;
}

.own-green-circle {
  width: clamp(20px, 5vw, 28px);
  height: clamp(20px, 5vw, 28px);
  border-radius: 50%;
  background: linear-gradient(135deg, #27ae60, #2ecc71);
  border: clamp(1px, 0.5vw, 2px) solid #fff;
  box-shadow: 0 0 clamp(10px, 3vw, 15px) rgba(39, 174, 96, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
}

.own-circle-logo {
  width: clamp(12px, 3vw, 16px);
  height: clamp(12px, 3vw, 16px);
  object-fit: contain;
}

/* Top side tokens */
.own-token-top-1 {
  top: 10px;
  left: 40%;
  animation: ownAttractFromTop1 3.5s ease-in-out infinite;
}

.own-token-top-2 {
  top: 20px;
  left: 60%;
  animation: ownAttractFromTop2 3.5s ease-in-out infinite 1.2s;
}

/* Right side tokens */
.own-token-right-1 {
  top: 40%;
  right: 10px;
  animation: ownAttractFromRight1 3.5s ease-in-out infinite 0.8s;
}

.own-token-right-2 {
  top: 60%;
  right: 20px;
  animation: ownAttractFromRight2 3.5s ease-in-out infinite 2.1s;
}

/* Bottom side tokens */
.own-token-bottom-1 {
  bottom: 10px;
  left: 45%;
  animation: ownAttractFromBottom1 3.5s ease-in-out infinite 1.5s;
}

.own-token-bottom-2 {
  bottom: 20px;
  left: 55%;
  animation: ownAttractFromBottom2 3.5s ease-in-out infinite 0.4s;
}

/* Left side tokens */
.own-token-left-1 {
  top: 35%;
  left: 10px;
  animation: ownAttractFromLeft1 3.5s ease-in-out infinite 1.8s;
}

.own-token-left-2 {
  top: 65%;
  left: 20px;
  animation: ownAttractFromLeft2 3.5s ease-in-out infinite 0.6s;
}

/* Keyframe Animations */
@keyframes ownMagnetPulse {
  0%, 100% { 
    transform: translate(-50%, -50%) scale(1); 
    box-shadow: 0 0 40px rgba(142, 68, 173, 0.8), inset 0 0 30px rgba(255, 255, 255, 0.3);
  }
  50% { 
    transform: translate(-50%, -50%) scale(1.1); 
    box-shadow: 0 0 60px rgba(142, 68, 173, 1), inset 0 0 40px rgba(255, 255, 255, 0.4);
  }
}

/* Attraction animations from top */
@keyframes ownAttractFromTop1 {
  0% { 
    transform: translateY(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateY(40px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateY(80px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateY(120px) scale(0.3); 
    opacity: 0.2; 
  }
}

@keyframes ownAttractFromTop2 {
  0% { 
    transform: translateY(0) translateX(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateY(35px) translateX(-20px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateY(70px) translateX(-40px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateY(105px) translateX(-60px) scale(0.3); 
    opacity: 0.2; 
  }
}

/* Attraction animations from right */
@keyframes ownAttractFromRight1 {
  0% { 
    transform: translateX(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateX(-40px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateX(-80px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateX(-120px) scale(0.3); 
    opacity: 0.2; 
  }
}

@keyframes ownAttractFromRight2 {
  0% { 
    transform: translateX(0) translateY(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateX(-35px) translateY(-20px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateX(-70px) translateY(-40px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateX(-105px) translateY(-60px) scale(0.3); 
    opacity: 0.2; 
  }
}

/* Attraction animations from bottom */
@keyframes ownAttractFromBottom1 {
  0% { 
    transform: translateY(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateY(-40px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateY(-80px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateY(-120px) scale(0.3); 
    opacity: 0.2; 
  }
}

@keyframes ownAttractFromBottom2 {
  0% { 
    transform: translateY(0) translateX(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateY(-35px) translateX(-15px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateY(-70px) translateX(-30px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateY(-105px) translateX(-45px) scale(0.3); 
    opacity: 0.2; 
  }
}

/* Attraction animations from left */
@keyframes ownAttractFromLeft1 {
  0% { 
    transform: translateX(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateX(40px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateX(80px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateX(120px) scale(0.3); 
    opacity: 0.2; 
  }
}

@keyframes ownAttractFromLeft2 {
  0% { 
    transform: translateX(0) translateY(0) scale(0.6); 
    opacity: 0.4; 
  }
  30% { 
    transform: translateX(35px) translateY(-25px) scale(1); 
    opacity: 1; 
  }
  70% { 
    transform: translateX(70px) translateY(-50px) scale(1.1); 
    opacity: 1; 
  }
  100% { 
    transform: translateX(105px) translateY(-75px) scale(0.3); 
    opacity: 0.2; 
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .own-magnetic-animation {
    margin: 15px auto;
  }
  
  /* Reduce animation intensity on tablets */
  .own-central-magnet {
    box-shadow: 
      0 0 clamp(25px, 6vw, 35px) rgba(142, 68, 173, 0.7),
      inset 0 0 clamp(15px, 4vw, 25px) rgba(255, 255, 255, 0.3);
  }
}

@media (max-width: 480px) {
  .own-magnetic-animation {
    margin: 10px auto;
  }
  
  /* Reduce animation intensity on mobile */
  .own-central-magnet {
    box-shadow: 
      0 0 clamp(20px, 5vw, 30px) rgba(142, 68, 173, 0.6),
      inset 0 0 clamp(12px, 3vw, 20px) rgba(255, 255, 255, 0.3);
  }
  
  .own-green-circle {
    box-shadow: 0 0 clamp(8px, 2vw, 12px) rgba(39, 174, 96, 0.6);
  }
  
  /* Adjust animation distances for smaller screens */
  @keyframes ownAttractFromTop1 {
    0% { 
      transform: translateY(0) scale(0.6); 
      opacity: 0.4; 
    }
    30% { 
      transform: translateY(clamp(25px, 6vw, 30px)) scale(1); 
      opacity: 1; 
    }
    70% { 
      transform: translateY(clamp(50px, 12vw, 60px)) scale(1.1); 
      opacity: 1; 
    }
    100% { 
      transform: translateY(clamp(75px, 18vw, 90px)) scale(0.3); 
      opacity: 0.2; 
    }
  }
  
  @keyframes ownAttractFromRight1 {
    0% { 
      transform: translateX(0) scale(0.6); 
      opacity: 0.4; 
    }
    30% { 
      transform: translateX(clamp(-25px, -6vw, -30px)) scale(1); 
      opacity: 1; 
    }
    70% { 
      transform: translateX(clamp(-50px, -12vw, -60px)) scale(1.1); 
      opacity: 1; 
    }
    100% { 
      transform: translateX(clamp(-75px, -18vw, -90px)) scale(0.3); 
      opacity: 0.2; 
    }
  }
  
  @keyframes ownAttractFromBottom1 {
    0% { 
      transform: translateY(0) scale(0.6); 
      opacity: 0.4; 
    }
    30% { 
      transform: translateY(clamp(-25px, -6vw, -30px)) scale(1); 
      opacity: 1; 
    }
    70% { 
      transform: translateY(clamp(-50px, -12vw, -60px)) scale(1.1); 
      opacity: 1; 
    }
    100% { 
      transform: translateY(clamp(-75px, -18vw, -90px)) scale(0.3); 
      opacity: 0.2; 
    }
  }
  
  @keyframes ownAttractFromLeft1 {
    0% { 
      transform: translateX(0) scale(0.6); 
      opacity: 0.4; 
    }
    30% { 
      transform: translateX(clamp(25px, 6vw, 30px)) scale(1); 
      opacity: 1; 
    }
    70% { 
      transform: translateX(clamp(50px, 12vw, 60px)) scale(1.1); 
      opacity: 1; 
    }
    100% { 
      transform: translateX(clamp(75px, 18vw, 90px)) scale(0.3); 
      opacity: 0.2; 
    }
  }
}

@media (max-width: 320px) {
  .own-magnetic-animation {
    margin: 8px auto;
  }
}

/* Performance optimization for reduced motion */
@media (prefers-reduced-motion: reduce) {
  .own-central-magnet {
    animation: none;
  }
  
  .own-attracted-token {
    animation: none;
  }
  
  .own-green-circle {
    opacity: 0.8;
  }
}
</file>

<file path="src/pages/Home/sections/Play/components/HeroButtons.tsx">
import React from 'react';
import './HeroButtons.css';
import { RUNEREALM } from '@arcaogaming/project-links';

interface HeroButtonsProps {
  className?: string;
}

const HeroButtons: React.FC<HeroButtonsProps> = ({ className = '' }) => {
  const handlePlayNow = () => {
    window.open(RUNEREALM.gameSite, '_blank');
  };

  const handleOwn = () => {
    const ownSection = document.getElementById('own');
    if (ownSection) {
      ownSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleCreate = () => {
    const createSection = document.getElementById('create');
    if (createSection) {
      createSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleEarn = () => {
    const earnSection = document.getElementById('earn');
    if (earnSection) {
      earnSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleMint = () => {
    const mintSection = document.getElementById('mint');
    if (mintSection) {
      mintSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <div className={`hero-buttons ${className}`}>

      
      <button className="btn-secondary" onClick={handleOwn}>
        <div className="btn-content">
          <span className="btn-icon">🏆</span>
          <span className="btn-text">OWN</span>
        </div>
      </button>

      <button className="btn-secondary" onClick={handleCreate}>
        <div className="btn-content">
          <span className="btn-icon">🎨</span>
          <span className="btn-text">CREATE</span>
        </div>
      </button>
            <button className="btn-primary" onClick={handlePlayNow}>
        <div className="btn-content">
          <span className="btn-icon">🎮</span>
          <span className="btn-text">PLAY NOW</span>
        </div>
      </button>

      <button className="btn-secondary" onClick={handleEarn}>
        <div className="btn-content">
          <span className="btn-icon">💰</span>
          <span className="btn-text">EARN</span>
        </div>
      </button>

      <button className="btn-secondary" onClick={handleMint}>
        <div className="btn-content">
          <span className="btn-icon">⚡</span>
          <span className="btn-text">MINT</span>
        </div>
      </button>
    </div>
  );
};

export default HeroButtons;
</file>

<file path="src/pages/Home/sections/Play/components/index.ts">
export { default as VideoCarousel } from './VideoCarousel';
export { default as StatsSection } from './StatsSection';
export { default as HeroButtons } from './HeroButtons';
export { default as CoinFlowAnimation } from './CoinFlowAnimation';
</file>

<file path="src/pages/Home/sections/Play/components/StatsSection.tsx">
import { useEffect, useState, useRef } from 'react';
import './StatsSection.css';

interface StatItem {
  value: number | string;
  label: string;
  color: 'purple' | 'cyan' | 'pink';
  prefix?: string;
  suffix?: string;
  animate?: boolean;
}

interface StatsSectionProps {
  className?: string;
}

const StatsSection: React.FC<StatsSectionProps> = ({ className = '' }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [animatedValues, setAnimatedValues] = useState<Record<string, number>>({});
  const sectionRef = useRef<HTMLDivElement>(null);


  const stats: StatItem[] = [
    {
      value: 10000,
      label: 'Active Players',
      color: 'purple',
      suffix: '+',
      animate: true
    },
    {
      value: 2000000,
      label: 'Fair Launch Deposits',
      color: 'cyan',
      prefix: '$',
      suffix: '+',
      animate: true
    },
    {
      value: 6,
      label: 'Games',
      color: 'pink',
      suffix: '+',
      animate: true
    }
  ];

  // Intersection Observer to trigger animation when component comes into view
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting && !isVisible) {
          setIsVisible(true);
        }
      },
      { threshold: 0.5 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, [isVisible]);

  // Count-up animation effect
  useEffect(() => {
    if (!isVisible) return;

    const animateValue = (
      start: number,
      end: number,
      duration: number,
      key: string
    ) => {
      const startTime = Date.now();
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);

        // Easing function for smooth animation
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
        const current = Math.floor(start + (end - start) * easeOutQuart);

        setAnimatedValues(prev => ({ ...prev, [key]: current }));

        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };
      requestAnimationFrame(animate);
    };

    // Start animations for numeric values
    stats.forEach((stat, index) => {
      if (stat.animate && typeof stat.value === 'number') {
        const duration = 2000 + (index * 200); // Stagger animations
        setTimeout(() => {
          animateValue(0, stat.value as number, duration, `stat-${index}`);
        }, index * 100);
      }
    });
  }, [isVisible]);

  const formatNumber = (num: number): string => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
    }
    if (num >= 1000) {
      return (num / 1000).toFixed(1).replace(/\.0$/, '') + 'K';
    }
    return num.toString();
  };

  const getDisplayValue = (stat: StatItem, index: number): string => {
    if (!stat.animate || typeof stat.value !== 'number') {
      return stat.value.toString();
    }

    const animatedValue = animatedValues[`stat-${index}`] || 0;
    return formatNumber(animatedValue);
  };

  return (
    <div ref={sectionRef} className={`stats-section ${className}`}>
      <div className="hero-stats">
        {stats.map((stat, index) => (
          <div key={index} className="stat-item">
            <div className={`stat-number ${stat.color}`}>
              {stat.prefix || ''}
              {getDisplayValue(stat, index)}
              {stat.suffix || ''}
            </div>
            <div className="stat-label">{stat.label}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default StatsSection;
</file>

<file path="src/pages/index.ts">
export * from './Home'
export * from './Mint'
export * from './Earn'
</file>

<file path="src/pages/Mint/components/ConnectArweaveAOWalletButton/ConnectArweaveAOWalletButton.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useState, useEffect } from 'react';
import './ConnectArweaveAOWalletButton.css';
import { useArweaveAOWallet, useBazar } from '../../../../shared/contexts';

interface ConnectArweaveAOWalletButtonProps {
  onConnect?: (address: string) => void;
  onDisconnect?: () => void;
  isConnected?: boolean;
}

const ConnectArweaveAOWalletButton: React.FC<ConnectArweaveAOWalletButtonProps> = ({
  onConnect,
  onDisconnect,
  isConnected: externalIsConnected,
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [currentLogoIndex, setCurrentLogoIndex] = useState(0);
  const {
    isConnected: contextIsConnected,
    connect: contextConnect,
    disconnect: contextDisconnect,
    address,
    arBalance,
    isLoadingBalance,
    refreshBalance
  } = useArweaveAOWallet();

  const { bazarProfile } = useBazar();

  // Wallet logos that rotate every 4 seconds
  const walletLogos = [
    '/beacon-wallet-transparent.png',
    '/wander-logo-transparent.png'
  ];

  // Use external isConnected prop if provided, otherwise use context value
  const isConnected = typeof externalIsConnected !== 'undefined' ? externalIsConnected : contextIsConnected;

  // Rotate wallet logos every 5 seconds with flip animation
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentLogoIndex((prevIndex) => (prevIndex + 1) % walletLogos.length);
    }, 5000);

    return () => clearInterval(interval);
  }, [walletLogos.length]);

  const handleConnect = async () => {
    setIsLoading(true);
    try {
      const address = await contextConnect();
      onConnect?.(address);
    } catch (error) {
      console.error('Failed to connect wallet:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDisconnect = () => {
    contextDisconnect();
    onDisconnect?.();
  };

  const handleCopyAddress = (addr: string) => {
    navigator.clipboard.writeText(addr);
  };

  return (
    <div className="wallet-container">
      {!isConnected ? (
        <button
          className="wallet-button wallet-button-primary"
          onClick={handleConnect}
          disabled={isLoading}
        >
          <div className="wallet-logo-container">
            {walletLogos.map((logo, index) => (
              <img
                key={logo}
                src={logo}
                alt="Wallet Logo"
                className={`wallet-logo ${index === currentLogoIndex ? 'active' : ''}`}
              />
            ))}
          </div>
          <span className="wallet-button-text">{isLoading ? 'Connecting...' : 'Connect AO'}</span>
        </button>
      ) : (
        <div className="wallet-connected">
          {address && (
            <div className="profile-container">
              <div className="user-profile">
                {bazarProfile?.avatar && (
                  <img
                    src={bazarProfile.avatar}
                    alt="Profile"
                    className="profile-avatar"
                  />
                )}
                <div className="profile-info">
                  <div className="profile-name">
                    {bazarProfile?.name || `${address.slice(0, 6)}...${address.slice(-4)}`}
                  </div>
                  <div
                    className="profile-address"
                    onClick={() => handleCopyAddress(address)}
                    title="Click to copy address"
                  >
                    {address.slice(0, 8)}...{address.slice(-6)}
                  </div>
                </div>
              </div>
            </div>
          )}
          <button
            className="wallet-button wallet-button-secondary"
            onClick={handleDisconnect}
          >
            <span className="wallet-button-icon">🔌</span>
            <span>Disconnect</span>
          </button>
        </div>
      )}
    </div>
  );
};

export default ConnectArweaveAOWalletButton;
</file>

<file path="src/pages/Mint/components/StakingActions/ETHStakingActions.tsx">
import React, { useState, useEffect } from 'react';
import { useAccount, useWriteContract, useWaitForTransactionReceipt, useReadContract } from 'wagmi';
import { parseEther, formatEther } from 'viem';
import { useAOSTETHStaking, useArweaveAOWallet } from '../../../../shared/contexts';
import { ethStaking, STETH_TOKEN_ADDRESS } from '../../../../utils/AO/ETHStaking';
import { ERC20_ABI } from '../../../../utils/AO/shared/erc20Abi';
import './StakingActions.css';

export const ETHStakingActions: React.FC = () => {
    const { address, isConnected } = useAccount();
    const { address: arweaveAddress } = useArweaveAOWallet();
    const { stakingBalance, refetch } = useAOSTETHStaking();

    const [stakeAmount, setStakeAmount] = useState('');
    const [unstakeAmount, setUnstakeAmount] = useState('');
    const [isStaking, setIsStaking] = useState(false);
    const [isUnstaking, setIsUnstaking] = useState(false);

    // Read stETH balance
    const { data: stethBalance } = useReadContract({
        address: STETH_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'balanceOf',
        args: address ? [address] : undefined,
        query: {
            enabled: !!address && isConnected,
        },
    });

    // Read stETH allowance
    const { data: stethAllowance, refetch: refetchAllowance } = useReadContract({
        address: STETH_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'allowance',
        args: address ? [address, ethStaking.getStakingContractAddress()] : undefined,
        query: {
            enabled: !!address && isConnected,
        },
    });

    // Contract write hooks
    const { writeContract: writeApprove, data: approveHash } = useWriteContract();
    const { writeContract: writeStake, data: stakeHash } = useWriteContract();
    const { writeContract: writeUnstake, data: unstakeHash } = useWriteContract();

    // Transaction receipt hooks
    const { isLoading: isApproveLoading, isSuccess: isApproveSuccess } = useWaitForTransactionReceipt({
        hash: approveHash,
    });

    const { isLoading: isStakeLoading, isSuccess: isStakeSuccess } = useWaitForTransactionReceipt({
        hash: stakeHash,
    });

    const { isLoading: isUnstakeLoading, isSuccess: isUnstakeSuccess } = useWaitForTransactionReceipt({
        hash: unstakeHash,
    });

    // Handle successful transactions
    useEffect(() => {
        if (isApproveSuccess) {
            refetchAllowance();
        }
    }, [isApproveSuccess, refetchAllowance]);

    useEffect(() => {
        if (isStakeSuccess) {
            setStakeAmount('');
            setIsStaking(false);
            refetch();
        }
    }, [isStakeSuccess, refetch]);

    useEffect(() => {
        if (isUnstakeSuccess) {
            setUnstakeAmount('');
            setIsUnstaking(false);
            refetch();
        }
    }, [isUnstakeSuccess, refetch]);

    const handleApprove = async () => {
        if (!stakeAmount || !address) return;

        try {
            const amount = parseEther(stakeAmount);
            writeApprove({
                address: STETH_TOKEN_ADDRESS,
                abi: ERC20_ABI,
                functionName: 'approve',
                args: [ethStaking.getStakingContractAddress(), amount],
            } as any);
        } catch (error) {
            console.error('Approve error:', error);
        }
    };

    const handleStake = async () => {
        if (!stakeAmount || !address || !arweaveAddress) return;

        try {
            setIsStaking(true);
            const stakeConfig = ethStaking.createStakeConfig(0, stakeAmount, arweaveAddress);
            writeStake(stakeConfig as any);
        } catch (error) {
            console.error('Stake error:', error);
            setIsStaking(false);
        }
    };

    const handleUnstake = async () => {
        if (!unstakeAmount || !address || !arweaveAddress) return;

        try {
            setIsUnstaking(true);
            const unstakeConfig = ethStaking.createWithdrawConfig(0, unstakeAmount, arweaveAddress);
            writeUnstake(unstakeConfig as any);
        } catch (error) {
            console.error('Unstake error:', error);
            // Show user-friendly error message
            if (error instanceof Error) {
                alert(`Unstake failed: ${error.message}`);
            } else {
                alert('Unstake failed. Please check your wallet and try again.');
            }
            setIsUnstaking(false);
        }
    };

    if (!isConnected) {
        return (
            <div className="staking-actions-card">
                <div className="staking-actions-header">
                    <img src="/ethereum-logo.svg" alt="Ethereum" className="staking-actions-icon" />
                    <div className="staking-actions-title">ETH Staking Actions</div>
                </div>
                <div className="staking-actions-content">
                    <div className="staking-actions-status">Connect wallet to stake ETH</div>
                </div>
            </div>
        );
    }

    if (!arweaveAddress) {
        return (
            <div className="staking-actions-card">
                <div className="staking-actions-header">
                    <img src="/ethereum-logo.svg" alt="Ethereum" className="staking-actions-icon" />
                    <div className="staking-actions-title">ETH Staking Actions</div>
                </div>
                <div className="staking-actions-content">
                    <div className="staking-actions-status">Connect Arweave wallet to stake ETH</div>
                </div>
            </div>
        );
    }

    const needsApproval = stakeAmount && stethAllowance !== undefined &&
        parseEther(stakeAmount) > (stethAllowance as bigint);

    const maxStakeAmount = stethBalance ? formatEther(stethBalance as bigint) : '0';
    const maxUnstakeAmount = stakingBalance.stakedAmount ?
        ethStaking.formatAmount(stakingBalance.stakedAmount) : '0';

    return (
        <div className="staking-actions-card">
            <div className="staking-actions-header">
                <img src="/ethereum-logo.svg" alt="Ethereum" className="staking-actions-icon" />
                <div className="staking-actions-title">ETH Staking Actions</div>
            </div>
            <div className="staking-actions-content">
                {/* Stake Section */}
                <div className="staking-action-section">
                    <h4 className="staking-action-title">Stake stETH</h4>
                    <div className="staking-input-group">
                        <input
                            type="number"
                            placeholder="Amount to stake"
                            value={stakeAmount}
                            onChange={(e) => setStakeAmount(e.target.value)}
                            className="staking-input"
                            disabled={isStaking || isStakeLoading || isApproveLoading}
                        />
                        <button
                            onClick={() => setStakeAmount(maxStakeAmount)}
                            className="staking-max-btn"
                            disabled={isStaking || isStakeLoading || isApproveLoading}
                        >
                            MAX
                        </button>
                    </div>
                    <div className="staking-balance-info">
                        Available: {maxStakeAmount} stETH
                    </div>

                    {needsApproval ? (
                        <button
                            onClick={handleApprove}
                            disabled={!stakeAmount || isApproveLoading || isStaking}
                            className="staking-action-btn approve-btn"
                        >
                            {isApproveLoading ? 'Approving...' : 'Approve stETH'}
                        </button>
                    ) : (
                        <button
                            onClick={handleStake}
                            disabled={!stakeAmount || isStaking || isStakeLoading || needsApproval}
                            className="staking-action-btn stake-btn"
                        >
                            {isStaking || isStakeLoading ? 'Staking...' : 'Stake stETH'}
                        </button>
                    )}
                </div>

                {/* Unstake Section */}
                <div className="staking-action-section">
                    <h4 className="staking-action-title">Unstake stETH</h4>
                    <div className="staking-input-group">
                        <input
                            type="number"
                            placeholder="Amount to unstake"
                            value={unstakeAmount}
                            onChange={(e) => setUnstakeAmount(e.target.value)}
                            className="staking-input"
                            disabled={isUnstaking || isUnstakeLoading}
                        />
                        <button
                            onClick={() => setUnstakeAmount(maxUnstakeAmount)}
                            className="staking-max-btn"
                            disabled={isUnstaking || isUnstakeLoading}
                        >
                            MAX
                        </button>
                    </div>
                    <div className="staking-balance-info">
                        Staked: {maxUnstakeAmount} stETH
                    </div>

                    <button
                        onClick={handleUnstake}
                        disabled={!unstakeAmount || isUnstaking || isUnstakeLoading}
                        className="staking-action-btn unstake-btn"
                    >
                        {isUnstaking || isUnstakeLoading ? 'Unstaking...' : 'Unstake stETH'}
                    </button>
                </div>
            </div>
        </div>
    );
};
</file>

<file path="src/pages/Mint/components/TokenomicsSection/TokenomicsSection.css">
/* Tokenomics Section */
.tokenomics-section {
    display: flex;
    justify-content: center;
    flex: 1;
}

.tokenomics-card {
    background: linear-gradient(135deg,
            rgba(15, 23, 42, 0.8) 0%,
            rgba(30, 41, 59, 0.8) 100%);
    border: 2px solid rgba(34, 197, 94, 0.3);
    border-radius: 16px;
    padding: 20px;
    backdrop-filter: blur(16px);
    max-width: 400px;
    width: 100%;
    position: relative;
    overflow: hidden;
    transition: all 0.4s ease;
}

.tokenomics-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
}

.tokenomics-card:hover::before {
    opacity: 1;
}

.tokenomics-card:hover {
    transform: translateY(-4px);
    border-color: rgba(34, 197, 94, 0.6);
    box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.3);
}

.tokenomics-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 20px;
    position: relative;
    z-index: 2;
}

.tokenomics-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
}

.tokenomics-icon img {
    width: 20px;
    height: 20px;
}

.tokenomics-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: rgba(34, 197, 94, 1);
    margin: 0;
}

.tokenomics-content {
    display: flex;
    flex-direction: column;
    gap: 16px;
    position: relative;
    z-index: 2;
}

.tokenomics-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
    padding: 12px 16px;
    background: rgba(15, 23, 42, 0.5);
    border: 1px solid rgba(34, 197, 94, 0.2);
    border-radius: 8px;
    transition: all 0.3s ease;
}

.tokenomics-item:hover {
    border-color: rgba(34, 197, 94, 0.4);
    background: rgba(15, 23, 42, 0.7);
}

.tokenomics-highlight {
    font-size: 1.2rem;
    font-weight: 700;
    background: linear-gradient(90deg,
            rgba(34, 197, 94, 1) 0%,
            rgba(5, 150, 105, 1) 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.tokenomics-label {
    font-size: 0.9rem;
    color: #9ca3af;
    font-weight: 500;
}

/* Responsive Design */
@media (max-width: 768px) {
    .tokenomics-section {
        margin: 24px 16px;
    }

    .tokenomics-card {
        padding: 20px;
    }

    .tokenomics-title {
        font-size: 1.3rem;
    }

    .tokenomics-content {
        gap: 12px;
    }

    .tokenomics-item {
        padding: 10px 12px;
    }

    .tokenomics-highlight {
        font-size: 1.1rem;
    }
}

@media (max-width: 480px) {
    .tokenomics-section {
        margin: 20px 12px;
    }

    .tokenomics-card {
        padding: 16px;
    }

    .tokenomics-header {
        gap: 8px;
    }

    .tokenomics-icon {
        width: 28px;
        height: 28px;
    }

    .tokenomics-icon img {
        width: 16px;
        height: 16px;
    }

    .tokenomics-title {
        font-size: 1.2rem;
    }

    .tokenomics-highlight {
        font-size: 1rem;
    }

    .tokenomics-label {
        font-size: 0.8rem;
    }
}
</file>

<file path="src/pages/Mint/components/TokenomicsSection/TokenomicsSection.tsx">
import React from 'react';
import './TokenomicsSection.css';
import { useGameToken } from '../../../../shared/contexts';
import { formatBigNumberTokenAmount } from '../../../../utils/formatting';

const TokenomicsSection: React.FC = () => {
    const { totalSupply, circulatingSupply, isLoadingTokenData } = useGameToken();

    return (
        <div className="tokenomics-section">
            <div className="tokenomics-card">
                <div className="tokenomics-header">
                    <div className="tokenomics-icon">
                        <img src="/game-token.png" alt="GAME Token" />
                    </div>
                    <h3 className="tokenomics-title">Tokenomics</h3>
                </div>

                <div className="tokenomics-content">
                    <div className="tokenomics-item">
                        <span className="tokenomics-highlight">
                            {isLoadingTokenData ? 'Loading...' : formatBigNumberTokenAmount(totalSupply, 18)}
                        </span>
                        <span className="tokenomics-label">Total Supply</span>
                    </div>

                    <div className="tokenomics-item">
                        <span className="tokenomics-highlight">
                            {isLoadingTokenData ? 'Loading...' : formatBigNumberTokenAmount(circulatingSupply, 18)}
                        </span>
                        <span className="tokenomics-label">Circulating Supply</span>
                    </div>

                    <div className="tokenomics-item">
                        <span className="tokenomics-highlight">0%</span>
                        <span className="tokenomics-label">VC Allocation</span>
                    </div>

                    <div className="tokenomics-item">
                        <span className="tokenomics-highlight">Exchange Listing</span>
                        <span className="tokenomics-label">Imminent - You are early</span>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default TokenomicsSection;
</file>

<file path="src/pages/Mint/components/UtilityBenefitsSection/UtilityBenefitsSection.css">
/* Utility & Benefits Section */
.utility-benefits-section {
    display: flex;
    justify-content: center;
    flex: 1;
}

.utility-benefits-card {
    background: linear-gradient(135deg,
            rgba(15, 23, 42, 0.8) 0%,
            rgba(30, 41, 59, 0.8) 100%);
    border: 2px solid rgba(34, 197, 94, 0.3);
    border-radius: 16px;
    padding: 20px;
    backdrop-filter: blur(16px);
    max-width: 400px;
    width: 100%;
    position: relative;
    overflow: hidden;
    transition: all 0.4s ease;
}

.utility-benefits-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
}

.utility-benefits-card:hover::before {
    opacity: 1;
}

.utility-benefits-card:hover {
    transform: translateY(-4px);
    border-color: rgba(34, 197, 94, 0.6);
    box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.3);
}

.utility-benefits-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 20px;
    position: relative;
    z-index: 2;
}

.utility-benefits-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
}

.utility-benefits-icon img {
    width: 20px;
    height: 20px;
}

.utility-benefits-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: rgba(34, 197, 94, 1);
    margin: 0;
}

.utility-benefits-content {
    display: flex;
    flex-direction: column;
    gap: 12px;
    position: relative;
    z-index: 2;
}

.utility-benefit-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 16px;
    background: rgba(15, 23, 42, 0.5);
    border: 1px solid rgba(34, 197, 94, 0.2);
    border-radius: 8px;
    transition: all 0.3s ease;
}

.utility-benefit-item:hover {
    border-color: rgba(34, 197, 94, 0.4);
    background: rgba(15, 23, 42, 0.7);
    transform: translateX(4px);
}

.benefit-icon {
    font-size: 1rem;
    font-weight: 700;
    color: rgba(34, 197, 94, 1);
    background: rgba(34, 197, 94, 0.1);
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.benefit-text {
    font-size: 0.95rem;
    color: #d1d5db;
    font-weight: 500;
    line-height: 1.4;
}

/* Responsive Design */
@media (max-width: 768px) {
    .utility-benefits-section {
        margin: 24px 16px;
    }

    .utility-benefits-card {
        padding: 20px;
    }

    .utility-benefits-title {
        font-size: 1.3rem;
    }

    .utility-benefits-content {
        gap: 10px;
    }

    .utility-benefit-item {
        padding: 8px 12px;
    }

    .benefit-text {
        font-size: 0.9rem;
    }
}

@media (max-width: 480px) {
    .utility-benefits-section {
        margin: 20px 12px;
    }

    .utility-benefits-card {
        padding: 16px;
    }

    .utility-benefits-header {
        gap: 8px;
    }

    .utility-benefits-icon {
        width: 28px;
        height: 28px;
    }

    .utility-benefits-icon img {
        width: 16px;
        height: 16px;
    }

    .utility-benefits-title {
        font-size: 1.2rem;
    }

    .utility-benefit-item {
        gap: 8px;
        padding: 8px 10px;
    }

    .benefit-icon {
        width: 18px;
        height: 18px;
        font-size: 0.9rem;
    }

    .benefit-text {
        font-size: 0.85rem;
    }
}
</file>

<file path="src/pages/Mint/components/WalletBalance/DAIStakingBalance.tsx">
import React from 'react';
import { useAOSDAIStaking } from '../../../../shared/contexts';
import { daiStaking } from '../../../../utils/AO';
import './WalletBalance.css';

export const DAIStakingBalance: React.FC = () => {
    const {
        isConnected,
        stakingBalance,
        refetch
    } = useAOSDAIStaking();

    if (!isConnected) {
        return (
            <div className="wallet-balance-card">
                <div className="wallet-balance-header">
                    <img src="/dai-logo.png" alt="DAI" className="wallet-balance-icon" />
                    <div className="wallet-balance-title">DAI Staking</div>
                </div>
                <div className="wallet-balance-content">
                    <div className="wallet-balance-status">Connect wallet to view staking</div>
                </div>
            </div>
        );
    }

    const handleRefresh = () => {
        refetch();
    };

    return (
        <div className="wallet-balance-card">
            <div className="wallet-balance-header">
                <img src="/dai-logo.png" alt="DAI" className="wallet-balance-icon" />
                <div className="wallet-balance-title">DAI Staking</div>
                <button
                    onClick={handleRefresh}
                    style={{
                        marginLeft: 'auto',
                        padding: '4px 8px',
                        fontSize: '12px',
                        background: 'transparent',
                        border: '1px solid #ccc',
                        borderRadius: '4px',
                        cursor: 'pointer'
                    }}
                >
                    🔄
                </button>
            </div>
            <div className="wallet-balance-content">
                {stakingBalance.isLoading ? (
                    <div className="wallet-balance-loading">Loading staking data...</div>
                ) : stakingBalance.error ? (
                    <div className="wallet-balance-error">
                        {stakingBalance.error.message === 'DAI staking contract not available on this network' ? (
                            <>
                                <div>⚠️ DAI Staking Not Available</div>
                                <small>The DAI staking contract is not deployed on this network</small>
                            </>
                        ) : stakingBalance.error.message?.includes('out of bounds') || stakingBalance.error.message?.includes('Position') ? (
                            <>
                                <div>⚠️ DAI Contract Incompatible</div>
                                <small>The DAI staking contract has a different structure than expected</small>
                            </>
                        ) : (
                            <>
                                Error: {stakingBalance.error.message}
                            </>
                        )}
                    </div>
                ) : (
                    <>
                        <div className="wallet-balance-item">
                            <div className="wallet-balance-label">Your Staked DAI</div>
                            <div className="wallet-balance-value">
                                {stakingBalance.stakedAmount ? daiStaking.formatAmount(stakingBalance.stakedAmount) : '0.00'} DAI
                            </div>
                        </div>
                        <div className="wallet-balance-item">
                            <div className="wallet-balance-label">Earned Rewards</div>
                            <div className="wallet-balance-value">
                                {stakingBalance.earnedRewards ? daiStaking.formatAmount(stakingBalance.earnedRewards) : '0.00'} DAI
                            </div>
                        </div>
                        <div className="wallet-balance-item">
                            <div className="wallet-balance-label">Total Staked</div>
                            <div className="wallet-balance-value">
                                {stakingBalance.totalStaked ? daiStaking.formatAmount(stakingBalance.totalStaked) : '0.00'} DAI
                            </div>
                        </div>
                    </>
                )}
            </div>
        </div>
    );
};
</file>

<file path="src/pages/Mint/components/WalletBalance/WalletBalance.css">
/* Wallet Balance Components */
.wallet-balance-container {
  background: rgba(15, 23, 42, 0.7);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: 12px;
  padding: 16px;
  margin: 8px 0;
  backdrop-filter: blur(8px);
  transition: all 0.3s ease;
  min-width: 200px;
}

.wallet-balance-container:hover {
  border-color: rgba(34, 197, 94, 0.5);
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(34, 197, 94, 0.2);
}

.wallet-balance-header {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 12px;
}

.wallet-balance-icon {
  font-size: 1.2rem;
}

.wallet-balance-title {
  font-weight: 600;
  color: rgba(34, 197, 94, 1);
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.wallet-balance-content {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.wallet-balance-address {
  font-size: 0.85rem;
  color: #9ca3af;
  font-family: 'Courier New', monospace;
}

.wallet-balance-amount {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.wallet-balance-value {
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  font-size: 1.1rem;
}

.wallet-balance-loading {
  color: #9ca3af;
  font-style: italic;
  animation: pulse 2s ease-in-out infinite;
}

.wallet-balance-network {
  font-size: 0.8rem;
  color: #6b7280;
  text-transform: capitalize;
}

@keyframes pulse {

  0%,
  100% {
    opacity: 1;
  }

  50% {
    opacity: 0.5;
  }
}

/* Token Balance Specific Styles */
.wallet-balance {
  background: rgba(15, 23, 42, 0.7);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: 12px;
  padding: 16px;
  margin: 8px 0;
  backdrop-filter: blur(8px);
  transition: all 0.3s ease;
  min-width: 280px;
}

.wallet-balance:hover {
  border-color: rgba(34, 197, 94, 0.5);
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(34, 197, 94, 0.2);
}

.wallet-balance-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
}

.wallet-balance-header h3 {
  font-weight: 600;
  color: rgba(34, 197, 94, 1);
  font-size: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin: 0;
}

.refresh-button {
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: 6px;
  color: rgba(34, 197, 94, 1);
  padding: 4px 8px;
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.refresh-button:hover {
  background: rgba(34, 197, 94, 0.2);
  border-color: rgba(34, 197, 94, 0.5);
}

.wallet-balance-content {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.token-balance-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 0;
  border-bottom: 1px solid rgba(34, 197, 94, 0.1);
}

.token-balance-item:last-child {
  border-bottom: none;
}

.token-info {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.token-symbol {
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  font-size: 0.9rem;
}

.token-name {
  font-size: 0.75rem;
  color: #9ca3af;
}

.token-amount {
  font-weight: 600;
  color: #ffffff;
  font-size: 0.9rem;
  font-family: 'Courier New', monospace;
}

.error {
  color: #ef4444;
  font-style: italic;
}

/* Responsive design */
@media (max-width: 768px) {
  .wallet-balance-container {
    min-width: 180px;
    padding: 14px;
  }

  .wallet-balance-title {
    font-size: 0.8rem;
  }

  .wallet-balance-value {
    font-size: 1rem;
  }

  .wallet-balance {
    min-width: 240px;
    padding: 14px;
  }

  .wallet-balance-header h3 {
    font-size: 0.9rem;
  }

  .token-symbol {
    font-size: 0.8rem;
  }

  .token-amount {
    font-size: 0.8rem;
  }
}
</file>

<file path="src/pages/Mint/components/WalletConnections/components/FlipLogo.tsx">
import React, { useState, useEffect } from 'react';

interface FlipLogoProps {
    size?: 'small' | 'medium' | 'large';
    className?: string;
}

const FlipLogo: React.FC<FlipLogoProps> = ({ size = 'small', className = '' }) => {
    const [currentLogoIndex, setCurrentLogoIndex] = useState(0);

    // Wallet logos that rotate every 5 seconds with flip animation
    const walletLogos = [
        '/beacon-wallet-transparent.png',
        '/wander-logo-transparent.png'
    ];

    // Rotate wallet logos every 5 seconds with flip animation
    useEffect(() => {
        const interval = setInterval(() => {
            setCurrentLogoIndex((prevIndex) => (prevIndex + 1) % walletLogos.length);
        }, 5000);

        return () => clearInterval(interval);
    }, [walletLogos.length]);

    const getContainerClass = () => {
        switch (size) {
            case 'large':
                return 'wallet-logo-container';
            case 'medium':
                return 'wallet-logo-container-medium';
            case 'small':
            default:
                return 'wallet-logo-container-small';
        }
    };

    const getLogoClass = () => {
        switch (size) {
            case 'large':
                return 'wallet-logo';
            case 'medium':
                return 'wallet-logo-medium';
            case 'small':
            default:
                return 'wallet-logo-small';
        }
    };

    const containerClass = getContainerClass();
    const logoClass = getLogoClass();

    return (
        <div className={`${containerClass} ${className}`}>
            {walletLogos.map((logo, index) => (
                <img
                    key={logo}
                    src={logo}
                    alt="Wallet Logo"
                    className={`${logoClass} ${index === currentLogoIndex ? 'active' : ''}`}
                />
            ))}
        </div>
    );
};

export default FlipLogo;
</file>

<file path="src/pages/Mint/components/WalletConnections/components/index.ts">
export { default as ArweaveConnection } from './ArweaveConnection';
export { default as STETHConnection } from './STETHConnection';
export { default as DAIConnection } from './DAIConnection';
export { default as USDSConnection } from './USDSConnection';
export { default as GameYieldConnection } from './GameYieldConnection';
</file>

<file path="src/pages/Mint/components/WalletConnections/WalletConnections.tsx">
import React from 'react';
import { ArweaveConnection, STETHConnection, DAIConnection, USDSConnection, GameYieldConnection } from './components';
import './WalletConnections.css';

const WalletConnections: React.FC = () => {
    return (
        <div className="wallet-connections-interface">
            <div className="wallet-connections-card">
                <h2 className="wallet-connections-title">Fair Launch Deposits</h2>
                <p className="wallet-connections-description">
                    Connect your wallets to view balances and manage your deposits across different networks for the fair launch.
                </p>

                <div className="wallet-connections-grid">
                    <ArweaveConnection />
                    <STETHConnection />
                    <DAIConnection />
                    <USDSConnection />
                </div>

                <div className="game-yield-section">
                    <GameYieldConnection />
                </div>
            </div>
        </div>
    );
};

export default WalletConnections;
</file>

<file path="src/pages/Earn/Earn.tsx">
import { useEffect, useState } from 'react';
import { EarnCoinFlowAnimation } from '../../shared/components/CoinFlowAnimations/Earn';
import './Earn.css';

const Earn = () => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);

    // Load the form embed script
    const script = document.createElement('script');
    script.src = 'https://link.we-grow.agency/js/form_embed.js';
    script.async = true;
    document.body.appendChild(script);

    // Cleanup script on unmount
    return () => {
      const existingScript = document.querySelector('script[src="https://link.we-grow.agency/js/form_embed.js"]');
      if (existingScript) {
        document.body.removeChild(existingScript);
      }
    };
  }, []);

  const scrollToApplication = () => {
    const applicationSection = document.querySelector('.ambassador-application');
    if (applicationSection) {
      applicationSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleStreamClick = () => {
    scrollToApplication();
  };

  const handleAffiliateClick = () => {
    scrollToApplication();
  };

  const handleAmbassadorClick = () => {
    scrollToApplication();
  };

  return (
    <div className={`earn-page ${isVisible ? 'animate-in' : ''}`}>
      {/* Animated background layers */}
      <div className="earn-bg-layer-1"></div>
      <div className="earn-bg-layer-2"></div>
      <div className="earn-bg-layer-3"></div>

      {/* Grid overlay */}
      <div className="earn-grid-overlay"></div>

      {/* Coin Elements */}
      <div className="coin-element coin-stack-1">🪙</div>
      <div className="coin-element coin-stack-2">💰</div>
      <div className="coin-element coin-rain-1">🪙</div>
      <div className="coin-element coin-rain-2">💰</div>

      {/* Floating particles */}
      <div className="earn-particles">
        <div className="earn-particle-1"></div>
        <div className="earn-particle-2"></div>
        <div className="earn-particle-3"></div>
        <div className="earn-particle-4"></div>
        <div className="earn-particle-5"></div>
        <div className="earn-particle-6"></div>

        {/* Geometric shapes */}
        <div className="earn-shape-1"></div>
        <div className="earn-shape-2"></div>
        <div className="earn-shape-3"></div>
        <div className="earn-shape-4"></div>
      </div>

      <div className="earn-content">
        <h1 className="earn-title">$GAME</h1>
        <EarnCoinFlowAnimation />
        <p className="earn-description">
          Multiple ways to earn rewards and build your gaming empire. Play, stream, refer, and lead
          your way to success in the ARCAO ecosystem.
        </p>

        <div className="earn-rewards">

          <div className="earn-reward-card earn-reward-card-clickable" onClick={handleStreamClick}>
            <span className="earn-reward-icon">📺</span>
            <h3 className="earn-reward-title">Stream & Create</h3>
            <div className="earn-reward-amount">Get Paid</div>
            <p className="earn-reward-description">
              Get paid to stream ARCAO games and create content. Join our creator program and earn
              revenue sharing, sponsorship opportunities, and exclusive creator rewards.
            </p>
          </div>

          <div className="earn-reward-card earn-reward-card-clickable" onClick={handleAffiliateClick}>
            <span className="earn-reward-icon">💼</span>
            <h3 className="earn-reward-title">Affiliate Sales</h3>
            <div className="earn-reward-amount">Commission</div>
            <p className="earn-reward-description">
              Earn commission on game sales through your unique affiliate codes. Share ARCAO games
              with your network and earn a percentage of every sale you generate.
            </p>
          </div>

          <div className="earn-reward-card earn-reward-card-clickable ambassador-card" onClick={handleAmbassadorClick}>
            <span className="earn-reward-icon">👑</span>
            <h3 className="earn-reward-title">ARCAO Ambassador</h3>
            <div className="earn-reward-amount">Leadership</div>
            <p className="earn-reward-description">
              Apply to become an official ARCAO Ambassador. Lead the community, represent the brand,
              and unlock exclusive benefits, early access, and leadership opportunities.
            </p>
            <div className="ambassador-hover-text">Apply Now</div>
          </div>
        </div>

        {/* Ambassador Application Section */}
        <div className="ambassador-application">
          <h2 className="ambassador-section-title">Apply to Become an ARCAO Ambassador</h2>
          <p className="ambassador-section-description">
            Ready to lead the ARCAO community? Fill out the application below to join our elite Ambassador program.
          </p>
          <div className="ambassador-form-container">
            <iframe
              src="https://link.we-grow.agency/widget/form/fcls5dL0IztmJ7W8qleP?transparent=true&bg=transparent"
              style={{
                all: 'initial',
                width: '100%',
                height: '1071px',
                border: 'none',
                borderRadius: '8px',
                display: 'block',
                background: 'transparent',
                color: 'inherit',
                font: 'inherit'
              }}
              id="inline-fcls5dL0IztmJ7W8qleP"
              data-layout="{'id':'INLINE'}"
              data-trigger-type="alwaysShow"
              data-trigger-value=""
              data-activation-type="alwaysActivated"
              data-activation-value=""
              data-deactivation-type="neverDeactivate"
              data-deactivation-value=""
              data-form-name="$GAME Ambassador Application"
              data-height="1071"
              data-layout-iframe-id="inline-fcls5dL0IztmJ7W8qleP"
              data-form-id="fcls5dL0IztmJ7W8qleP"
              title="$GAME Ambassador Application"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Earn;
</file>

<file path="src/pages/Home/sections/Earn/EarnSection.css">
/* Home Earn Section Styles - Rewards/Golden Theme */
.earn-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.earn-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Home Earn Section Animated Backgrounds - Golden/Rewards Theme */
.earn-section .earn-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(146, 64, 14, 0.4) 0%, 
    rgba(251, 191, 36, 0.3) 50%, 
    rgba(245, 158, 11, 0.4) 100%);
}

.earn-section .earn-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 40% 60%, 
    rgba(251, 191, 36, 0.2) 0%, 
    transparent 60%);
}

.earn-section .earn-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Home Earn Section Floating Coin Elements */
.earn-section .coin-element {
  position: absolute;
  font-size: 2rem;
  opacity: 0.4;
  pointer-events: none;
}

.earn-section .coin-stack-1 {
  top: 15%;
  left: 12%;
  animation: home-earn-coin-stack-bounce 5s ease-in-out infinite;
  animation-delay: 0s;
}

.earn-section .coin-stack-2 {
  bottom: 20%;
  right: 15%;
  animation: home-earn-coin-stack-bounce 6s ease-in-out infinite;
  animation-delay: 1.5s;
}

.earn-section .coin-rain-1 {
  top: 5%;
  left: 70%;
  animation: home-earn-coin-rain 8s linear infinite;
  animation-delay: 2s;
}

.earn-section .coin-rain-2 {
  top: 10%;
  right: 30%;
  animation: home-earn-coin-rain 10s linear infinite;
  animation-delay: 4s;
}

.earn-section .earn-grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(251, 191, 36, 0.02) 1px, transparent 1px),
    linear-gradient(90deg, rgba(251, 191, 36, 0.02) 1px, transparent 1px);
  background-size: 70px 70px;
  opacity: 0.5;
}

/* Home Earn Section Floating Particles - Coin/Gold Theme */
.earn-section .earn-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.earn-section .earn-particle-1 {
  position: absolute;
  top: 25%;
  left: 10%;
  width: 14px;
  height: 14px;
  background: linear-gradient(45deg, rgba(251, 191, 36, 0.9), rgba(245, 158, 11, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 30px rgba(251, 191, 36, 0.8);
  animation: home-earn-coin-float 3.5s ease-in-out infinite;
}

.earn-section .earn-particle-2 {
  position: absolute;
  top: 65%;
  right: 25%;
  width: 10px;
  height: 10px;
  background: linear-gradient(45deg, rgba(245, 158, 11, 0.9), rgba(217, 119, 6, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 25px rgba(245, 158, 11, 0.8);
  animation: home-earn-coin-float 2.8s ease-in-out infinite reverse;
}

.earn-section .earn-particle-3 {
  position: absolute;
  bottom: 35%;
  left: 80%;
  width: 12px;
  height: 12px;
  background: linear-gradient(45deg, rgba(217, 119, 6, 0.9), rgba(251, 191, 36, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 28px rgba(217, 119, 6, 0.8);
  animation: home-earn-coin-float 4s ease-in-out infinite;
}

.earn-section .earn-particle-4 {
  position: absolute;
  top: 40%;
  left: 5%;
  width: 8px;
  height: 8px;
  background: linear-gradient(45deg, rgba(252, 211, 77, 0.9), rgba(251, 191, 36, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 20px rgba(252, 211, 77, 0.8);
  animation: home-earn-coin-float 3s ease-in-out infinite;
}

.earn-section .earn-particle-5 {
  position: absolute;
  bottom: 15%;
  right: 70%;
  width: 16px;
  height: 16px;
  background: linear-gradient(45deg, rgba(251, 191, 36, 0.8), rgba(245, 158, 11, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 35px rgba(251, 191, 36, 0.7);
  animation: home-earn-coin-float 4.2s ease-in-out infinite reverse;
}

.earn-section .earn-particle-6 {
  position: absolute;
  top: 80%;
  left: 30%;
  width: 6px;
  height: 6px;
  background: linear-gradient(45deg, rgba(245, 158, 11, 0.9), rgba(252, 211, 77, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 18px rgba(245, 158, 11, 0.8);
  animation: home-earn-coin-float 2.5s ease-in-out infinite;
}

/* Home Earn Section Geometric Shapes - Treasure/Coin Theme */
.earn-section .earn-shape-1 {
  position: absolute;
  top: 18%;
  right: 12%;
  width: 42px;
  height: 42px;
  background: linear-gradient(45deg, rgba(251, 191, 36, 0.4), rgba(245, 158, 11, 0.4));
  clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
  animation: home-earn-golden-glow 4s ease-in-out infinite;
}

.earn-section .earn-shape-2 {
  position: absolute;
  bottom: 30%;
  left: 8%;
  width: 30px;
  height: 30px;
  border: 2px solid rgba(245, 158, 11, 0.6);
  transform: rotate(45deg);
  animation: home-earn-pulse 2.8s ease-in-out infinite;
}

.earn-section .earn-shape-3 {
  position: absolute;
  top: 55%;
  right: 85%;
  width: 22px;
  height: 22px;
  background: linear-gradient(45deg, 
    rgba(251, 191, 36, 0.4), 
    rgba(245, 158, 11, 0.4));
  border-radius: 50%;
  animation: home-earn-bounce 1.8s infinite;
  animation-delay: 0.3s;
}

.earn-section .earn-shape-4 {
  position: absolute;
  top: 35%;
  left: 2%;
  width: 26px;
  height: 26px;
  border: 1px solid rgba(252, 211, 77, 0.7);
  clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
  animation: home-earn-ping 4s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Home Earn Section Content */
.earn-section .earn-content {
  position: relative;
  z-index: 10;
  max-width: 1536px;
  margin: 0 auto;
  padding: 0 clamp(16px, 4vw, 24px);
}

.earn-section .earn-title {
  font-size: clamp(2.5rem, 6vw, 7rem);
  font-weight: 900;
  margin-bottom: clamp(16px, 4vw, 24px);
  background: linear-gradient(90deg, 
    rgba(251, 191, 36, 1) 0%, 
    rgba(245, 158, 11, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: home-earn-golden-glow 3.5s ease-in-out infinite;
  text-align: center;
}

.earn-section .earn-description {
  font-size: clamp(1rem, 2.5vw, 1.25rem);
  color: #d1d5db;
  max-width: min(768px, 90vw);
  margin: 0 auto clamp(32px, 8vw, 64px);
  line-height: 1.75;
  text-align: center;
  padding: 0 16px;
}

/* Home Earn Section Rewards Grid */
.earn-section .earn-rewards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(320px, 100%), 1fr));
  gap: clamp(16px, 4vw, 32px);
  margin-bottom: clamp(32px, 8vw, 64px);
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding: 0 16px;
}

@media (min-width: 768px) {
  .earn-section .earn-rewards {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    padding: 0;
  }
}

@media (min-width: 1024px) {
  .earn-section .earn-rewards {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* Earn Feature Cards - Matching Create Section Style */
.earn-section .earn-card {
  position: relative;
  padding: clamp(20px, 5vw, 32px);
  background: rgba(15, 23, 42, 0.6);
  border: 1px solid rgba(251, 191, 36, 0.2);
  border-radius: clamp(16px, 4vw, 24px);
  backdrop-filter: blur(16px);
  transition: all 0.4s ease;
  overflow: hidden;
  cursor: pointer;
}

.earn-section .earn-card::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(251, 191, 36, 0.1) 0%, 
    rgba(245, 158, 11, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.earn-section .earn-card:hover::before {
  opacity: 1;
}

.earn-section .earn-card:hover {
  transform: translateY(-8px) scale(1.02);
  border-color: rgba(251, 191, 36, 0.5);
  box-shadow: 0 25px 50px -12px rgba(251, 191, 36, 0.3);
}

.earn-section .earn-card-icon {
  font-size: clamp(2.5rem, 6vw, 3rem);
  margin-bottom: clamp(16px, 4vw, 24px);
  display: block;
  position: relative;
  z-index: 2;
}

.earn-section .earn-card-title {
  font-size: clamp(1.25rem, 3vw, 1.5rem);
  font-weight: 700;
  margin-bottom: clamp(12px, 3vw, 16px);
  position: relative;
  z-index: 2;
}

.earn-section .earn-card-amount {
  font-size: clamp(1rem, 2.5vw, 1.2rem);
  font-weight: 600;
  margin-bottom: clamp(12px, 3vw, 16px);
  position: relative;
  z-index: 2;
  color: #d1d5db;
}

.earn-section .earn-card-description {
  color: #9ca3af;
  line-height: 1.6;
  position: relative;
  z-index: 2;
  margin: 0;
  font-size: clamp(0.875rem, 2vw, 1rem);
}

/* Stake Card - Green Theme */
.earn-section .earn-card-stake .earn-card-title {
  color: rgba(52, 211, 153, 1);
}

.earn-section .earn-card-stake:hover {
  border-color: rgba(52, 211, 153, 0.5);
  box-shadow: 0 25px 50px -12px rgba(52, 211, 153, 0.3);
}

.earn-section .earn-card-stake::before {
  background: linear-gradient(135deg, 
    rgba(52, 211, 153, 0.1) 0%, 
    rgba(16, 185, 129, 0.1) 100%);
}

/* Play Card - Blue Theme */
.earn-section .earn-card-play .earn-card-title {
  color: rgba(59, 130, 246, 1);
}

.earn-section .earn-card-play:hover {
  border-color: rgba(59, 130, 246, 0.5);
  box-shadow: 0 25px 50px -12px rgba(59, 130, 246, 0.3);
}

.earn-section .earn-card-play::before {
  background: linear-gradient(135deg, 
    rgba(59, 130, 246, 0.1) 0%, 
    rgba(37, 99, 235, 0.1) 100%);
}

/* Stream Card - Purple Theme with Special Hover */
.earn-section .earn-card-stream {
  position: relative;
}

.earn-section .earn-card-stream .earn-card-title {
  color: rgba(147, 51, 234, 1);
}

.earn-section .earn-card-stream:hover {
  border-color: rgba(147, 51, 234, 0.5);
  box-shadow: 0 25px 50px -12px rgba(147, 51, 234, 0.3);
}

.earn-section .earn-card-stream::before {
  background: linear-gradient(135deg, 
    rgba(147, 51, 234, 0.1) 0%, 
    rgba(126, 34, 206, 0.1) 100%);
}

/* Stream Card Hover Overlay */
.earn-section .earn-card-hover-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, 
    rgba(147, 51, 234, 0.95) 0%, 
    rgba(126, 34, 206, 0.95) 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.4s ease;
  border-radius: 24px;
  backdrop-filter: blur(8px);
}

.earn-section .earn-card-cta {
  position: relative;
  color: white;
  font-size: clamp(1rem, 3vw, 1.4rem);
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  padding: clamp(12px, 3vw, 16px) clamp(20px, 5vw, 32px);
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: clamp(8px, 2vw, 12px);
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(4px);
  transition: all 0.3s ease;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  box-shadow: 0 8px 32px rgba(147, 51, 234, 0.4);
}

.earn-section .earn-card-cta::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.2) 0%, 
    rgba(255, 255, 255, 0.05) 100%);
  border-radius: 10px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.earn-section .earn-card-stream:hover .earn-card-cta {
  transform: scale(1.05);
  border-color: rgba(255, 255, 255, 0.5);
  box-shadow: 0 12px 40px rgba(147, 51, 234, 0.6);
}

.earn-section .earn-card-stream:hover .earn-card-cta::before {
  opacity: 1;
}

.earn-section .earn-card-stream:hover .earn-card-hover-overlay {
  opacity: 1;
}

.earn-section .earn-card-stream:hover .earn-card-icon,
.earn-section .earn-card-stream:hover .earn-card-title,
.earn-section .earn-card-stream:hover .earn-card-amount,
.earn-section .earn-card-stream:hover .earn-card-description {
  opacity: 0.2;
  transition: opacity 0.3s ease;
}

/* Earn CTA */
.earn-cta {
  text-align: center;
}

.earn-cta-button {
  position: relative;
  padding: 24px 72px;
  background: linear-gradient(90deg, 
    rgba(251, 191, 36, 1) 0%, 
    rgba(245, 158, 11, 1) 100%);
  border: none;
  border-radius: 24px;
  font-weight: 700;
  font-size: 1.3rem;
  color: rgba(15, 23, 42, 1);
  cursor: pointer;
  transition: all 0.4s ease;
  backdrop-filter: blur(8px);
  overflow: hidden;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.earn-cta-button::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(90deg, 
    rgba(251, 191, 36, 1) 0%, 
    rgba(245, 158, 11, 1) 100%);
  border-radius: 24px;
  filter: blur(25px);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.earn-cta-button:hover::before {
  opacity: 0.8;
}

.earn-cta-button:hover {
  transform: scale(1.08) translateY(-4px);
  box-shadow: 0 25px 50px -12px rgba(251, 191, 36, 0.6);
}

.earn-cta-content {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 16px;
}

/* Home Earn Section Animations */
@keyframes home-earn-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes home-earn-golden-glow {
  0%, 100% {
    opacity: 1;
    filter: brightness(1) drop-shadow(0 0 10px rgba(251, 191, 36, 0.3));
  }
  50% {
    opacity: 0.85;
    filter: brightness(1.3) drop-shadow(0 0 20px rgba(251, 191, 36, 0.5));
  }
}

@keyframes home-earn-coin-float {
  0%, 100% {
    transform: translateY(0px) rotate(0deg) scale(1);
  }
  25% {
    transform: translateY(-12px) rotate(90deg) scale(1.1);
  }
  50% {
    transform: translateY(-20px) rotate(180deg) scale(1);
  }
  75% {
    transform: translateY(-8px) rotate(270deg) scale(1.05);
  }
}

@keyframes home-earn-pulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.15);
  }
}

@keyframes home-earn-bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@keyframes home-earn-ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Home Earn Section Coin Animation Keyframes */
@keyframes home-earn-coin-stack-bounce {
  0%, 100% {
    transform: translateY(0px) scale(1);
  }
  50% {
    transform: translateY(-15px) scale(1.1);
  }
}

@keyframes home-earn-coin-rain {
  0% {
    transform: translateY(-20px) translateX(0px) rotate(0deg);
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    transform: translateY(100vh) translateX(50px) rotate(360deg);
    opacity: 0;
  }
}

/* Mobile Responsive Media Queries */
@media (max-width: 768px) {
  .earn-section {
    min-height: auto;
    padding: clamp(40px, 10vw, 80px) 0;
  }

  .earn-section .coin-element {
    font-size: 1.5rem;
    opacity: 0.3;
  }

  .earn-section .earn-grid-overlay {
    background-size: 50px 50px;
    opacity: 0.3;
  }

  .earn-section .earn-rewards {
    grid-template-columns: 1fr;
    gap: 20px;
    padding: 0 20px;
  }

  .earn-section .earn-card:hover {
    transform: translateY(-4px) scale(1.01);
  }

  .earn-section .earn-card-hover-overlay {
    border-radius: clamp(16px, 4vw, 24px);
  }
}

@media (max-width: 480px) {
  .earn-section {
    padding: 60px 0 40px;
  }

  .earn-section .earn-content {
    padding: 0 16px;
  }

  .earn-section .earn-description {
    padding: 0 8px;
    margin-bottom: 40px;
  }

  .earn-section .earn-rewards {
    padding: 0 16px;
    gap: 16px;
    margin-bottom: 40px;
  }

  .earn-section .earn-card {
    padding: 20px;
    border-radius: 16px;
  }

  .earn-section .earn-card:hover {
    transform: translateY(-2px) scale(1.005);
  }

  .earn-section .coin-element {
    font-size: 1.2rem;
    opacity: 0.2;
  }

  /* Reduce animation intensity on mobile */
  .earn-section .earn-particle-1,
  .earn-section .earn-particle-2,
  .earn-section .earn-particle-3,
  .earn-section .earn-particle-4,
  .earn-section .earn-particle-5,
  .earn-section .earn-particle-6 {
    opacity: 0.6;
  }

  .earn-section .earn-shape-1,
  .earn-section .earn-shape-2,
  .earn-section .earn-shape-3,
  .earn-section .earn-shape-4 {
    opacity: 0.5;
  }
}

@media (max-width: 320px) {
  .earn-section .earn-rewards {
    padding: 0 12px;
  }

  .earn-section .earn-card {
    padding: 16px;
  }

  .earn-section .earn-description {
    padding: 0 4px;
  }
}

/* Touch device optimizations */
@media (hover: none) and (pointer: coarse) {
  .earn-section .earn-card:hover {
    transform: none;
    border-color: rgba(251, 191, 36, 0.2);
    box-shadow: none;
  }

  .earn-section .earn-card:active {
    transform: scale(0.98);
  }

  .earn-section .earn-card-stream:hover .earn-card-hover-overlay {
    opacity: 0;
  }

  .earn-section .earn-card-stream:active .earn-card-hover-overlay {
    opacity: 1;
  }
}
</file>

<file path="src/pages/Home/sections/Earn/EarnSection.tsx">
import { forwardRef } from 'react';
import { ARCAO } from '@arcaogaming/project-links';
import './EarnSection.css';
import CoinFlowAnimation from '../../../../shared/components/CoinFlowAnimations/Earn/CoinFlowAnimation';

interface EarnSectionProps {
  className?: string;
}

const EarnSection = forwardRef<HTMLElement, EarnSectionProps>(
  ({ className = '' }, ref) => {
    const scrollToMint = () => {
      const mintSection = document.getElementById('mint');
      if (mintSection) {
        mintSection.scrollIntoView({ behavior: 'smooth' });
      }
    };

    const handlePlayClick = () => {
      window.open(ARCAO.discord, '_blank');
    };

    const handleAmbassadorClick = () => {
      window.open(ARCAO.ambassadorProgramSignup, '_blank');
    };

    return (
      <section 
        ref={ref}
        id="earn" 
        className={`earn-section ${className}`}
      >
        {/* Animated background layers */}
        <div className="earn-bg-layer-1"></div>
        <div className="earn-bg-layer-2"></div>
        <div className="earn-bg-layer-3"></div>
        
        {/* Grid overlay */}
        <div className="earn-grid-overlay"></div>
        
        {/* Coin Elements */}
        <div className="coin-element coin-stack-1">🪙</div>
        <div className="coin-element coin-stack-2">💰</div>
        <div className="coin-element coin-rain-1">🪙</div>
        <div className="coin-element coin-rain-2">💰</div>
        
        {/* Floating particles */}
        <div className="earn-particles">
          <div className="earn-particle-1"></div>
          <div className="earn-particle-2"></div>
          <div className="earn-particle-3"></div>
          <div className="earn-particle-4"></div>
          <div className="earn-particle-5"></div>
          <div className="earn-particle-6"></div>
          
          {/* Geometric shapes */}
          <div className="earn-shape-1"></div>
          <div className="earn-shape-2"></div>
          <div className="earn-shape-3"></div>
          <div className="earn-shape-4"></div>
        </div>

        <div className="earn-content">
          <h2 className="earn-title">EARN</h2>
          
          {/* Coin Flow Animation */}
          <CoinFlowAnimation />
          
          <p className="earn-description">
            Multiple ways to earn $GAME tokens and valuable rewards. Stake, play, and stream 
            your way to financial freedom in the gaming ecosystem.
          </p>

          <div className="earn-rewards">
            {/* Stake Card - Green Theme */}
            <div className="earn-card earn-card-stake" onClick={scrollToMint}>
              <div className="earn-card-header">
                <div className="earn-card-icon">💰</div>
                <h3 className="earn-card-title">Stake</h3>
              </div>
              <div className="earn-card-amount">$2M+ Deposited</div>
              <p className="earn-card-description">
                Stake to earn. $2M in fair launch deposits. Stake your $GAME tokens and earn passive income while securing the network.
              </p>
              <div className="earn-card-glow"></div>
            </div>
            
            {/* Play Card - Blue Theme */}
            <div className="earn-card earn-card-play" onClick={handlePlayClick}>
              <div className="earn-card-header">
                <div className="earn-card-icon">🎮</div>
                <h3 className="earn-card-title">Play</h3>
              </div>
              <div className="earn-card-amount">Unlimited</div>
              <p className="earn-card-description">
                Play to earn. Gain valuable in-game assets through gameplay. The more you play, the more you earn. Become eligible for exclusive airdrops and rare rewards.
              </p>
              <div className="earn-card-glow"></div>
            </div>
            
            {/* Stream Card - Purple Theme */}
            <div className="earn-card earn-card-stream" onClick={handleAmbassadorClick}>
              <div className="earn-card-header">
                <div className="earn-card-icon">📺</div>
                <h3 className="earn-card-title">Stream</h3>
              </div>
              <div className="earn-card-amount">Ambassador</div>
              <p className="earn-card-description">
                Stream & record to earn. Join the $GAME Ambassador Program. Stream gameplay, create content, and earn rewards while building the gaming community.
              </p>
              <div className="earn-card-hover-overlay">
                <span className="earn-card-cta">Apply Now</span>
              </div>
              <div className="earn-card-glow"></div>
            </div>
          </div>

        </div>
      </section>
    );
  }
);

EarnSection.displayName = 'EarnSection';

export default EarnSection;
</file>

<file path="src/pages/Home/sections/index.ts">
export { PlaySection } from './Play';
export { OwnSection } from './Own';
export { CreateSection } from './Create';
export { MintSection } from './Mint';
export { EarnSection } from './Earn';
export { FooterSection } from './Footer';
</file>

<file path="src/pages/Home/sections/Mint/MintSection.css">
/* Mint Section Styles - NFT/Blockchain Theme */
.mint-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.mint-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Mint Section Animated Backgrounds - Treasure/Blockchain Theme */
.mint-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(5, 46, 22, 0.4) 0%, 
    rgba(34, 197, 94, 0.3) 50%, 
    rgba(5, 150, 105, 0.4) 100%);
}

.mint-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 70% 30%, 
    rgba(34, 197, 94, 0.2) 0%, 
    transparent 60%);
}

.mint-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Treasure Chest Elements */
.treasure-element {
  position: absolute;
  font-size: 1.8rem;
  opacity: 0.5;
  pointer-events: none;
}

.treasure-chest-1 {
  top: 20%;
  left: 15%;
  animation: treasure-glow 4s ease-in-out infinite;
  animation-delay: 0s;
}

.treasure-chest-2 {
  bottom: 25%;
  right: 20%;
  animation: treasure-bounce 3s ease-in-out infinite;
  animation-delay: 1s;
}

.treasure-gem-1 {
  top: 60%;
  left: 80%;
  animation: gem-sparkle 2.5s ease-in-out infinite;
  animation-delay: 0.5s;
}

.treasure-gem-2 {
  top: 30%;
  right: 10%;
  animation: gem-float 3.5s ease-in-out infinite;
  animation-delay: 1.5s;
}

.treasure-coin-1 {
  bottom: 60%;
  left: 10%;
  animation: coin-spin 2s linear infinite;
  animation-delay: 2s;
}

.mint-grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(34, 197, 94, 0.03) 1px, transparent 1px),
    linear-gradient(90deg, rgba(34, 197, 94, 0.03) 1px, transparent 1px);
  background-size: 80px 80px;
  opacity: 0.4;
}

/* Mint Section Floating Particles - Gem/Treasure Theme */
.mint-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.mint-particle-1 {
  position: absolute;
  top: 15%;
  left: 20%;
  width: 12px;
  height: 12px;
  background: linear-gradient(45deg, rgba(34, 197, 94, 0.9), rgba(16, 185, 129, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 25px rgba(34, 197, 94, 0.7);
  animation: treasure-float 4s ease-in-out infinite;
}

.mint-particle-2 {
  position: absolute;
  top: 70%;
  right: 15%;
  width: 8px;
  height: 8px;
  background: linear-gradient(45deg, rgba(5, 150, 105, 0.9), rgba(34, 197, 94, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 20px rgba(5, 150, 105, 0.7);
  animation: treasure-float 3s ease-in-out infinite reverse;
}

.mint-particle-3 {
  position: absolute;
  bottom: 40%;
  left: 75%;
  width: 10px;
  height: 10px;
  background: linear-gradient(45deg, rgba(16, 185, 129, 0.9), rgba(5, 150, 105, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 22px rgba(16, 185, 129, 0.7);
  animation: treasure-float 3.5s ease-in-out infinite;
}

.mint-particle-4 {
  position: absolute;
  top: 45%;
  left: 10%;
  width: 6px;
  height: 6px;
  background: linear-gradient(45deg, rgba(52, 211, 153, 0.9), rgba(34, 197, 94, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 18px rgba(52, 211, 153, 0.7);
  animation: treasure-float 2.5s ease-in-out infinite;
}

.mint-particle-5 {
  position: absolute;
  bottom: 20%;
  right: 60%;
  width: 14px;
  height: 14px;
  background: linear-gradient(45deg, rgba(34, 197, 94, 0.8), rgba(16, 185, 129, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 28px rgba(34, 197, 94, 0.6);
  animation: treasure-float 4.5s ease-in-out infinite reverse;
}

/* Mint Section Geometric Shapes - Blockchain/Diamond Theme */
.mint-shape-1 {
  position: absolute;
  top: 20%;
  right: 20%;
  width: 36px;
  height: 36px;
  background: linear-gradient(45deg, transparent, rgba(34, 197, 94, 0.3));
  border: 2px solid rgba(34, 197, 94, 0.5);
  transform: rotate(45deg);
  animation: spin 15s linear infinite;
}

.mint-shape-2 {
  position: absolute;
  bottom: 25%;
  left: 15%;
  width: 24px;
  height: 24px;
  border: 2px solid rgba(5, 150, 105, 0.5);
  border-radius: 50%;
  animation: pulse 3s ease-in-out infinite;
}

.mint-shape-3 {
  position: absolute;
  top: 60%;
  right: 80%;
  width: 18px;
  height: 18px;
  background: linear-gradient(45deg, 
    rgba(34, 197, 94, 0.4), 
    rgba(5, 150, 105, 0.4));
  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
  animation: bounce 2s infinite;
  animation-delay: 0.7s;
}

.mint-shape-4 {
  position: absolute;
  top: 30%;
  left: 5%;
  width: 20px;
  height: 20px;
  border: 1px solid rgba(52, 211, 153, 0.6);
  transform: rotate(30deg);
  animation: ping 3s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Mint Section Content */
.mint-content {
  position: relative;
  z-index: 10;
  max-width: 1536px;
  margin: 0 auto;
  padding: 0 24px;
}

.mint-title {
  font-size: clamp(3rem, 8vw, 7rem);
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(90deg, 
    rgba(34, 197, 94, 1) 0%, 
    rgba(5, 150, 105, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: treasure-glow 3s ease-in-out infinite;
  text-align: center;
}

.mint-description {
  font-size: 1.25rem;
  color: #d1d5db;
  max-width: 768px;
  margin: 0 auto 32px;
  line-height: 1.75;
  text-align: center;
}

/* Bitcoin Link Styling - Shiny/Golden effect */
.bitcoin-link {
  color: inherit;
  text-decoration: none;
  background: linear-gradient(90deg, 
    rgba(255, 215, 0, 0.9) 0%, 
    rgba(255, 193, 7, 0.9) 25%,
    rgba(255, 235, 59, 1) 50%,
    rgba(255, 193, 7, 0.9) 75%,
    rgba(255, 215, 0, 0.9) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
  transition: all 0.3s ease;
  cursor: pointer;
  animation: bitcoin-shine 3s ease-in-out infinite;
}

.bitcoin-link:hover {
  filter: brightness(1.3) drop-shadow(0 0 8px rgba(255, 215, 0, 0.6));
  transform: scale(1.05);
}

/* AO Link Styling - Green theme to match section */
.ao-link {
  color: inherit;
  text-decoration: none;
  background: linear-gradient(90deg, 
    rgba(34, 197, 94, 0.9) 0%, 
    rgba(5, 150, 105, 0.9) 25%,
    rgba(16, 185, 129, 1) 50%,
    rgba(5, 150, 105, 0.9) 75%,
    rgba(34, 197, 94, 0.9) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
  transition: all 0.3s ease;
  cursor: pointer;
}

.ao-link:hover {
  filter: brightness(1.3) drop-shadow(0 0 8px rgba(34, 197, 94, 0.6));
  transform: scale(1.05);
}

/* Mint Headliners */
.mint-headliners {
  display: flex;
  justify-content: center;
  gap: 64px;
  margin-bottom: 64px;
  flex-wrap: wrap;
}

.mint-headline {
  text-align: center;
  padding: 24px;
  background: rgba(15, 23, 42, 0.6);
  border: 2px solid rgba(34, 197, 94, 0.3);
  border-radius: 20px;
  backdrop-filter: blur(16px);
  min-width: 200px;
  transition: all 0.3s ease;
}

.mint-headline:hover {
  border-color: rgba(34, 197, 94, 0.6);
  transform: translateY(-4px);
  box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.3);
}

.mint-headline-value {
  font-size: 2.5rem;
  font-weight: 900;
  background: linear-gradient(90deg, 
    rgba(34, 197, 94, 1) 0%, 
    rgba(5, 150, 105, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 8px;
  animation: treasure-glow 3s ease-in-out infinite;
}

.mint-headline-label {
  color: #9ca3af;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

@media (max-width: 768px) {
  .mint-headliners {
    gap: 32px;
  }
  
  .mint-headline {
    min-width: 160px;
    padding: 20px;
  }
  
  .mint-headline-value {
    font-size: 2rem;
  }
}

/* Mint Layout */
.mint-layout {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 64px;
  align-items: center;
}

@media (max-width: 768px) {
  .mint-layout {
    grid-template-columns: 1fr;
    gap: 48px;
  }
}

/* Mint Features */
.mint-features {
  display: flex;
  flex-direction: column;
  gap: 32px;
}

.mint-feature {
  display: flex;
  align-items: flex-start;
  gap: 20px;
}

.mint-feature-icon {
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 1) 0%, 
    rgba(5, 150, 105, 1) 100%);
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  flex-shrink: 0;
  box-shadow: 0 8px 25px -8px rgba(34, 197, 94, 0.4);
}

.mint-feature-content h3 {
  font-size: 1.25rem;
  font-weight: 700;
  margin-bottom: 8px;
  color: rgba(34, 197, 94, 1);
}

.mint-feature:nth-child(2) .mint-feature-content h3 {
  color: rgba(5, 150, 105, 1);
}

.mint-feature:nth-child(3) .mint-feature-content h3 {
  color: rgba(16, 185, 129, 1);
}

.mint-feature-content p {
  color: #9ca3af;
  line-height: 1.6;
}

/* Token Showcase Card */
.mint-showcase {
  position: relative;
}

.mint-token-card {
  position: relative;
  padding: 32px;
  background: linear-gradient(135deg, 
    rgba(15, 23, 42, 0.8) 0%, 
    rgba(30, 41, 59, 0.8) 100%);
  border: 2px solid rgba(34, 197, 94, 0.3);
  border-radius: 24px;
  backdrop-filter: blur(16px);
  text-align: center;
  overflow: hidden;
  transition: all 0.4s ease;
}

.mint-token-card::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.1) 0%, 
    rgba(5, 150, 105, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.mint-token-card:hover::before {
  opacity: 1;
}

.mint-token-card:hover {
  transform: translateY(-8px);
  border-color: rgba(34, 197, 94, 0.6);
  box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.4);
}

.mint-token-logo {
  width: 128px;
  height: 128px;
  margin: 0 auto 24px;
  background: linear-gradient(135deg, #ecf0f1, #bdc3c7);
  border: 3px solid #34495e;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  z-index: 2;
  padding: 32px;
  box-shadow: 
    0 0 25px rgba(189, 195, 199, 0.8),
    inset 0 0 20px rgba(52, 73, 94, 0.3);
  overflow: hidden;
  animation: token-underglow-pulse 8s ease-in-out infinite;
}


.token-logo {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.mint-token-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  margin-bottom: 8px;
  position: relative;
  z-index: 2;
}

.mint-token-supply {
  color: #9ca3af;
  margin-bottom: 24px;
  position: relative;
  z-index: 2;
}

.mint-token-stats {
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-bottom: 24px;
  position: relative;
  z-index: 2;
}

.stat {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background: rgba(15, 23, 42, 0.5);
  border-radius: 8px;
  border: 1px solid rgba(34, 197, 94, 0.2);
}

.stat-label {
  color: #9ca3af;
  font-size: 0.9rem;
}

.stat-value {
  color: rgba(34, 197, 94, 1);
  font-weight: 600;
}

/* Contract Verification Section */
.contract-verification-section {
  margin: 16px 0;
  position: relative;
  z-index: 2;
  display: flex;
  justify-content: center;
}

.contract-info {
  background: rgba(15, 23, 42, 0.6);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 12px;
  padding: 18px 23px;
  backdrop-filter: blur(8px);
  transition: all 0.3s ease;
  width: 100%;
  max-width: 345px;
}

.contract-info:hover {
  border-color: rgba(34, 197, 94, 0.4);
  background: rgba(15, 23, 42, 0.8);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(34, 197, 94, 0.2);
}

.contract-label {
  display: block;
  color: #d1d5db;
  font-size: 0.875rem;
  margin-bottom: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  text-align: center;
}

.contract-actions {
  display: flex;
  gap: 8px;
  margin-bottom: 8px;
  justify-content: center;
}

.contract-address-btn {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 16px;
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: 12px;
  color: rgba(34, 197, 94, 1);
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: monospace;
  font-size: 0.9rem;
  font-weight: 600;
}

.contract-address-btn:hover {
  border-color: rgba(34, 197, 94, 0.6);
  background: rgba(34, 197, 94, 0.15);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);
}

.contract-address-text {
  flex: 1;
  text-align: left;
}

.copy-icon {
  font-size: 1rem;
  opacity: 0.8;
  transition: all 0.3s ease;
  margin-left: 8px;
}

.contract-address-btn:hover .copy-icon {
  opacity: 1;
  transform: scale(1.1);
}

.branta-verify-wrapper {
  flex: 0 1 auto;
  min-width: 0;
  max-width: 100%;
}

.branta-verify-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 12px 16px;
  background: rgba(180, 145, 69, 0.1);
  border: 1px solid rgba(180, 145, 69, 0.3);
  border-radius: 12px;
  color: rgba(180, 145, 69, 1);
  text-decoration: none;
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
  width: 100%;
  box-sizing: border-box;
}

.branta-verify-btn:hover {
  border-color: rgba(180, 145, 69, 0.6);
  background: rgba(180, 145, 69, 0.15);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(180, 145, 69, 0.2);
  color: rgba(180, 145, 69, 1);
  text-decoration: none;
}

.branta-logo {
  height: 14px;
  width: auto;
  filter: brightness(0) saturate(100%) invert(70%) sepia(50%) saturate(500%) hue-rotate(25deg) brightness(95%) contrast(90%);
  transition: transform 0.3s ease;
}

.branta-verify-btn:hover .branta-logo {
  transform: scale(1.1);
}

.copy-success {
  display: block;
  color: rgba(34, 197, 94, 1);
  font-size: 0.8rem;
  font-weight: 600;
  text-align: center;
  margin-top: 8px;
  animation: fade-in-out 2s ease-in-out;
}

/* Botega Buy Section */
.botega-buy-section {
  margin: 16px 0;
  position: relative;
  z-index: 2;
  display: flex;
  justify-content: center;
}

.botega-buy-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 18px 23px;
  background: linear-gradient(135deg, 
    rgba(99, 102, 241, 0.1) 0%, 
    rgba(139, 92, 246, 0.1) 100%);
  border: 1px solid rgba(99, 102, 241, 0.3);
  border-radius: 12px;
  color: rgba(99, 102, 241, 1);
  text-decoration: none;
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);
  width: 100%;
  max-width: 345px;
}

.botega-buy-btn:hover {
  border-color: rgba(99, 102, 241, 0.6);
  background: linear-gradient(135deg, 
    rgba(99, 102, 241, 0.15) 0%, 
    rgba(139, 92, 246, 0.15) 100%);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(99, 102, 241, 0.3);
  color: rgba(99, 102, 241, 1);
  text-decoration: none;
}

.botega-logo {
  height: 16px;
  width: auto;
  transition: transform 0.3s ease;
}

.botega-buy-btn:hover .botega-logo {
  transform: scale(1.05);
}

/* Responsive Design */
@media (max-width: 768px) {
  .mint-content {
    padding: 0 16px;
  }
  
  .contract-info,
  .botega-buy-btn,
  .mint-token-button {
    max-width: 100%;
    margin: 0 auto;
  }
}

@media (max-width: 640px) {
  .contract-actions {
    flex-direction: column;
    gap: 12px;
  }
  
  .contract-address-btn,
  .branta-verify-btn {
    width: 100%;
    justify-content: center;
    min-width: unset;
  }
  
  .contract-address-text {
    text-align: center;
  }
}

@media (max-width: 480px) {
  .mint-content {
    padding: 0 12px;
  }
  
  .contract-info,
  .botega-buy-btn,
  .mint-token-button {
    padding: 16px 20px;
    font-size: 0.85rem;
  }
  
  .mint-token-card {
    padding: 24px 16px;
  }
}
.mint-link {
  text-decoration: none;
}
/* Mint Token Button Section */
.mint-token-button-section {
  margin: 8px 0;
  position: relative;
  z-index: 2;
  display: flex;
  justify-content: center;
}

.mint-token-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 20px 25px;
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.1) 0%, 
    rgba(5, 150, 105, 0.1) 100%);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: 12px;
  color: rgba(34, 197, 94, 1);
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);
  width: 100%;
  max-width: 345px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.mint-token-button:hover {
  border-color: rgba(34, 197, 94, 0.6);
  background: linear-gradient(135deg, 
    rgba(34, 197, 94, 0.15) 0%, 
    rgba(5, 150, 105, 0.15) 100%);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(34, 197, 94, 0.3);
  color: rgba(34, 197, 94, 1);
}

/* Animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes treasure-glow {
  0%, 100% {
    opacity: 1;
    filter: brightness(1);
  }
  50% {
    opacity: 0.8;
    filter: brightness(1.2);
  }
}

@keyframes treasure-float {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
  }
  33% {
    transform: translateY(-15px) rotate(120deg);
  }
  66% {
    transform: translateY(-8px) rotate(240deg);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.7;
    transform: scale(1.1);
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Treasure Animation Keyframes */
@keyframes treasure-bounce {
  0%, 100% {
    transform: translateY(0px) scale(1);
  }
  50% {
    transform: translateY(-20px) scale(1.1);
  }
}

@keyframes gem-sparkle {
  0%, 100% {
    transform: scale(1) rotate(0deg);
    opacity: 0.5;
  }
  25% {
    transform: scale(1.3) rotate(90deg);
    opacity: 0.8;
  }
  50% {
    transform: scale(1.1) rotate(180deg);
    opacity: 1;
  }
  75% {
    transform: scale(1.2) rotate(270deg);
    opacity: 0.7;
  }
}

@keyframes gem-float {
  0%, 100% {
    transform: translateY(0px) translateX(0px);
  }
  33% {
    transform: translateY(-15px) translateX(10px);
  }
  66% {
    transform: translateY(-5px) translateX(-8px);
  }
}

@keyframes coin-spin {
  0% {
    transform: rotateY(0deg) scale(1);
  }
  50% {
    transform: rotateY(180deg) scale(1.2);
  }
  100% {
    transform: rotateY(360deg) scale(1);
  }
}

@keyframes bitcoin-shine {
  0%, 100% {
    background-position: -200% center;
  }
  50% {
    background-position: 200% center;
  }
}

@keyframes fade-in-out {
  0% {
    opacity: 0;
    transform: translateY(-50%) scale(0.8);
  }
  20%, 80% {
    opacity: 1;
    transform: translateY(-50%) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateY(-50%) scale(0.8);
  }
}

/* Token Underglow Pulse Animation - Subtle pulse with color changes on low points */
@keyframes token-underglow-pulse {
  /* Blue phase - high pulse */
  0% {
    box-shadow: 
      0 0 15px rgba(52, 152, 219, 0.4),
      0 0 30px rgba(52, 152, 219, 0.2),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Blue phase - low pulse (color change point) */
  12.5% {
    box-shadow: 
      0 0 8px rgba(52, 152, 219, 0.2),
      0 0 15px rgba(52, 152, 219, 0.1),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Green phase - high pulse */
  25% {
    box-shadow: 
      0 0 15px rgba(39, 174, 96, 0.4),
      0 0 30px rgba(39, 174, 96, 0.2),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Green phase - low pulse (color change point) */
  37.5% {
    box-shadow: 
      0 0 8px rgba(39, 174, 96, 0.2),
      0 0 15px rgba(39, 174, 96, 0.1),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Gold phase - high pulse */
  50% {
    box-shadow: 
      0 0 15px rgba(241, 196, 15, 0.4),
      0 0 30px rgba(241, 196, 15, 0.2),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Gold phase - low pulse (color change point) */
  62.5% {
    box-shadow: 
      0 0 8px rgba(241, 196, 15, 0.2),
      0 0 15px rgba(241, 196, 15, 0.1),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Purple phase - high pulse */
  75% {
    box-shadow: 
      0 0 15px rgba(142, 68, 173, 0.4),
      0 0 30px rgba(142, 68, 173, 0.2),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Purple phase - low pulse (color change point) */
  87.5% {
    box-shadow: 
      0 0 8px rgba(142, 68, 173, 0.2),
      0 0 15px rgba(142, 68, 173, 0.1),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
  
  /* Back to Blue - high pulse */
  100% {
    box-shadow: 
      0 0 15px rgba(52, 152, 219, 0.4),
      0 0 30px rgba(52, 152, 219, 0.2),
      inset 0 0 20px rgba(52, 73, 94, 0.3);
  }
}
</file>

<file path="src/pages/Home/sections/Mint/MintSection.tsx">
import { forwardRef, useState } from 'react';
import { AO } from '@arcaogaming/project-links';
import { CONTRACT_ADDRESSES, EXTERNAL_LINKS } from '../../../../shared/constants';
import './MintSection.css';
import CoinFlowAnimation from '../../../../shared/components/CoinFlowAnimations/Mint/CoinFlowAnimation';
import { Link } from 'react-router-dom';

interface MintSectionProps {
  className?: string;
}

const MintSection = forwardRef<HTMLElement, MintSectionProps>(
  ({ className = '' }, ref) => {
    const [copySuccess, setCopySuccess] = useState(false);

    const handleCopyAddress = async () => {
      try {
        await navigator.clipboard.writeText(CONTRACT_ADDRESSES.GAME_TOKEN);
        setCopySuccess(true);
        setTimeout(() => setCopySuccess(false), 2000);
      } catch (err) {
        console.error('Failed to copy address:', err);
      }
    };

    const formatAddress = (address: string) => {
      return `${address.slice(0, 3)}...${address.slice(-3)}`;
    };
    return (
      <section 
        ref={ref}
        id="mint" 
        className={`mint-section ${className}`}
      >
        {/* Animated background layers */}
        <div className="mint-bg-layer-1"></div>
        <div className="mint-bg-layer-2"></div>
        <div className="mint-bg-layer-3"></div>
        
        {/* Grid overlay */}
        <div className="mint-grid-overlay"></div>
        
        {/* Treasure Elements */}
        <div className="treasure-element treasure-chest-1">🏴‍☠️</div>
        <div className="treasure-element treasure-chest-2">💰</div>
        <div className="treasure-element treasure-gem-1">💎</div>
        <div className="treasure-element treasure-gem-2">💍</div>
        <div className="treasure-element treasure-coin-1">🪙</div>

        {/* Floating particles */}
        <div className="mint-particles">
          <div className="mint-particle-1"></div>
          <div className="mint-particle-2"></div>
          <div className="mint-particle-3"></div>
          <div className="mint-particle-4"></div>
          <div className="mint-particle-5"></div>
          
          {/* Geometric shapes */}
          <div className="mint-shape-1"></div>
          <div className="mint-shape-2"></div>
          <div className="mint-shape-3"></div>
          <div className="mint-shape-4"></div>
        </div>

        <div className="mint-content">
          <h2 className="mint-title">MINT $GAME</h2>
          
          {/* Coin Flow Animation */}
          <CoinFlowAnimation />
          <p className="mint-description">
            Join the fair launch of $GAME token with the same release rate as <a href="https://bitcoin.org" target="_blank" rel="noopener noreferrer" className="bitcoin-link">Bitcoin</a>. 
            Secure your position in the future of gaming finance.
          </p>

          <div className="mint-headliners">
            <div className="mint-headline">
              <div className="mint-headline-value">$2M+</div>
              <div className="mint-headline-label">Fair Launch Deposits</div>
            </div>
            <div className="mint-headline">
              <div className="mint-headline-value">Bitcoin Model</div>
              <div className="mint-headline-label">Release Rate</div>
            </div>
          </div>

          <div className="mint-layout">
            <div className="mint-features">
              <div className="mint-feature">
                <div className="mint-feature-icon">⚖️</div>
                <div className="mint-feature-content">
                  <h3>Fair Launch</h3>
                  <p>No pre-mine, no insider allocations. Everyone gets the same opportunity to participate in the $GAME token launch.</p>
                </div>
              </div>
              
              <div className="mint-feature">
                <div className="mint-feature-icon">🔒</div>
                <div className="mint-feature-content">
                  <h3>Secure Minting</h3>
                  <p>Built on <a href={AO.website} target="_blank" rel="noopener noreferrer" className="ao-link">Arweave AO fairlaunch</a> with proven security and decentralization for maximum trust and reliability.</p>
                </div>
              </div>
              
              <div className="mint-feature">
                <div className="mint-feature-icon">💰</div>
                <div className="mint-feature-content">
                  <h3>Gaming Utility</h3>
                  <p>Use $GAME tokens across the entire gaming ecosystem for staking, rewards, governance, and in-game purchases.</p>
                </div>
              </div>
            </div>

            <div className="mint-showcase">
              <div className="mint-token-card">
                <div className="mint-token-logo">
                  <img src="/logo-black-transparent.png" alt="$GAME Token" className="token-logo" />
                </div>
                <h3 className="mint-token-title">$GAME Token</h3>
                <p className="mint-token-supply">Fair Launch • Deflationary</p>
                
                {/* Contract Verification Section */}
                <div className="contract-verification-section">
                  <div className="contract-info">
                    <span className="contract-label">Contract Address</span>
                    <div className="contract-actions">
                      <button 
                        className="contract-address-btn"
                        onClick={handleCopyAddress}
                        title="Click to copy full address"
                      >
                        <span className="contract-address-text">
                          {formatAddress(CONTRACT_ADDRESSES.GAME_TOKEN)}
                        </span>
                        <span className="copy-icon">📋</span>
                      </button>
                      <div className="branta-verify-wrapper">
                        <a 
                          href={EXTERNAL_LINKS.BRANTA_VERIFY}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="branta-verify-btn"
                          title="Verify contract on Branta"
                        >
                          <span>Verify</span>
                          <img src="/branta-logo-white.svg" alt="Branta" className="branta-logo" />
                        </a>
                      </div>
                    </div>
                    {copySuccess && <span className="copy-success">Address copied to clipboard!</span>}
                  </div>
                </div>

                {/* Botega Buy Section */}
                <div className="botega-buy-section">
                  <a 
                    href={EXTERNAL_LINKS.BOTEGA_BUY}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="botega-buy-btn"
                    title="Buy $GAME on Botega"
                  >
                    <span>Buy $GAME on</span>
                    <img src="/botega-logo.png" alt="Botega" className="botega-logo" />
                  </a>
                </div>
                <Link to="/mint" className="mint-link">
                  <div className="mint-token-button-section">
                    <div className="mint-token-button">
                      <span>⚡</span>
                      <span>MINT $GAME</span>
                    </div>
                  </div>
                </Link>
              </div>
            </div>
          </div>
        </div>
      </section>
    );
  }
);

MintSection.displayName = 'MintSection';

export default MintSection;
</file>

<file path="src/pages/Home/sections/Play/PlaySection.css">
/* Play Section Styles */
.hero-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.hero-section.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Animated Backgrounds */
.hero-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(168, 85, 247, 0.3) 0%, 
    rgba(59, 130, 246, 0.2) 50%, 
    rgba(6, 182, 212, 0.3) 100%);
}

.hero-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 50% 50%, 
    rgba(120, 119, 198, 0.15) 0%, 
    transparent 70%);
}

.hero-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Game Characters Animation */
.game-character {
  position: absolute;
  font-size: 2rem;
  opacity: 0.6;
  pointer-events: none;
}

.character-runner-1 {
  top: 20%;
  left: -5%;
  animation: chase-horizontal 15s linear infinite;
  animation-delay: 0s;
}

.character-chaser-1 {
  top: 20%;
  left: -8%;
  animation: chase-horizontal 15s linear infinite;
  animation-delay: 0.5s;
}

.character-runner-2 {
  top: 60%;
  right: -5%;
  animation: chase-horizontal-reverse 18s linear infinite;
  animation-delay: 2s;
}

.character-chaser-2 {
  top: 60%;
  right: -8%;
  animation: chase-horizontal-reverse 18s linear infinite;
  animation-delay: 2.5s;
}

.character-runner-3 {
  top: 80%;
  left: -5%;
  animation: chase-diagonal 20s linear infinite;
  animation-delay: 4s;
}

.character-chaser-3 {
  top: 80%;
  left: -8%;
  animation: chase-diagonal 20s linear infinite;
  animation-delay: 4.5s;
}

.character-flying-1 {
  top: 10%;
  right: -5%;
  animation: fly-across 12s linear infinite;
  animation-delay: 1s;
}

.character-flying-2 {
  top: 40%;
  left: -5%;
  animation: fly-wave 16s linear infinite;
  animation-delay: 3s;
}

.grid-overlay {
  position: absolute;
  inset: 0;
  background-image: 
    linear-gradient(rgba(255, 255, 255, 0.02) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.02) 1px, transparent 1px);
  background-size: 50px 50px;
  opacity: 0.3;
}

/* Floating Particles */
.floating-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.particle {
  position: absolute;
  border-radius: 50%;
}

.particle-1 {
  top: 25%;
  left: 25%;
  width: 12px;
  height: 12px;
  background-color: var(--gaming-purple);
  box-shadow: 0 0 20px rgba(168, 85, 247, 0.5);
  animation: pulse 2s ease-in-out infinite;
}

.particle-2 {
  top: 75%;
  right: 25%;
  width: 8px;
  height: 8px;
  background-color: var(--gaming-cyan);
  box-shadow: 0 0 16px rgba(6, 182, 212, 0.5);
  animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
}

.particle-3 {
  top: 50%;
  left: 75%;
  width: 10px;
  height: 10px;
  background-color: var(--gaming-pink);
  box-shadow: 0 0 18px rgba(236, 72, 153, 0.5);
  animation: pulse 2s ease-in-out infinite;
}

.particle-4 {
  top: 33%;
  right: 33%;
  width: 6px;
  height: 6px;
  background-color: var(--gaming-yellow);
  box-shadow: 0 0 14px rgba(251, 191, 36, 0.5);
  animation: bounce 1s infinite;
}

.particle-5 {
  bottom: 25%;
  left: 33%;
  width: 8px;
  height: 8px;
  background-color: var(--gaming-emerald);
  box-shadow: 0 0 16px rgba(5, 150, 105, 0.5);
  animation: pulse 2s ease-in-out infinite;
}

/* Geometric Shapes */
.geometric-shape-1 {
  position: absolute;
  top: 20%;
  right: 20%;
  width: 32px;
  height: 32px;
  background: linear-gradient(45deg, rgba(168, 85, 247, 0.4), rgba(236, 72, 153, 0.4));
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  animation: pulse 4s ease-in-out infinite;
}

.geometric-shape-2 {
  position: absolute;
  bottom: 33%;
  left: 20%;
  width: 24px;
  height: 24px;
  border: 1px solid rgba(6, 182, 212, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

.geometric-shape-3 {
  position: absolute;
  top: 66%;
  right: 66%;
  width: 16px;
  height: 16px;
  background: linear-gradient(45deg, 
    rgba(236, 72, 153, 0.2), 
    rgba(168, 85, 247, 0.2));
  transform: rotate(12deg);
  animation: bounce 1s infinite;
  animation-delay: 1s;
}

/* Hero Content */
.hero-content {
  position: relative;
  z-index: 10;
  text-align: center;
  max-width: 1152px;
  margin: 0 auto;
  padding: 0 24px;
}

.hero-title {
  font-size: clamp(3rem, 8vw, 6rem);
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(90deg, 
    var(--gaming-purple) 0%, 
    var(--gaming-pink) 50%, 
    var(--gaming-cyan) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: pulse 3s ease-in-out infinite;
}

.hero-subtitle {
  font-size: clamp(1.25rem, 3vw, 1.5rem);
  color: #d1d5db;
  margin-bottom: 16px;
  font-weight: 300;
}

.hero-description {
  font-size: 1.125rem;
  color: #9ca3af;
  max-width: 768px;
  margin: 0 auto 48px;
  line-height: 1.75;
}

/* Video Section */
.hero-video {
  margin: 48px auto;
}

@media (max-width: 768px) {
  .hero-video {
    margin: 32px auto;
  }
}



/* Animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

/* Game Character Animations */
@keyframes chase-horizontal {
  0% {
    left: -10%;
    transform: scaleX(1);
  }
  100% {
    left: 110%;
    transform: scaleX(1);
  }
}

@keyframes chase-horizontal-reverse {
  0% {
    right: -10%;
    transform: scaleX(-1);
  }
  100% {
    right: 110%;
    transform: scaleX(-1);
  }
}

@keyframes chase-diagonal {
  0% {
    left: -10%;
    top: 80%;
    transform: scaleX(1);
  }
  50% {
    left: 50%;
    top: 40%;
    transform: scaleX(1);
  }
  100% {
    left: 110%;
    top: 10%;
    transform: scaleX(1);
  }
}

@keyframes fly-across {
  0% {
    right: -10%;
    transform: scaleX(-1) translateY(0px);
  }
  25% {
    transform: scaleX(-1) translateY(-10px);
  }
  50% {
    transform: scaleX(-1) translateY(5px);
  }
  75% {
    transform: scaleX(-1) translateY(-8px);
  }
  100% {
    right: 110%;
    transform: scaleX(-1) translateY(0px);
  }
}

@keyframes fly-wave {
  0% {
    left: -10%;
    transform: translateY(0px);
  }
  25% {
    transform: translateY(-20px);
  }
  50% {
    transform: translateY(10px);
  }
  75% {
    transform: translateY(-15px);
  }
  100% {
    left: 110%;
    transform: translateY(0px);
  }
}
</file>

<file path="src/pages/Home/sections/Play/PlaySection.tsx">
import { forwardRef } from 'react';
import { VideoCarousel, StatsSection, HeroButtons, CoinFlowAnimation } from './components';
import './PlaySection.css';

interface PlaySectionProps {
  className?: string;
}

const PlaySection = forwardRef<HTMLElement, PlaySectionProps>(
  ({ className = '' }, ref) => {

    return (
      <section 
        ref={ref}
        id="play" 
        className={`hero-section ${className}`}
      >
        {/* Animated background with multiple layers */}
        <div className="hero-bg-layer-1"></div>
        <div className="hero-bg-layer-2"></div>
        <div className="hero-bg-layer-3"></div>
        
        {/* Animated Game Characters */}
        <div className="game-character character-runner-1">🏃‍♂️</div>
        <div className="game-character character-chaser-1">👹</div>
        <div className="game-character character-runner-2">🧙‍♀️</div>
        <div className="game-character character-chaser-2">🐉</div>
        <div className="game-character character-runner-3">🦸‍♂️</div>
        <div className="game-character character-chaser-3">👾</div>
        <div className="game-character character-flying-1">🚁</div>
        <div className="game-character character-flying-2">🦅</div>

        {/* Enhanced floating particles */}
        <div className="floating-particles">
          <div className="particle particle-1"></div>
          <div className="particle particle-2"></div>
          <div className="particle particle-3"></div>
          <div className="particle particle-4"></div>
          <div className="particle particle-5"></div>
          
          {/* Floating geometric shapes */}
          <div className="geometric-shape-1"></div>
          <div className="geometric-shape-2"></div>
          <div className="geometric-shape-3"></div>
        </div>
        
        {/* Grid overlay for tech feel */}
        <div className="grid-overlay"></div>

        <div className="hero-content">
          <div>
            <h1 className="hero-title">$GAME</h1>
            
            {/* Coin Flow Animation */}
            <CoinFlowAnimation />
            
            <p className="hero-subtitle">THE FUTURE OF DECENTRALIZED GAMING</p>
            <p className="hero-description">
              Experience next-generation blockchain gaming where you truly own your in-game assets, 
              grow their value with the ecosystem, create immersive worlds, and earn by playing and streaming.
            </p>
          </div>

          {/* Video Carousel */}
          <div className="hero-video">
            <VideoCarousel />
          </div>

          <HeroButtons />

          {/* Stats */}
          <StatsSection />
        </div>
      </section>
    );
  }
);

PlaySection.displayName = 'PlaySection';

export default PlaySection;
</file>

<file path="src/pages/Mint/components/ConnectEthereumWalletButton/ConnectEthereumWalletButton.tsx">
import React, { useEffect } from 'react';
import { useAppKit, useAppKitAccount } from '@reown/appkit/react';
import { useAccount, useBalance } from 'wagmi';
import { formatEther } from 'viem';
import './ConnectEthereumWalletButton.css';

interface ConnectEthereumWalletButtonProps {
  onConnect?: (address: string) => void;
  onDisconnect?: () => void;
}

const ConnectEthereumWalletButton: React.FC<ConnectEthereumWalletButtonProps> = ({
  onConnect,
  onDisconnect,
}) => {
  const { open } = useAppKit();
  const { address, isConnected } = useAppKitAccount();
  const { address: wagmiAddress } = useAccount();
  const { data: balance } = useBalance({ address: wagmiAddress });

  // Handle connection state changes
  useEffect(() => {
    if (isConnected && address && onConnect) {
      onConnect(address);
    } else if (!isConnected && onDisconnect) {
      onDisconnect();
    }
  }, [isConnected, address, onConnect, onDisconnect]);

  const handleConnect = () => {
    open();
  };

  const handleDisconnect = () => {
    open({ view: 'Account' });
  };

  const handleCopyAddress = (addr: string) => {
    navigator.clipboard.writeText(addr);
  };

  const formatBalance = (balance: bigint | undefined) => {
    if (!balance) return '0.0000';
    const formatted = formatEther(balance);
    return parseFloat(formatted).toFixed(4);
  };

  return (
    <div className="ethereum-wallet-container">
      {!isConnected ? (
        <button
          className="ethereum-wallet-button ethereum-wallet-button-primary"
          onClick={handleConnect}
        >
          <div className="ethereum-logo-container">
            <img
              src="/ethereum-logo.svg"
              alt="Ethereum Logo"
              className="ethereum-logo"
            />
          </div>
          <span className="ethereum-wallet-button-text">
            Connect Ethereum Wallet
          </span>
        </button>
      ) : (
        <div className="ethereum-wallet-connected">
          {address && (
            <div className="ethereum-profile-container">
              <div className="ethereum-user-profile">
                <div className="ethereum-profile-avatar-placeholder">
                  <img
                    src="/ethereum-logo.svg"
                    alt="Ethereum"
                    className="ethereum-avatar-icon"
                  />
                </div>
                <div className="ethereum-profile-info">
                  <div className="ethereum-profile-name">
                    {`${address.slice(0, 6)}...${address.slice(-4)}`}
                  </div>
                  <div
                    className="ethereum-profile-address"
                    onClick={() => handleCopyAddress(address)}
                    title="Click to copy address"
                  >
                    {address.slice(0, 8)}...{address.slice(-6)}
                  </div>
                  <div className="ethereum-balance">
                    {formatBalance(balance?.value)} ETH
                  </div>
                </div>
              </div>
            </div>
          )}
          <button
            className="ethereum-wallet-button ethereum-wallet-button-secondary"
            onClick={handleDisconnect}
          >
            <span className="ethereum-wallet-button-icon">⚙️</span>
            <span>Manage</span>
          </button>
        </div>
      )}
    </div>
  );
};

export default ConnectEthereumWalletButton;
</file>

<file path="src/pages/Mint/components/WalletBalance/EthereumStakingBalance.tsx">
import React from 'react';
import { useAOSTETHStaking } from '../../../../shared/contexts';
import { ethStaking } from '../../../../utils/AO';
import './WalletBalance.css';

export const EthereumStakingBalance: React.FC = () => {
    const {
        isConnected,
        stakingBalance,
        refetch
    } = useAOSTETHStaking();

    if (!isConnected) {
        return (
            <div className="wallet-balance-card">
                <div className="wallet-balance-header">
                    <img src="/ethereum-logo.svg" alt="Ethereum" className="wallet-balance-icon" />
                    <div className="wallet-balance-title">ETH Staking</div>
                </div>
                <div className="wallet-balance-content">
                    <div className="wallet-balance-status">Connect wallet to view staking</div>
                </div>
            </div>
        );
    }

    const handleRefresh = () => {
        refetch();
    };

    return (
        <div className="wallet-balance-card">
            <div className="wallet-balance-header">
                <img src="/ethereum-logo.svg" alt="Ethereum" className="wallet-balance-icon" />
                <div className="wallet-balance-title">ETH Staking</div>
                <button
                    onClick={handleRefresh}
                    style={{
                        marginLeft: 'auto',
                        padding: '4px 8px',
                        fontSize: '12px',
                        background: 'transparent',
                        border: '1px solid #ccc',
                        borderRadius: '4px',
                        cursor: 'pointer'
                    }}
                >
                    🔄
                </button>
            </div>
            <div className="wallet-balance-content">
                {stakingBalance.isLoading ? (
                    <div className="wallet-balance-loading">Loading staking data...</div>
                ) : stakingBalance.error ? (
                    <div className="wallet-balance-error">
                        {stakingBalance.error.message === 'Staking contract not available on this network' ? (
                            <>
                                <div>⚠️ Staking Not Available</div>
                                <small>The staking contract is not deployed on this network</small>
                            </>
                        ) : (
                            <>
                                Error: {stakingBalance.error.message}
                            </>
                        )}
                    </div>
                ) : (
                    <>
                        <div className="wallet-balance-item">
                            <div className="wallet-balance-label">Your Staked ETH</div>
                            <div className="wallet-balance-value">
                                {stakingBalance.stakedAmount ? ethStaking.formatAmount(stakingBalance.stakedAmount) : '0.00'} ETH
                            </div>
                        </div>
                        <div className="wallet-balance-item">
                            <div className="wallet-balance-label">Earned Rewards</div>
                            <div className="wallet-balance-value">
                                {stakingBalance.earnedRewards ? ethStaking.formatAmount(stakingBalance.earnedRewards) : '0.00'} ETH
                            </div>
                        </div>
                        <div className="wallet-balance-item">
                            <div className="wallet-balance-label">Total Staked</div>
                            <div className="wallet-balance-value">
                                {stakingBalance.totalStaked ? ethStaking.formatAmount(stakingBalance.totalStaked) : '0.00'} ETH
                            </div>
                        </div>
                    </>
                )}
            </div>
        </div>
    );
};
</file>

<file path="src/pages/Mint/components/WalletBalance/index.ts">
export { default as ArweaveWalletBalance } from './ArweaveWalletBalance';
export { default as EthereumWalletBalance } from './EthereumWalletBalance';
export { EthereumWalletTokenBalance } from './EthereumWalletTokenBalance';
export { EthereumStakingBalance } from './EthereumStakingBalance';
export { DAIStakingBalance } from './DAIStakingBalance';
</file>

<file path="src/pages/Mint/components/WalletConnections/components/ArweaveConnection.tsx">
import React from 'react';
import { useArweaveAOWallet } from '../../../../../shared/contexts/ArweaveAOWallet';
import FlipLogo from './FlipLogo';

const ArweaveConnection: React.FC = () => {
    const { isConnected, arBalance, isLoadingBalance, address, connect, disconnect } = useArweaveAOWallet();

    const handleConnect = async () => {
        try {
            await connect();
        } catch (error) {
            console.error('Failed to connect Arweave wallet:', error);
        }
    };

    const handleDisconnect = () => {
        disconnect();
    };

    const formatAddress = (addr: string) => {
        return `${addr.slice(0, 3)}...${addr.slice(-3)}`;
    };

    return (
        <div className="wallet-connection-card">
            <div className="wallet-connection-header">
                <div className="wallet-connection-icon">
                    <img src="/arweave glyph (light).svg" alt="Arweave" />
                </div>
                <div>
                    <h3 className="wallet-connection-title">Arweave Holdings</h3>
                    <p className="wallet-connection-network">Arweave Network</p>
                </div>
            </div>

            <div className="wallet-connection-status">
                {isConnected ? (
                    <div className="connection-status-connected">
                        <span>🟢</span>
                        <span>Connected</span>
                        {address && (
                            <span className="connection-address">
                                {formatAddress(address)}
                            </span>
                        )}
                    </div>
                ) : (
                    <div className="connection-status-disconnected">
                        <span>🔴</span>
                        <span>Not Connected</span>
                    </div>
                )}
            </div>

            <div className="wallet-connection-balances">
                <div className="balance-item">
                    <span className="balance-label">AR Balance</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : isLoadingBalance ? (
                            <span className="balance-loading">Loading...</span>
                        ) : (
                            `${arBalance !== null ? arBalance.toFixed(4) : '0.0000'} AR`
                        )}
                    </span>
                </div>
            </div>

            {!isConnected ? (
                <button
                    className="wallet-connect-button wallet-connect-button-arweave"
                    onClick={handleConnect}
                >
                    <FlipLogo size="medium" />
                    <span>Connect AO</span>
                </button>
            ) : (
                <button
                    className="wallet-disconnect-button"
                    onClick={handleDisconnect}
                >
                    Disconnect Wallet
                </button>
            )}
        </div>
    );
};

export default ArweaveConnection;
</file>

<file path="src/pages/Mint/components/WalletConnections/components/GameYieldConnection.tsx">
import React from 'react';
import { useDelegation } from '../../../../../shared/contexts/AODelegationContext';
import { useArweaveAOWallet } from '../../../../../shared/contexts/ArweaveAOWallet';
import { useGameFLP } from '../../../../../shared/contexts/GameFLP';
import { AUTONOMOUS_FINANCE } from 'ao-js-sdk/src/processes/ids/autonomous-finance';
import { formatTokenAmount } from '../../../../../utils/formatting';
import FlipLogo from './FlipLogo';

const GameYieldConnection: React.FC = () => {
    const { delegations, loading, settingDelegation, setGameDelegation } = useDelegation();
    const { isConnected, connect, disconnect, address } = useArweaveAOWallet();
    const { recentDistribution, isLoadingDistribution } = useGameFLP();

    // Find the GAME delegation
    const gameDelegation = delegations.find(
        delegation => delegation.delegatee === AUTONOMOUS_FINANCE.FAIR_LAUNCH_PROCESSES.GAME
    );

    const gamePercentage = gameDelegation ? parseFloat(gameDelegation.percentage) : 0;
    const isMaxEfficiency = gamePercentage >= 100;

    const handleConnect = () => {
        connect();
    };

    const handleDisconnect = () => {
        disconnect();
    };

    const handleIncreaseEfficiency = async () => {
        await setGameDelegation();
    };

    const formatAddress = (addr: string) => {
        return `${addr.slice(0, 3)}...${addr.slice(-3)}`;
    };

    return (
        <div className="wallet-connection-card">
            <div className="wallet-connection-header">
                <div className="wallet-connection-icon">
                    <img src="/game-token.png" alt="GAME Token" />
                </div>
                <div>
                    <h3 className="wallet-connection-title">$GAME Yield</h3>
                    <p className="wallet-connection-network">AO Network</p>
                </div>
            </div>

            {!isConnected ? (
                <div className="game-yield-disconnected">
                    <div className="connection-status-disconnected">
                        <span>🔴</span>
                        <span>Arweave Wallet Not Connected</span>
                    </div>
                    <button
                        className="wallet-connect-button wallet-connect-button-arweave"
                        onClick={handleConnect}
                    >
                        <FlipLogo size="medium" />
                        <span>Connect AO</span>
                    </button>
                </div>
            ) : (
                <div className="game-yield-connected">
                    <div className="connection-status-connected">
                        <span>🟢</span>
                        <span>Connected</span>
                        {address && (
                            <span className="connection-address">
                                {formatAddress(address)}
                            </span>
                        )}
                    </div>

                    <div className="game-yield-efficiency">
                        <div className="efficiency-displays-container">
                            <div className="efficiency-display">
                                <div className="efficiency-percentage">
                                    {isLoadingDistribution ? (
                                        <span className="efficiency-loading">--</span>
                                    ) : (
                                        <span className="efficiency-value">{formatTokenAmount(recentDistribution)}</span>
                                    )}
                                </div>
                                <div className="efficiency-label">Last Distribution</div>
                            </div>

                            <div className="efficiency-display">
                                <div className="efficiency-percentage">
                                    {loading ? (
                                        <span className="efficiency-loading">--</span>
                                    ) : (
                                        <span className="efficiency-value">{gamePercentage.toFixed(0)}%</span>
                                    )}
                                </div>
                                <div className="efficiency-label">$GAME Minting Efficiency</div>
                            </div>
                        </div>

                        {loading ? (
                            <div className="efficiency-loading-message">
                                Loading delegation data...
                            </div>
                        ) : isMaxEfficiency ? (
                            <div className="efficiency-congratulations">
                                <span className="congratulations-icon">🎉</span>
                                <div className="congratulations-text">
                                    <h4>Maximum Efficiency Achieved!</h4>
                                    <p>You're earning the maximum $GAME yield possible. Deposit more tokens to yeild more $GAME!</p>
                                </div>
                            </div>
                        ) : (
                            <button
                                className="efficiency-button"
                                onClick={handleIncreaseEfficiency}
                                disabled={settingDelegation}
                            >
                                {settingDelegation ? (
                                    <span>Setting Delegation...</span>
                                ) : (
                                    <span>Increase to 100%</span>
                                )}
                            </button>
                        )}
                    </div>

                    <button
                        className="wallet-disconnect-button"
                        onClick={handleDisconnect}
                    >
                        Disconnect Wallet
                    </button>
                </div>
            )}
        </div>
    );
};

export default GameYieldConnection;
</file>

<file path="src/pages/Home/Home.tsx">
import { useEffect, useRef } from 'react';
import './Home.css';
import { PlaySection, OwnSection, CreateSection, MintSection, EarnSection, FooterSection } from './sections';

function Home() {
  const playRef = useRef<HTMLElement>(null);
  const ownRef = useRef<HTMLElement>(null);
  const earnRef = useRef<HTMLElement>(null);
  const createRef = useRef<HTMLElement>(null);
  const mintRef = useRef<HTMLElement>(null);
  const footerRef = useRef<HTMLElement>(null);

  useEffect(() => {
    // Make the hero section visible immediately
    if (playRef.current) {
      playRef.current.classList.add('animate-in');
    }

    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);

    const sections = [ownRef.current, earnRef.current, createRef.current, mintRef.current, footerRef.current];
    sections.forEach((section) => {
      if (section) {
        observer.observe(section);
      }
    });

    return () => {
      sections.forEach((section) => {
        if (section) {
          observer.unobserve(section);
        }
      });
    };
  }, []);

  return (
    <div className="gaming-home">
      {/* Hero Section / Play Section */}
      <PlaySection ref={playRef} />

      {/* Own Section */}
      <OwnSection ref={ownRef} />

      {/* Earn Section */}
      <EarnSection ref={earnRef} />

      {/* Create Section */}
      <CreateSection ref={createRef} />

      {/* Mint Section */}
      <MintSection ref={mintRef} />

      {/* Footer Section */}
      <FooterSection ref={footerRef} />
    </div>
  )
}

export default Home
</file>

<file path="src/pages/Mint/components/WalletConnections/WalletConnections.css">
/* Wallet Connections Interface */
.wallet-connections-interface {
    margin: 48px 0;
    display: flex;
    justify-content: center;
}

.wallet-connections-card {
    background: linear-gradient(135deg,
            rgba(15, 23, 42, 0.8) 0%,
            rgba(30, 41, 59, 0.8) 100%);
    border: 2px solid rgba(34, 197, 94, 0.3);
    border-radius: 24px;
    padding: 40px;
    backdrop-filter: blur(16px);
    text-align: center;
    max-width: 1200px;
    width: 100%;
    position: relative;
    overflow: visible;
    transition: all 0.4s ease;
}

.wallet-connections-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
}

.wallet-connections-card:hover::before {
    opacity: 1;
}

.wallet-connections-card:hover {
    transform: translateY(-8px);
    border-color: rgba(34, 197, 94, 0.6);
    box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.4);
}

.wallet-connections-title {
    font-size: 2rem;
    font-weight: 700;
    color: rgba(34, 197, 94, 1);
    margin-bottom: 16px;
    position: relative;
    z-index: 2;
}

.wallet-connections-description {
    color: #9ca3af;
    margin-bottom: 32px;
    line-height: 1.6;
    position: relative;
    z-index: 2;
}

.wallet-connections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 24px;
    position: relative;
    z-index: 2;
}

/* Individual Connection Cards */
.wallet-connection-card {
    background: rgba(15, 23, 42, 0.7);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 16px;
    padding: 24px;
    backdrop-filter: blur(8px);
    transition: all 0.3s ease;
    text-align: left;
}

.wallet-connection-card {
    position: relative;
    min-height: 300px;
}

.wallet-connection-card.modal-open {
    min-height: 600px;
    z-index: 1000000;
}

.wallet-connection-card:hover {
    border-color: rgba(34, 197, 94, 0.5);
    transform: translateY(-4px);
    box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.3);
}

.wallet-connection-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 20px;
}

.wallet-connection-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
}

.wallet-connection-icon img {
    width: 20px;
    height: 20px;
}

.wallet-connection-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: rgba(34, 197, 94, 1);
    margin: 0;
}

.wallet-connection-network {
    font-size: 0.8rem;
    color: #9ca3af;
    margin: 0;
}

/* Connection Status */
.wallet-connection-status {
    margin-bottom: 20px;
}

.connection-status-connected {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 8px;
    font-size: 0.9rem;
}

.connection-status-disconnected {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.3);
    border-radius: 8px;
    font-size: 0.9rem;
    color: #ef4444;
}

.connection-address {
    font-family: 'Courier New', monospace;
    color: rgba(34, 197, 94, 1);
    font-weight: 600;
}

/* Balance Display */
.wallet-connection-balances {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 20px;
}

.balance-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid rgba(34, 197, 94, 0.1);
}

.balance-item:last-child {
    border-bottom: none;
}

.balance-label {
    font-size: 0.9rem;
    color: #9ca3af;
}

.balance-value {
    font-weight: 600;
    color: rgba(34, 197, 94, 1);
    font-family: 'Courier New', monospace;
}

.balance-placeholder {
    color: #6b7280;
    font-style: italic;
}

.balance-loading {
    color: #9ca3af;
    font-style: italic;
    animation: pulse 2s ease-in-out infinite;
}

/* Connect Button */
.wallet-connect-button {
    width: 100%;
    padding: 12px 16px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.wallet-connect-button-arweave {
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    border: 1px solid rgba(34, 197, 94, 0.3);
    color: rgba(34, 197, 94, 1);
}

.wallet-connect-button-arweave:hover {
    border-color: rgba(34, 197, 94, 0.6);
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.15) 0%,
            rgba(5, 150, 105, 0.15) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(34, 197, 94, 0.3);
}

/* Logo Container and Animation for Connect Button */
/* Small Logo */
.wallet-logo-container-small {
    position: relative;
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.wallet-logo-small {
    position: absolute;
    width: 16px;
    height: 16px;
    object-fit: contain;
    opacity: 0;
    transform: rotateY(90deg) scale(0.8);
    transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    filter: drop-shadow(0 2px 6px rgba(34, 197, 94, 0.3));
}

.wallet-logo-small.active {
    opacity: 1;
    transform: rotateY(0deg) scale(1);
    animation: logo-glow-small 2s ease-in-out infinite;
}

@keyframes logo-glow-small {

    0%,
    100% {
        filter: drop-shadow(0 2px 6px rgba(34, 197, 94, 0.3));
    }

    50% {
        filter: drop-shadow(0 3px 8px rgba(34, 197, 94, 0.5)) brightness(1.1);
    }
}

/* Medium Logo */
.wallet-logo-container-medium {
    position: relative;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.wallet-logo-medium {
    position: absolute;
    width: 24px;
    height: 24px;
    object-fit: contain;
    opacity: 0;
    transform: rotateY(90deg) scale(0.8);
    transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    filter: drop-shadow(0 3px 8px rgba(34, 197, 94, 0.3));
}

.wallet-logo-medium.active {
    opacity: 1;
    transform: rotateY(0deg) scale(1);
    animation: logo-glow-medium 2s ease-in-out infinite;
}

@keyframes logo-glow-medium {

    0%,
    100% {
        filter: drop-shadow(0 3px 8px rgba(34, 197, 94, 0.3));
    }

    50% {
        filter: drop-shadow(0 4px 10px rgba(34, 197, 94, 0.5)) brightness(1.1);
    }
}

/* Large Logo */
.wallet-logo-container {
    position: relative;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.wallet-logo {
    position: absolute;
    width: 32px;
    height: 32px;
    object-fit: contain;
    opacity: 0;
    transform: rotateY(90deg) scale(0.8);
    transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    filter: drop-shadow(0 4px 10px rgba(34, 197, 94, 0.3));
}

.wallet-logo.active {
    opacity: 1;
    transform: rotateY(0deg) scale(1);
    animation: logo-glow-large 2s ease-in-out infinite;
}

@keyframes logo-glow-large {

    0%,
    100% {
        filter: drop-shadow(0 4px 10px rgba(34, 197, 94, 0.3));
    }

    50% {
        filter: drop-shadow(0 5px 12px rgba(34, 197, 94, 0.5)) brightness(1.1);
    }
}

.wallet-connect-button-ethereum {
    background: linear-gradient(135deg,
            rgba(59, 130, 246, 0.1) 0%,
            rgba(99, 102, 241, 0.1) 100%);
    border: 1px solid rgba(59, 130, 246, 0.3);
    color: rgba(59, 130, 246, 1);
}

.wallet-connect-button-ethereum:hover {
    border-color: rgba(59, 130, 246, 0.6);
    background: linear-gradient(135deg,
            rgba(59, 130, 246, 0.15) 0%,
            rgba(99, 102, 241, 0.15) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.3);
}

.wallet-disconnect-button {
    width: 100%;
    padding: 8px 12px;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.3);
    border-radius: 6px;
    color: #ef4444;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 8px;
}

.wallet-disconnect-button:hover {
    background: rgba(239, 68, 68, 0.2);
    border-color: rgba(239, 68, 68, 0.5);
}

/* Responsive Design */
@media (max-width: 768px) {
    .wallet-connections-grid {
        grid-template-columns: 1fr;
        gap: 20px;
    }

    .wallet-connections-card {
        padding: 24px;
        margin: 24px 16px;
    }

    .wallet-connections-title {
        font-size: 1.5rem;
    }

    .wallet-connection-card {
        padding: 20px;
    }
}

@media (max-width: 480px) {
    .wallet-connections-card {
        padding: 20px;
        margin: 20px 12px;
    }

    .wallet-connection-header {
        gap: 8px;
    }

    .wallet-connection-icon {
        width: 28px;
        height: 28px;
    }

    .wallet-connection-icon img {
        width: 16px;
        height: 16px;
    }

    .wallet-connection-title {
        font-size: 1rem;
    }
}

/* Deposit/Withdraw Actions */
.deposit-withdraw-actions {
    margin: 16px 0;
    padding: 12px 0;
    border-bottom: 1px solid rgba(34, 197, 94, 0.1);
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.deposit-withdraw-button {
    width: 100%;
    padding: 10px 16px;
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 8px;
    color: rgba(34, 197, 94, 1);
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.deposit-withdraw-button:hover {
    border-color: rgba(34, 197, 94, 0.6);
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.15) 0%,
            rgba(5, 150, 105, 0.15) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(34, 197, 94, 0.3);
}

.swap-button {
    width: 100%;
    padding: 8px 16px;
    background: linear-gradient(135deg,
            rgba(59, 130, 246, 0.1) 0%,
            rgba(99, 102, 241, 0.1) 100%);
    border: 1px solid rgba(59, 130, 246, 0.3);
    border-radius: 6px;
    color: rgba(59, 130, 246, 1);
    font-weight: 500;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.swap-button:hover {
    border-color: rgba(59, 130, 246, 0.6);
    background: linear-gradient(135deg,
            rgba(59, 130, 246, 0.15) 0%,
            rgba(99, 102, 241, 0.15) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.3);
}

/* Modal Styles */
.modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    backdrop-filter: blur(4px);
    border-radius: 16px;
}

.modal-content {
    background: linear-gradient(135deg,
            rgba(15, 23, 42, 0.95) 0%,
            rgba(30, 41, 59, 0.95) 100%);
    border: 2px solid rgba(34, 197, 94, 0.3);
    border-radius: 16px;
    padding: 24px;
    max-width: 500px;
    width: 90%;
    backdrop-filter: blur(16px);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
    position: relative;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 16px;
    border-bottom: 1px solid rgba(34, 197, 94, 0.2);
}

.modal-header h3 {
    color: rgba(34, 197, 94, 1);
    font-size: 1.3rem;
    font-weight: 700;
    margin: 0;
}

.modal-close-button {
    background: none;
    border: none;
    color: #9ca3af;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.modal-close-button:hover {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
}

.modal-body {
    color: #d1d5db;
    line-height: 1.6;
}

.modal-body p {
    margin-bottom: 16px;
}

.modal-body p:last-child {
    margin-bottom: 0;
}

/* Staking Actions Styles */
.staking-actions-status {
    text-align: center;
    color: rgba(255, 255, 255, 0.7);
    padding: 20px;
    font-size: 14px;
}

.staking-actions-content {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.staking-action-section {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 8px;
    padding: 16px;
}

.staking-action-title {
    font-size: 16px;
    font-weight: 600;
    color: #ffffff;
    margin: 0 0 16px 0;
}

.staking-input-group {
    display: flex;
    gap: 8px;
    margin-bottom: 8px;
}

.staking-input {
    flex: 1;
    padding: 12px 16px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #ffffff;
    font-size: 14px;
    transition: all 0.3s ease;
}

.staking-input:focus {
    outline: none;
    border-color: #00d4ff;
    background: rgba(255, 255, 255, 0.08);
}

.staking-input:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.staking-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.staking-max-btn {
    padding: 12px 16px;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 8px;
    color: rgba(34, 197, 94, 1);
    font-size: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 60px;
}

.staking-max-btn:hover:not(:disabled) {
    background: rgba(34, 197, 94, 0.2);
    border-color: rgba(34, 197, 94, 0.5);
}

.staking-max-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.staking-balance-info {
    font-size: 12px;
    color: rgba(255, 255, 255, 0.6);
    margin-bottom: 12px;
}

.staking-action-btn {
    width: 100%;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border: 1px solid;
}

.staking-action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    animation: none;
}

.approve-btn {
    background: rgba(34, 197, 94, 0.1);
    border-color: rgba(34, 197, 94, 0.3);
    color: rgba(34, 197, 94, 1);
}

.approve-btn:hover:not(:disabled) {
    background: rgba(34, 197, 94, 0.2);
    border-color: rgba(34, 197, 94, 0.5);
}

.stake-btn {
    background: rgba(34, 197, 94, 0.1);
    border-color: rgba(34, 197, 94, 0.3);
    color: rgba(34, 197, 94, 1);
}

.stake-btn:hover:not(:disabled) {
    background: rgba(34, 197, 94, 0.2);
    border-color: rgba(34, 197, 94, 0.5);
}

.unstake-btn {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
    color: rgba(239, 68, 68, 1);
}

.unstake-btn:hover:not(:disabled) {
    background: rgba(239, 68, 68, 0.2);
    border-color: rgba(239, 68, 68, 0.5);
}

/* Game Yield Section */
.game-yield-section {
    margin-top: 32px;
    padding-top: 24px;
    border-top: 1px solid rgba(34, 197, 94, 0.2);
    position: relative;
    z-index: 2;
    display: flex;
    justify-content: center;
}

.game-yield-section .wallet-connection-card {
    max-width: 500px;
    width: 100%;
}

/* Game Yield Specific Styles */
.game-yield-disconnected {
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: center;
    text-align: center;
}

.game-yield-connected {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.game-yield-efficiency {
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
    text-align: center;
}

.efficiency-displays-container {
    display: flex;
    gap: 32px;
    align-items: center;
    justify-content: center;
    flex-wrap: nowrap;
}

.efficiency-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    min-width: 140px;
    flex: 1;
}

.efficiency-percentage {
    display: flex;
    align-items: center;
    justify-content: center;
}

.efficiency-value {
    font-size: 3rem;
    font-weight: 900;
    background: linear-gradient(90deg,
            rgba(34, 197, 94, 1) 0%,
            rgba(5, 150, 105, 1) 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: treasure-glow 3s ease-in-out infinite;
}

.efficiency-loading {
    font-size: 3rem;
    font-weight: 900;
    color: #6b7280;
    font-style: italic;
}

.efficiency-label {
    font-size: 1.1rem;
    font-weight: 600;
    color: #9ca3af;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.efficiency-loading-message {
    color: #9ca3af;
    font-style: italic;
    animation: pulse 2s ease-in-out infinite;
}

.efficiency-button {
    padding: 12px 24px;
    background: linear-gradient(90deg,
            rgba(34, 197, 94, 1) 0%,
            rgba(5, 150, 105, 1) 100%);
    border: none;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    min-width: 160px;
}

.efficiency-button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px -8px rgba(34, 197, 94, 0.5);
}

.efficiency-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}

.efficiency-congratulations {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 20px;
    background: linear-gradient(135deg,
            rgba(34, 197, 94, 0.1) 0%,
            rgba(5, 150, 105, 0.1) 100%);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 12px;
    text-align: left;
}

.congratulations-icon {
    font-size: 2rem;
    flex-shrink: 0;
}

.congratulations-text h4 {
    color: rgba(34, 197, 94, 1);
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 8px 0;
}

.congratulations-text p {
    color: #9ca3af;
    margin: 0;
    line-height: 1.5;
}

/* Animations */
@keyframes treasure-glow {

    0%,
    100% {
        opacity: 1;
        filter: brightness(1);
    }

    50% {
        opacity: 0.8;
        filter: brightness(1.2);
    }
}

@keyframes pulse {

    0%,
    100% {
        opacity: 1;
    }

    50% {
        opacity: 0.5;
    }
}

/* Responsive adjustments for Game Yield */
@media (max-width: 768px) {
    .efficiency-displays-container {
        gap: 20px;
    }

    .efficiency-value {
        font-size: 2.5rem;
    }

    .efficiency-congratulations {
        flex-direction: column;
        text-align: center;
        gap: 12px;
    }

    .congratulations-text {
        text-align: center;
    }
}

@media (max-width: 480px) {
    .efficiency-displays-container {
        gap: 16px;
    }

    .efficiency-value {
        font-size: 2rem;
    }

    .efficiency-button {
        min-width: 140px;
        padding: 10px 20px;
        font-size: 0.9rem;
    }

    .efficiency-label {
        font-size: 0.9rem;
    }

    .efficiency-display {
        min-width: 100px;
    }

    /* Modal responsive adjustments */
    .modal-overlay {
        padding: 10px;
        align-items: flex-start;
    }

    .modal-content {
        margin: 10px auto;
        padding: 20px;
        max-width: none;
        width: 100%;
    }

    .modal-header h3 {
        font-size: 1.1rem;
    }

    .staking-action-section {
        padding: 12px;
    }

    .staking-input-group {
        flex-direction: column;
        gap: 8px;
    }

    .staking-max-btn {
        width: 100%;
        min-width: auto;
    }
}
</file>

<file path="src/pages/Mint/components/WalletConnections/components/USDSConnection.tsx">
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useState, useEffect } from 'react';
import { useAppKit, useAppKitAccount } from '@reown/appkit/react';
import { useAccount, useBalance, useWriteContract, useWaitForTransactionReceipt, useReadContract } from 'wagmi';
import { formatEther, parseEther } from 'viem';
import { useAOUSDSStaking, useArweaveAOWallet, useDelegation } from '../../../../../shared/contexts';
import { AUTONOMOUS_FINANCE } from 'ao-js-sdk/src/processes/ids/autonomous-finance';
import { usdsStaking, USDS_TOKEN_ADDRESS } from '../../../../../utils/AO/USDSStaking';
import { ERC20_ABI } from '../../../../../utils/AO/shared/erc20Abi';

const USDSConnection: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [stakeAmount, setStakeAmount] = useState('');
    const [unstakeAmount, setUnstakeAmount] = useState('');
    const [customArweaveAddress, setCustomArweaveAddress] = useState('');
    const [isStaking, setIsStaking] = useState(false);
    const [isUnstaking, setIsUnstaking] = useState(false);
    const [pendingStakeAfterApproval, setPendingStakeAfterApproval] = useState(false);

    const { open } = useAppKit();
    const { address, isConnected } = useAppKitAccount();
    const { address: wagmiAddress } = useAccount();
    const { address: arweaveAddress } = useArweaveAOWallet();
    const { setGameDelegation, delegations } = useDelegation();
    const { data: balance, refetch: refetchEthBalance } = useBalance({ address: wagmiAddress });
    const { data: usdsBalance, refetch: refetchUsdsBalance } = useBalance({
        address: wagmiAddress,
        token: USDS_TOKEN_ADDRESS
    });
    const { stakingBalance, refetch } = useAOUSDSStaking();

    // Read USDS allowance
    const { data: usdsAllowance, refetch: refetchAllowance } = useReadContract({
        address: USDS_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'allowance',
        args: wagmiAddress ? [wagmiAddress, usdsStaking.getStakingContractAddress()] : undefined,
        query: {
            enabled: !!wagmiAddress && isConnected,
        },
    });

    // Contract write hooks
    const { writeContract: writeApprove, data: approveHash } = useWriteContract();
    const { writeContract: writeStake, data: stakeHash } = useWriteContract();
    const { writeContract: writeUnstake, data: unstakeHash } = useWriteContract();

    // Transaction receipt hooks
    const { isLoading: isApproveLoading, isSuccess: isApproveSuccess } = useWaitForTransactionReceipt({
        hash: approveHash,
    });

    const { isLoading: isStakeLoading, isSuccess: isStakeSuccess } = useWaitForTransactionReceipt({
        hash: stakeHash,
    });

    const { isLoading: isUnstakeLoading, isSuccess: isUnstakeSuccess } = useWaitForTransactionReceipt({
        hash: unstakeHash,
    });

    // Handle successful transactions
    useEffect(() => {
        if (isApproveSuccess) {
            refetchAllowance();
            // Automatically trigger stake after approval if pending
            if (pendingStakeAfterApproval) {
                setPendingStakeAfterApproval(false);
                handleStake();
            }
        }
    }, [isApproveSuccess, refetchAllowance, pendingStakeAfterApproval]);

    useEffect(() => {
        if (isStakeSuccess) {
            setStakeAmount('');
            setIsStaking(false);
            refetch();

            // Only set GAME delegation if not already at 100%
            const gameDelegation = delegations.find(
                delegation => delegation.delegatee === AUTONOMOUS_FINANCE.FAIR_LAUNCH_PROCESSES.GAME
            );
            const gamePercentage = gameDelegation ? parseFloat(gameDelegation.percentage) : 0;

            if (gamePercentage < 100) {
                setGameDelegation();
            }
        }
    }, [isStakeSuccess, refetch, setGameDelegation, delegations]);

    useEffect(() => {
        if (isUnstakeSuccess) {
            setUnstakeAmount('');
            setIsUnstaking(false);
            refetch();
        }
    }, [isUnstakeSuccess, refetch]);

    // Auto-refresh balances when window regains focus (after swap)
    useEffect(() => {
        const handleFocus = () => {
            if (isConnected) {
                refetchEthBalance();
                refetchUsdsBalance();
                refetchAllowance();
            }
        };

        window.addEventListener('focus', handleFocus);
        return () => window.removeEventListener('focus', handleFocus);
    }, [isConnected, refetchEthBalance, refetchUsdsBalance, refetchAllowance]);

    const handleConnect = () => {
        open();
    };

    const handleDisconnect = () => {
        open({ view: 'Account' });
    };

    const formatAddress = (addr: string) => {
        return `${addr.slice(0, 3)}...${addr.slice(-3)}`;
    };

    const formatBalance = (balance: bigint | undefined) => {
        if (!balance) return '0.0000';
        const formatted = formatEther(balance);
        return parseFloat(formatted).toFixed(4);
    };

    const handleApprove = async () => {
        if (!stakeAmount || !wagmiAddress) return;

        try {
            setPendingStakeAfterApproval(true);
            const amount = parseEther(stakeAmount);
            writeApprove({
                address: USDS_TOKEN_ADDRESS,
                abi: ERC20_ABI,
                functionName: 'approve',
                args: [usdsStaking.getStakingContractAddress(), amount],
            } as any);
        } catch (error) {
            console.error('Approve error:', error);
            setPendingStakeAfterApproval(false);
        }
    };

    const handleDepositClick = async () => {
        if (needsApproval) {
            handleApprove();
        } else {
            handleStake();
        }
    };

    const handleStake = async () => {
        const targetArweaveAddress = arweaveAddress || customArweaveAddress;
        if (!stakeAmount || !wagmiAddress || !targetArweaveAddress) return;

        try {
            setIsStaking(true);
            const stakeConfig = usdsStaking.createStakeConfig(stakeAmount, targetArweaveAddress);
            writeStake(stakeConfig as any);
        } catch (error) {
            console.error('Stake error:', error);
            setIsStaking(false);
        }
    };

    const handleUnstake = async () => {
        const targetArweaveAddress = arweaveAddress || customArweaveAddress;
        if (!unstakeAmount || !wagmiAddress || !targetArweaveAddress) return;

        try {
            setIsUnstaking(true);
            const unstakeConfig = usdsStaking.createWithdrawConfig(unstakeAmount, targetArweaveAddress);
            writeUnstake(unstakeConfig as any);
        } catch (error) {
            console.error('Unstake error:', error);
            if (error instanceof Error) {
                alert(`Unstake failed: ${error.message}`);
            } else {
                alert('Unstake failed. Please check your wallet and try again.');
            }
            setIsUnstaking(false);
        }
    };

    const needsApproval = stakeAmount && usdsAllowance !== undefined &&
        parseEther(stakeAmount) > (usdsAllowance as bigint);

    const maxStakeAmount = usdsBalance?.value ? formatEther(usdsBalance.value) : '0';
    const maxUnstakeAmount = stakingBalance.stakedAmount ?
        usdsStaking.formatAmount(stakingBalance.stakedAmount) : '0';

    return (
        <div className={`wallet-connection-card ${isModalOpen ? 'modal-open' : ''}`}>
            <div className="wallet-connection-header">
                <div className="wallet-connection-icon">
                    <img src="/usds-logo-transparent.png" alt="USDS" />
                </div>
                <div>
                    <h3 className="wallet-connection-title">USDS Deposits</h3>
                    <p className="wallet-connection-network">Ethereum Network</p>
                </div>
            </div>

            <div className="wallet-connection-status">
                {isConnected ? (
                    <div className="connection-status-connected">
                        <span>🟢</span>
                        <span>Connected</span>
                        {address && (
                            <span className="connection-address">
                                {formatAddress(address)}
                            </span>
                        )}
                    </div>
                ) : (
                    <div className="connection-status-disconnected">
                        <span>🔴</span>
                        <span>Not Connected</span>
                    </div>
                )}
            </div>

            <div className="wallet-connection-balances">
                {isConnected && (
                    <button
                        className="swap-button"
                        onClick={() => {
                            const ethBalance = balance?.value || 0n;
                            const reserveAmount = BigInt('10000000000000000'); // 0.01 ETH in wei
                            const swapAmount = ethBalance > reserveAmount ? ethBalance - reserveAmount : 0n;
                            const formattedAmount = formatEther(swapAmount);

                            open({
                                view: 'Swap',
                                arguments: {
                                    fromToken: '0x0000000000000000000000000000000000000000', // ETH
                                    toToken: USDS_TOKEN_ADDRESS, // USDS
                                    amount: formattedAmount
                                }
                            });
                        }}
                    >
                        Swap ETH → USDS
                    </button>
                )}

                <div className="balance-item">
                    <span className="balance-label">USDS Balance</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : (
                            `${formatBalance(usdsBalance?.value)} USDS`
                        )}
                    </span>
                </div>

                {isConnected && (
                    <div className="deposit-withdraw-actions">
                        <button
                            className="deposit-withdraw-button"
                            onClick={() => setIsModalOpen(true)}
                        >
                            Deposit / Withdraw
                        </button>
                    </div>
                )}

                <div className="balance-item">
                    <span className="balance-label">Deposited USDS</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : stakingBalance.isLoading ? (
                            <span className="balance-loading">Loading...</span>
                        ) : stakingBalance.error ? (
                            <span className="balance-placeholder">N/A</span>
                        ) : (
                            `${stakingBalance.stakedAmount ? parseFloat(usdsStaking.formatAmount(stakingBalance.stakedAmount)).toFixed(4) : '0.0000'} USDS`
                        )}
                    </span>
                </div>
            </div>

            {!isConnected ? (
                <button
                    className="wallet-connect-button wallet-connect-button-ethereum"
                    onClick={handleConnect}
                >
                    <img src="/ethereum-logo.svg" alt="Ethereum" style={{ width: '16px', height: '16px' }} />
                    <span>Connect Ethereum</span>
                </button>
            ) : (
                <button
                    className="wallet-disconnect-button"
                    onClick={handleDisconnect}
                >
                    Manage Wallet
                </button>
            )}

            {/* Deposit/Withdraw Modal */}
            {isModalOpen && (
                <div className="modal-overlay" onClick={() => setIsModalOpen(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>USDS Deposit / Withdraw</h3>
                            <button
                                className="modal-close-button"
                                onClick={() => setIsModalOpen(false)}
                            >
                                ×
                            </button>
                        </div>
                        <div className="modal-body">
                            <div className="staking-actions-content">
                                {/* AO Wallet Address Section */}
                                <div className="staking-action-section">
                                    <h4 className="staking-action-title">AO Wallet Address</h4>
                                    <div className="staking-balance-info">
                                        {arweaveAddress ? 'Connected AO Wallet (auto-filled)' : 'Enter your AO wallet address'}
                                    </div>
                                    <div className="staking-input-group">
                                        <input
                                            type="text"
                                            className="staking-input"
                                            placeholder="Enter AO wallet address..."
                                            value={arweaveAddress || customArweaveAddress}
                                            onChange={(e) => {
                                                if (!arweaveAddress) {
                                                    setCustomArweaveAddress(e.target.value);
                                                }
                                            }}
                                            disabled={!!arweaveAddress || isStaking || isUnstaking || isApproveLoading}
                                            style={{ fontFamily: 'monospace', fontSize: '0.9rem' }}
                                        />
                                        {arweaveAddress && (
                                            <div style={{
                                                fontSize: '0.8rem',
                                                color: 'rgba(34, 197, 94, 1)',
                                                marginTop: '4px'
                                            }}>
                                                ✓ Auto-filled from connected AO wallet
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {(arweaveAddress || customArweaveAddress) && (
                                    <>
                                        {/* Stake Section */}
                                        <div className="staking-action-section">
                                            <h4 className="staking-action-title">Deposit USDS</h4>
                                            <div className="staking-balance-info">
                                                Available: {maxStakeAmount} USDS
                                            </div>
                                            <div className="staking-input-group">
                                                <input
                                                    type="number"
                                                    className="staking-input"
                                                    placeholder="0.0"
                                                    value={stakeAmount}
                                                    min="0"
                                                    step="any"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        if (value === '' || (parseFloat(value) >= 0 && !isNaN(parseFloat(value)))) {
                                                            setStakeAmount(value);
                                                        }
                                                    }}
                                                    disabled={isStaking || isApproveLoading}
                                                />
                                                <button
                                                    className="staking-max-btn"
                                                    onClick={() => setStakeAmount(maxStakeAmount)}
                                                    disabled={isStaking || isApproveLoading}
                                                >
                                                    MAX
                                                </button>
                                            </div>
                                            <button
                                                className={`staking-action-btn ${needsApproval ? 'approve-btn' : 'stake-btn'}`}
                                                onClick={handleDepositClick}
                                                disabled={!stakeAmount || isApproveLoading || isStaking || isStakeLoading}
                                            >
                                                {isApproveLoading ? 'Approving...' :
                                                    isStaking || isStakeLoading ? 'Depositing...' :
                                                        needsApproval ? 'Approve & Deposit USDS' : 'Deposit USDS'}
                                            </button>
                                        </div>

                                        {/* Unstake Section */}
                                        <div className="staking-action-section">
                                            <h4 className="staking-action-title">Withdraw USDS</h4>
                                            <div className="staking-balance-info">
                                                Deposited: {maxUnstakeAmount} USDS
                                            </div>
                                            <div className="staking-input-group">
                                                <input
                                                    type="number"
                                                    className="staking-input"
                                                    placeholder="0.0"
                                                    value={unstakeAmount}
                                                    min="0"
                                                    step="any"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        if (value === '' || (parseFloat(value) >= 0 && !isNaN(parseFloat(value)))) {
                                                            setUnstakeAmount(value);
                                                        }
                                                    }}
                                                    disabled={isUnstaking}
                                                />
                                                <button
                                                    className="staking-max-btn"
                                                    onClick={() => setUnstakeAmount(maxUnstakeAmount)}
                                                    disabled={isUnstaking}
                                                >
                                                    MAX
                                                </button>
                                            </div>
                                            <button
                                                className="staking-action-btn unstake-btn"
                                                onClick={handleUnstake}
                                                disabled={!unstakeAmount || isUnstaking || isUnstakeLoading}
                                            >
                                                {isUnstaking || isUnstakeLoading ? 'Withdrawing...' : 'Withdraw USDS'}
                                            </button>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default USDSConnection;
</file>

<file path="src/pages/Mint/Mint.css">
/* Mint Page Styles - NFT/Blockchain Theme */
.mint-page {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(40px);
  transition: all 1s ease-out;
}

.mint-page.animate-in {
  opacity: 1;
  transform: translateY(0);
}

/* Mint Page Animated Backgrounds - Treasure/Blockchain Theme */
.mint-bg-layer-1 {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg,
      rgba(5, 46, 22, 0.4) 0%,
      rgba(34, 197, 94, 0.3) 50%,
      rgba(5, 150, 105, 0.4) 100%);
}

.mint-bg-layer-2 {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at 70% 30%,
      rgba(34, 197, 94, 0.2) 0%,
      transparent 60%);
}

.mint-bg-layer-3 {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

/* Treasure Chest Elements */
.treasure-element {
  position: absolute;
  font-size: 1.8rem;
  opacity: 0.5;
  pointer-events: none;
}

.treasure-chest-1 {
  top: 20%;
  left: 15%;
  animation: treasure-glow 4s ease-in-out infinite;
  animation-delay: 0s;
}

.treasure-chest-2 {
  bottom: 25%;
  right: 20%;
  animation: treasure-bounce 3s ease-in-out infinite;
  animation-delay: 1s;
}

.treasure-gem-1 {
  top: 60%;
  left: 80%;
  animation: gem-sparkle 2.5s ease-in-out infinite;
  animation-delay: 0.5s;
}

.treasure-gem-2 {
  top: 30%;
  right: 10%;
  animation: gem-float 3.5s ease-in-out infinite;
  animation-delay: 1.5s;
}

.treasure-coin-1 {
  bottom: 60%;
  left: 10%;
  animation: coin-spin 2s linear infinite;
  animation-delay: 2s;
}

.mint-grid-overlay {
  position: absolute;
  inset: 0;
  background-image:
    linear-gradient(rgba(34, 197, 94, 0.03) 1px, transparent 1px),
    linear-gradient(90deg, rgba(34, 197, 94, 0.03) 1px, transparent 1px);
  background-size: 80px 80px;
  opacity: 0.4;
}

/* Mint Page Floating Particles - Gem/Treasure Theme */
.mint-particles {
  position: absolute;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
}

.mint-particle-1 {
  position: absolute;
  top: 15%;
  left: 20%;
  width: 12px;
  height: 12px;
  background: linear-gradient(45deg, rgba(34, 197, 94, 0.9), rgba(16, 185, 129, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 25px rgba(34, 197, 94, 0.7);
  animation: treasure-float 4s ease-in-out infinite;
}

.mint-particle-2 {
  position: absolute;
  top: 70%;
  right: 15%;
  width: 8px;
  height: 8px;
  background: linear-gradient(45deg, rgba(5, 150, 105, 0.9), rgba(34, 197, 94, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 20px rgba(5, 150, 105, 0.7);
  animation: treasure-float 3s ease-in-out infinite reverse;
}

.mint-particle-3 {
  position: absolute;
  bottom: 40%;
  left: 75%;
  width: 10px;
  height: 10px;
  background: linear-gradient(45deg, rgba(16, 185, 129, 0.9), rgba(5, 150, 105, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 22px rgba(16, 185, 129, 0.7);
  animation: treasure-float 3.5s ease-in-out infinite;
}

.mint-particle-4 {
  position: absolute;
  top: 45%;
  left: 10%;
  width: 6px;
  height: 6px;
  background: linear-gradient(45deg, rgba(52, 211, 153, 0.9), rgba(34, 197, 94, 0.9));
  border-radius: 50%;
  box-shadow: 0 0 18px rgba(52, 211, 153, 0.7);
  animation: treasure-float 2.5s ease-in-out infinite;
}

.mint-particle-5 {
  position: absolute;
  bottom: 20%;
  right: 60%;
  width: 14px;
  height: 14px;
  background: linear-gradient(45deg, rgba(34, 197, 94, 0.8), rgba(16, 185, 129, 0.8));
  border-radius: 50%;
  box-shadow: 0 0 28px rgba(34, 197, 94, 0.6);
  animation: treasure-float 4.5s ease-in-out infinite reverse;
}

/* Mint Page Geometric Shapes - Blockchain/Diamond Theme */
.mint-shape-1 {
  position: absolute;
  top: 20%;
  right: 20%;
  width: 36px;
  height: 36px;
  background: linear-gradient(45deg, transparent, rgba(34, 197, 94, 0.3));
  border: 2px solid rgba(34, 197, 94, 0.5);
  transform: rotate(45deg);
  animation: spin 15s linear infinite;
}

.mint-shape-2 {
  position: absolute;
  bottom: 25%;
  left: 15%;
  width: 24px;
  height: 24px;
  border: 2px solid rgba(5, 150, 105, 0.5);
  border-radius: 50%;
  animation: pulse 3s ease-in-out infinite;
}

.mint-shape-3 {
  position: absolute;
  top: 60%;
  right: 80%;
  width: 18px;
  height: 18px;
  background: linear-gradient(45deg,
      rgba(34, 197, 94, 0.4),
      rgba(5, 150, 105, 0.4));
  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
  animation: bounce 2s infinite;
  animation-delay: 0.7s;
}

.mint-shape-4 {
  position: absolute;
  top: 30%;
  left: 5%;
  width: 20px;
  height: 20px;
  border: 1px solid rgba(52, 211, 153, 0.6);
  transform: rotate(30deg);
  animation: ping 3s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Mint Page Content */
.mint-content {
  position: relative;
  z-index: 10;
  max-width: 1536px;
  margin: 0 auto;
  padding: 0 24px;
}

.mint-title {
  font-size: clamp(3rem, 8vw, 7rem);
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(90deg,
      rgba(34, 197, 94, 1) 0%,
      rgba(5, 150, 105, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: treasure-glow 3s ease-in-out infinite;
  text-align: center;
}

.mint-description {
  font-size: 1.25rem;
  color: #d1d5db;
  max-width: 768px;
  margin: 0 auto 32px;
  line-height: 1.75;
  text-align: center;
}

/* Bitcoin Link Styling - Shiny/Golden effect */
.bitcoin-link {
  color: inherit;
  text-decoration: none;
  background: linear-gradient(90deg,
      rgba(255, 215, 0, 0.9) 0%,
      rgba(255, 193, 7, 0.9) 25%,
      rgba(255, 235, 59, 1) 50%,
      rgba(255, 193, 7, 0.9) 75%,
      rgba(255, 215, 0, 0.9) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
  transition: all 0.3s ease;
  cursor: pointer;
  animation: bitcoin-shine 3s ease-in-out infinite;
}

.bitcoin-link:hover {
  filter: brightness(1.3) drop-shadow(0 0 8px rgba(255, 215, 0, 0.6));
  transform: scale(1.05);
}

/* AO Link Styling - Green theme to match section */
.ao-link {
  color: inherit;
  text-decoration: none;
  background: linear-gradient(90deg,
      rgba(34, 197, 94, 0.9) 0%,
      rgba(5, 150, 105, 0.9) 25%,
      rgba(16, 185, 129, 1) 50%,
      rgba(5, 150, 105, 0.9) 75%,
      rgba(34, 197, 94, 0.9) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
  transition: all 0.3s ease;
  cursor: pointer;
}

.ao-link:hover {
  filter: brightness(1.3) drop-shadow(0 0 8px rgba(34, 197, 94, 0.6));
  transform: scale(1.05);
}

/* Tokenomics, Match, and Utility Container */
.tokenomics-utility-container {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  gap: 24px;
  margin: 48px 0;
  flex-wrap: wrap;
}

@media (max-width: 1200px) {
  .tokenomics-utility-container {
    gap: 20px;
  }
}

@media (max-width: 900px) {
  .tokenomics-utility-container {
    flex-direction: column;
    align-items: center;
    gap: 24px;
  }
}

@media (max-width: 768px) {
  .tokenomics-utility-container {
    margin: 32px 16px;
    gap: 20px;
  }
}

@media (max-width: 480px) {
  .tokenomics-utility-container {
    margin: 24px 12px;
    gap: 16px;
  }
}

/* Mint Headliners */
.mint-headliners {
  display: flex;
  justify-content: center;
  gap: 64px;
  margin-bottom: 64px;
  flex-wrap: wrap;
}

.mint-headline {
  text-align: center;
  padding: 24px;
  background: rgba(15, 23, 42, 0.6);
  border: 2px solid rgba(34, 197, 94, 0.3);
  border-radius: 20px;
  backdrop-filter: blur(16px);
  min-width: 200px;
  transition: all 0.3s ease;
}

.mint-headline:hover {
  border-color: rgba(34, 197, 94, 0.6);
  transform: translateY(-4px);
  box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.3);
}

.mint-headline-value {
  font-size: 2.5rem;
  font-weight: 900;
  background: linear-gradient(90deg,
      rgba(34, 197, 94, 1) 0%,
      rgba(5, 150, 105, 1) 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 8px;
  animation: treasure-glow 3s ease-in-out infinite;
}

.mint-headline-label {
  color: #9ca3af;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

@media (max-width: 768px) {
  .mint-headliners {
    gap: 32px;
  }

  .mint-headline {
    min-width: 160px;
    padding: 20px;
  }

  .mint-headline-value {
    font-size: 2rem;
  }
}

/* Mint Interface */
.mint-interface {
  margin: 48px 0;
  display: flex;
  justify-content: center;
}

.mint-interface-card {
  background: linear-gradient(135deg,
      rgba(15, 23, 42, 0.8) 0%,
      rgba(30, 41, 59, 0.8) 100%);
  border: 2px solid rgba(34, 197, 94, 0.3);
  border-radius: 24px;
  padding: 40px;
  backdrop-filter: blur(16px);
  text-align: center;
  max-width: 600px;
  width: 100%;
  position: relative;
  overflow: hidden;
  transition: all 0.4s ease;
}

.mint-interface-card::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg,
      rgba(34, 197, 94, 0.1) 0%,
      rgba(5, 150, 105, 0.1) 100%);
  opacity: 0;
  transition: opacity 0.4s ease;
}

.mint-interface-card:hover::before {
  opacity: 1;
}

.mint-interface-card:hover {
  transform: translateY(-8px);
  border-color: rgba(34, 197, 94, 0.6);
  box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.4);
}

.mint-interface-title {
  font-size: 2rem;
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  margin-bottom: 16px;
  position: relative;
  z-index: 2;
}

.mint-interface-description {
  color: #9ca3af;
  margin-bottom: 32px;
  line-height: 1.6;
  position: relative;
  z-index: 2;
}

.mint-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
  position: relative;
  z-index: 2;
}

.mint-stat {
  text-align: center;
  padding: 20px;
  background: rgba(15, 23, 42, 0.6);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 12px;
  transition: all 0.3s ease;
}

.mint-stat:hover {
  border-color: rgba(34, 197, 94, 0.4);
  transform: translateY(-2px);
}

.mint-stat-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  margin-bottom: 8px;
}

.mint-stat-label {
  color: #9ca3af;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.mint-actions {
  display: flex;
  flex-direction: column;
  gap: 24px;
  justify-content: center;
  align-items: center;
  position: relative;
  z-index: 2;
}

.wallet-balances-section {
  display: flex;
  gap: 16px;
  justify-content: center;
  align-items: stretch;
  flex-wrap: wrap;
  margin-bottom: 24px;
  position: relative;
  z-index: 2;
}

.staking-actions-section {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  gap: 20px;
  margin: 30px 0;
  padding: 20px 0;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.wallet-buttons-container {
  display: flex;
  gap: 16px;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
}

@media (max-width: 768px) {
  .wallet-balances-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin: 30px 0;
  }

  .staking-actions-section {
    grid-template-columns: 1fr;
  }

  .wallet-buttons-container {
    flex-direction: column;
    gap: 12px;
  }
}

@media (max-width: 480px) {
  .mint-actions {
    gap: 20px;
  }

  .wallet-buttons-container {
    gap: 16px;
  }
}

.connect-wallet-btn,
.mint-tokens-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 16px 24px;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  min-width: 160px;
}

.connect-wallet-btn {
  background: linear-gradient(135deg,
      rgba(59, 130, 246, 0.1) 0%,
      rgba(99, 102, 241, 0.1) 100%);
  border: 1px solid rgba(59, 130, 246, 0.3);
  color: rgba(59, 130, 246, 1);
}

.connect-wallet-btn:hover {
  border-color: rgba(59, 130, 246, 0.6);
  background: linear-gradient(135deg,
      rgba(59, 130, 246, 0.15) 0%,
      rgba(99, 102, 241, 0.15) 100%);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(59, 130, 246, 0.3);
}

.mint-tokens-btn {
  background: linear-gradient(90deg,
      rgba(34, 197, 94, 1) 0%,
      rgba(5, 150, 105, 1) 100%);
  color: white;
}

.mint-tokens-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px -8px rgba(34, 197, 94, 0.5);
}

/* Mint Details */
.mint-details {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  gap: 48px;
  margin-top: 64px;
}

@media (max-width: 768px) {
  .mint-details {
    grid-template-columns: 1fr;
    gap: 32px;
  }
}

.mint-detail-section {
  background: rgba(15, 23, 42, 0.6);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 20px;
  padding: 32px;
  backdrop-filter: blur(8px);
  transition: all 0.3s ease;
}

.mint-detail-section:hover {
  border-color: rgba(34, 197, 94, 0.4);
  transform: translateY(-4px);
  box-shadow: 0 15px 30px -8px rgba(34, 197, 94, 0.2);
}

.mint-detail-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: rgba(34, 197, 94, 1);
  margin-bottom: 24px;
  text-align: center;
}

.mint-detail-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 16px;
}

.mint-detail-item {
  text-align: center;
  padding: 16px;
  background: rgba(15, 23, 42, 0.5);
  border-radius: 12px;
  border: 1px solid rgba(34, 197, 94, 0.1);
  transition: all 0.3s ease;
}

.mint-detail-item:hover {
  border-color: rgba(34, 197, 94, 0.3);
  transform: translateY(-2px);
}

.mint-detail-label {
  color: #9ca3af;
  font-size: 0.9rem;
  margin-bottom: 8px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.mint-detail-value {
  color: rgba(34, 197, 94, 1);
  font-weight: 600;
  font-size: 1.1rem;
}

.mint-utility-list {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.mint-utility-item {
  display: flex;
  align-items: flex-start;
  gap: 16px;
  padding: 20px;
  background: rgba(15, 23, 42, 0.5);
  border-radius: 12px;
  border: 1px solid rgba(34, 197, 94, 0.1);
  transition: all 0.3s ease;
}

.mint-utility-item:hover {
  border-color: rgba(34, 197, 94, 0.3);
  transform: translateY(-2px);
}

.mint-utility-icon {
  font-size: 2rem;
  flex-shrink: 0;
}

.mint-utility-content h4 {
  color: rgba(34, 197, 94, 1);
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 8px;
}

.mint-utility-content p {
  color: #9ca3af;
  line-height: 1.5;
}

/* Animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

@keyframes treasure-glow {

  0%,
  100% {
    opacity: 1;
    filter: brightness(1);
  }

  50% {
    opacity: 0.8;
    filter: brightness(1.2);
  }
}

@keyframes treasure-float {

  0%,
  100% {
    transform: translateY(0px) rotate(0deg);
  }

  33% {
    transform: translateY(-15px) rotate(120deg);
  }

  66% {
    transform: translateY(-8px) rotate(240deg);
  }
}

@keyframes pulse {

  0%,
  100% {
    opacity: 1;
    transform: scale(1);
  }

  50% {
    opacity: 0.7;
    transform: scale(1.1);
  }
}

@keyframes bounce {

  0%,
  100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }

  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@keyframes ping {

  75%,
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Treasure Animation Keyframes */
@keyframes treasure-bounce {

  0%,
  100% {
    transform: translateY(0px) scale(1);
  }

  50% {
    transform: translateY(-20px) scale(1.1);
  }
}

@keyframes gem-sparkle {

  0%,
  100% {
    transform: scale(1) rotate(0deg);
    opacity: 0.5;
  }

  25% {
    transform: scale(1.3) rotate(90deg);
    opacity: 0.8;
  }

  50% {
    transform: scale(1.1) rotate(180deg);
    opacity: 1;
  }

  75% {
    transform: scale(1.2) rotate(270deg);
    opacity: 0.7;
  }
}

@keyframes gem-float {

  0%,
  100% {
    transform: translateY(0px) translateX(0px);
  }

  33% {
    transform: translateY(-15px) translateX(10px);
  }

  66% {
    transform: translateY(-5px) translateX(-8px);
  }
}

@keyframes coin-spin {
  0% {
    transform: rotateY(0deg) scale(1);
  }

  50% {
    transform: rotateY(180deg) scale(1.2);
  }

  100% {
    transform: rotateY(360deg) scale(1);
  }
}

@keyframes bitcoin-shine {

  0%,
  100% {
    background-position: -200% center;
  }

  50% {
    background-position: 200% center;
  }
}
</file>

<file path="src/pages/Mint/components/WalletConnections/components/DAIConnection.tsx">
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useState, useEffect } from 'react';
import { useAppKit, useAppKitAccount } from '@reown/appkit/react';
import { useAccount, useBalance, useWriteContract, useWaitForTransactionReceipt, useReadContract } from 'wagmi';
import { formatEther, parseEther } from 'viem';
import { useAOSDAIStaking, useArweaveAOWallet, useDelegation } from '../../../../../shared/contexts';
import { AUTONOMOUS_FINANCE } from 'ao-js-sdk/src/processes/ids/autonomous-finance';
import { daiStaking, DAI_TOKEN_ADDRESS } from '../../../../../utils/AO/DAIStaking';
import { ERC20_ABI } from '../../../../../utils/AO/shared/erc20Abi';

const DAIConnection: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [stakeAmount, setStakeAmount] = useState('');
    const [unstakeAmount, setUnstakeAmount] = useState('');
    const [customArweaveAddress, setCustomArweaveAddress] = useState('');
    const [isStaking, setIsStaking] = useState(false);
    const [isUnstaking, setIsUnstaking] = useState(false);
    const [pendingStakeAfterApproval, setPendingStakeAfterApproval] = useState(false);

    const { open } = useAppKit();
    const { address, isConnected } = useAppKitAccount();
    const { address: wagmiAddress } = useAccount();
    const { address: arweaveAddress } = useArweaveAOWallet();
    const { setGameDelegation, delegations } = useDelegation();
    const { data: balance, refetch: refetchEthBalance } = useBalance({ address: wagmiAddress });
    const { data: daiBalance, refetch: refetchDaiBalance } = useBalance({
        address: wagmiAddress,
        token: DAI_TOKEN_ADDRESS
    });
    const { stakingBalance, refetch } = useAOSDAIStaking();

    // Read DAI allowance
    const { data: daiAllowance, refetch: refetchAllowance } = useReadContract({
        address: DAI_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'allowance',
        args: wagmiAddress ? [wagmiAddress, daiStaking.getStakingContractAddress()] : undefined,
        query: {
            enabled: !!wagmiAddress && isConnected,
        },
    });

    // Contract write hooks
    const { writeContract: writeApprove, data: approveHash } = useWriteContract();
    const { writeContract: writeStake, data: stakeHash } = useWriteContract();
    const { writeContract: writeUnstake, data: unstakeHash } = useWriteContract();

    // Transaction receipt hooks
    const { isLoading: isApproveLoading, isSuccess: isApproveSuccess } = useWaitForTransactionReceipt({
        hash: approveHash,
    });

    const { isLoading: isStakeLoading, isSuccess: isStakeSuccess } = useWaitForTransactionReceipt({
        hash: stakeHash,
    });

    const { isLoading: isUnstakeLoading, isSuccess: isUnstakeSuccess } = useWaitForTransactionReceipt({
        hash: unstakeHash,
    });

    // Handle successful transactions
    useEffect(() => {
        if (isApproveSuccess) {
            refetchAllowance();
            // Automatically trigger stake after approval if pending
            if (pendingStakeAfterApproval) {
                setPendingStakeAfterApproval(false);
                handleStake();
            }
        }
    }, [isApproveSuccess, refetchAllowance, pendingStakeAfterApproval]);

    useEffect(() => {
        if (isStakeSuccess) {
            setStakeAmount('');
            setIsStaking(false);
            refetch();

            // Only set GAME delegation if not already at 100%
            const gameDelegation = delegations.find(
                delegation => delegation.delegatee === AUTONOMOUS_FINANCE.FAIR_LAUNCH_PROCESSES.GAME
            );
            const gamePercentage = gameDelegation ? parseFloat(gameDelegation.percentage) : 0;

            if (gamePercentage < 100) {
                setGameDelegation();
            }
        }
    }, [isStakeSuccess, refetch, setGameDelegation, delegations]);

    useEffect(() => {
        if (isUnstakeSuccess) {
            setUnstakeAmount('');
            setIsUnstaking(false);
            refetch();
        }
    }, [isUnstakeSuccess, refetch]);

    // Auto-refresh balances when window regains focus (after swap)
    useEffect(() => {
        const handleFocus = () => {
            if (isConnected) {
                refetchEthBalance();
                refetchDaiBalance();
                refetchAllowance();
            }
        };

        window.addEventListener('focus', handleFocus);
        return () => window.removeEventListener('focus', handleFocus);
    }, [isConnected, refetchEthBalance, refetchDaiBalance, refetchAllowance]);

    const handleConnect = () => {
        open();
    };

    const handleDisconnect = () => {
        open({ view: 'Account' });
    };

    const formatAddress = (addr: string) => {
        return `${addr.slice(0, 3)}...${addr.slice(-3)}`;
    };

    const formatBalance = (balance: bigint | undefined) => {
        if (!balance) return '0.0000';
        const formatted = formatEther(balance);
        return parseFloat(formatted).toFixed(4);
    };

    const handleApprove = async () => {
        if (!stakeAmount || !wagmiAddress) return;

        try {
            setPendingStakeAfterApproval(true);
            const amount = parseEther(stakeAmount);
            writeApprove({
                address: DAI_TOKEN_ADDRESS,
                abi: ERC20_ABI,
                functionName: 'approve',
                args: [daiStaking.getStakingContractAddress(), amount],
            } as any);
        } catch (error) {
            console.error('Approve error:', error);
            setPendingStakeAfterApproval(false);
        }
    };

    const handleDepositClick = async () => {
        if (needsApproval) {
            handleApprove();
        } else {
            handleStake();
        }
    };

    const handleStake = async () => {
        const targetArweaveAddress = arweaveAddress || customArweaveAddress;
        if (!stakeAmount || !wagmiAddress || !targetArweaveAddress) return;

        try {
            setIsStaking(true);
            const stakeConfig = daiStaking.createStakeConfig(0, stakeAmount, targetArweaveAddress);
            writeStake(stakeConfig as any);
        } catch (error) {
            console.error('Stake error:', error);
            setIsStaking(false);
        }
    };

    const handleUnstake = async () => {
        const targetArweaveAddress = arweaveAddress || customArweaveAddress;
        if (!unstakeAmount || !wagmiAddress || !targetArweaveAddress) return;

        try {
            setIsUnstaking(true);
            const unstakeConfig = daiStaking.createWithdrawConfig(0, unstakeAmount, targetArweaveAddress);
            writeUnstake(unstakeConfig as any);
        } catch (error) {
            console.error('Unstake error:', error);
            if (error instanceof Error) {
                alert(`Unstake failed: ${error.message}`);
            } else {
                alert('Unstake failed. Please check your wallet and try again.');
            }
            setIsUnstaking(false);
        }
    };

    const needsApproval = stakeAmount && daiAllowance !== undefined &&
        parseEther(stakeAmount) > (daiAllowance as bigint);

    const maxStakeAmount = daiBalance?.value ? formatEther(daiBalance.value) : '0';
    const maxUnstakeAmount = stakingBalance.stakedAmount ?
        daiStaking.formatAmount(stakingBalance.stakedAmount) : '0';

    return (
        <div className={`wallet-connection-card ${isModalOpen ? 'modal-open' : ''}`}>
            <div className="wallet-connection-header">
                <div className="wallet-connection-icon">
                    <img src="/dai-logo.png" alt="DAI" />
                </div>
                <div>
                    <h3 className="wallet-connection-title">DAI Deposits</h3>
                    <p className="wallet-connection-network">Ethereum Network</p>
                </div>
            </div>

            <div className="wallet-connection-status">
                {isConnected ? (
                    <div className="connection-status-connected">
                        <span>🟢</span>
                        <span>Connected</span>
                        {address && (
                            <span className="connection-address">
                                {formatAddress(address)}
                            </span>
                        )}
                    </div>
                ) : (
                    <div className="connection-status-disconnected">
                        <span>🔴</span>
                        <span>Not Connected</span>
                    </div>
                )}
            </div>

            <div className="wallet-connection-balances">
                {isConnected && (
                    <button
                        className="swap-button"
                        onClick={() => {
                            const ethBalance = balance?.value || 0n;
                            const reserveAmount = BigInt('10000000000000000'); // 0.01 ETH in wei
                            const swapAmount = ethBalance > reserveAmount ? ethBalance - reserveAmount : 0n;
                            const formattedAmount = formatEther(swapAmount);

                            open({
                                view: 'Swap',
                                arguments: {
                                    fromToken: '0x0000000000000000000000000000000000000000', // ETH
                                    toToken: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // DAI
                                    amount: formattedAmount
                                }
                            });
                        }}
                    >
                        Swap ETH → DAI
                    </button>
                )}

                <div className="balance-item">
                    <span className="balance-label">DAI Balance</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : (
                            `${formatBalance(daiBalance?.value)} DAI`
                        )}
                    </span>
                </div>

                {isConnected && (
                    <div className="deposit-withdraw-actions">
                        <button
                            className="deposit-withdraw-button"
                            onClick={() => setIsModalOpen(true)}
                        >
                            Deposit / Withdraw
                        </button>
                    </div>
                )}

                <div className="balance-item">
                    <span className="balance-label">Deposited DAI</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : stakingBalance.isLoading ? (
                            <span className="balance-loading">Loading...</span>
                        ) : stakingBalance.error ? (
                            <span className="balance-placeholder">N/A</span>
                        ) : (
                            `${stakingBalance.stakedAmount ? parseFloat(daiStaking.formatAmount(stakingBalance.stakedAmount)).toFixed(4) : '0.0000'} DAI`
                        )}
                    </span>
                </div>
            </div>

            {!isConnected ? (
                <button
                    className="wallet-connect-button wallet-connect-button-ethereum"
                    onClick={handleConnect}
                >
                    <img src="/ethereum-logo.svg" alt="Ethereum" style={{ width: '16px', height: '16px' }} />
                    <span>Connect Ethereum</span>
                </button>
            ) : (
                <button
                    className="wallet-disconnect-button"
                    onClick={handleDisconnect}
                >
                    Manage Wallet
                </button>
            )}

            {/* Deposit/Withdraw Modal */}
            {isModalOpen && (
                <div className="modal-overlay" onClick={() => setIsModalOpen(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>DAI Deposit / Withdraw</h3>
                            <button
                                className="modal-close-button"
                                onClick={() => setIsModalOpen(false)}
                            >
                                ×
                            </button>
                        </div>
                        <div className="modal-body">
                            <div className="staking-actions-content">
                                {/* AO Wallet Address Section */}
                                <div className="staking-action-section">
                                    <h4 className="staking-action-title">AO Wallet Address</h4>
                                    <div className="staking-balance-info">
                                        {arweaveAddress ? 'Connected AO Wallet (auto-filled)' : 'Enter your AO wallet address'}
                                    </div>
                                    <div className="staking-input-group">
                                        <input
                                            type="text"
                                            className="staking-input"
                                            placeholder="Enter AO wallet address..."
                                            value={arweaveAddress || customArweaveAddress}
                                            onChange={(e) => {
                                                if (!arweaveAddress) {
                                                    setCustomArweaveAddress(e.target.value);
                                                }
                                            }}
                                            disabled={!!arweaveAddress || isStaking || isUnstaking || isApproveLoading}
                                            style={{ fontFamily: 'monospace', fontSize: '0.9rem' }}
                                        />
                                        {arweaveAddress && (
                                            <div style={{
                                                fontSize: '0.8rem',
                                                color: 'rgba(34, 197, 94, 1)',
                                                marginTop: '4px'
                                            }}>
                                                ✓ Auto-filled from connected AO wallet
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {(arweaveAddress || customArweaveAddress) && (
                                    <>
                                        {/* Stake Section */}
                                        <div className="staking-action-section">
                                            <h4 className="staking-action-title">Deposit DAI</h4>
                                            <div className="staking-balance-info">
                                                Available: {maxStakeAmount} DAI
                                            </div>
                                            <div className="staking-input-group">
                                                <input
                                                    type="number"
                                                    className="staking-input"
                                                    placeholder="0.0"
                                                    value={stakeAmount}
                                                    min="0"
                                                    step="any"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        if (value === '' || (parseFloat(value) >= 0 && !isNaN(parseFloat(value)))) {
                                                            setStakeAmount(value);
                                                        }
                                                    }}
                                                    disabled={isStaking || isApproveLoading}
                                                />
                                                <button
                                                    className="staking-max-btn"
                                                    onClick={() => setStakeAmount(maxStakeAmount)}
                                                    disabled={isStaking || isApproveLoading}
                                                >
                                                    MAX
                                                </button>
                                            </div>
                                            <button
                                                className={`staking-action-btn ${needsApproval ? 'approve-btn' : 'stake-btn'}`}
                                                onClick={handleDepositClick}
                                                disabled={!stakeAmount || isApproveLoading || isStaking || isStakeLoading}
                                            >
                                                {isApproveLoading ? 'Approving...' :
                                                    isStaking || isStakeLoading ? 'Depositing...' :
                                                        needsApproval ? 'Approve & Deposit DAI' : 'Deposit DAI'}
                                            </button>
                                        </div>

                                        {/* Unstake Section */}
                                        <div className="staking-action-section">
                                            <h4 className="staking-action-title">Withdraw DAI</h4>
                                            <div className="staking-balance-info">
                                                Deposited: {maxUnstakeAmount} DAI
                                            </div>
                                            <div className="staking-input-group">
                                                <input
                                                    type="number"
                                                    className="staking-input"
                                                    placeholder="0.0"
                                                    value={unstakeAmount}
                                                    min="0"
                                                    step="any"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        if (value === '' || (parseFloat(value) >= 0 && !isNaN(parseFloat(value)))) {
                                                            setUnstakeAmount(value);
                                                        }
                                                    }}
                                                    disabled={isUnstaking}
                                                />
                                                <button
                                                    className="staking-max-btn"
                                                    onClick={() => setUnstakeAmount(maxUnstakeAmount)}
                                                    disabled={isUnstaking}
                                                >
                                                    MAX
                                                </button>
                                            </div>
                                            <button
                                                className="staking-action-btn unstake-btn"
                                                onClick={handleUnstake}
                                                disabled={!unstakeAmount || isUnstaking || isUnstakeLoading}
                                            >
                                                {isUnstaking || isUnstakeLoading ? 'Withdrawing...' : 'Withdraw DAI'}
                                            </button>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default DAIConnection;
</file>

<file path="src/pages/Mint/components/WalletConnections/components/STETHConnection.tsx">
/* eslint-disable @typescript-eslint/no-explicit-any */

import React, { useState, useEffect } from 'react';
import { useAppKit, useAppKitAccount } from '@reown/appkit/react';
import { useAccount, useBalance, useWriteContract, useWaitForTransactionReceipt, useReadContract } from 'wagmi';
import { formatEther, parseEther } from 'viem';
import { useAOSTETHStaking, useArweaveAOWallet, useDelegation } from '../../../../../shared/contexts';
import { AUTONOMOUS_FINANCE } from 'ao-js-sdk/src/processes/ids/autonomous-finance';
import { ethStaking, STETH_TOKEN_ADDRESS } from '../../../../../utils/AO/ETHStaking';
import { ERC20_ABI } from '../../../../../utils/AO/shared/erc20Abi';

const STETHConnection: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [stakeAmount, setStakeAmount] = useState('');
    const [unstakeAmount, setUnstakeAmount] = useState('');
    const [customArweaveAddress, setCustomArweaveAddress] = useState('');
    const [isStaking, setIsStaking] = useState(false);
    const [isUnstaking, setIsUnstaking] = useState(false);
    const [pendingStakeAfterApproval, setPendingStakeAfterApproval] = useState(false);
    const { open } = useAppKit();
    const { address, isConnected } = useAppKitAccount();
    const { address: wagmiAddress } = useAccount();
    const { address: arweaveAddress } = useArweaveAOWallet();
    const { setGameDelegation, delegations } = useDelegation();
    const { data: balance, refetch: refetchEthBalance } = useBalance({ address: wagmiAddress });
    const { data: stethBalance, refetch: refetchStethBalance } = useBalance({
        address: wagmiAddress,
        token: STETH_TOKEN_ADDRESS
    });
    const { stakingBalance, refetch } = useAOSTETHStaking();

    // Read STETH allowance
    const { data: stethAllowance, refetch: refetchAllowance } = useReadContract({
        address: STETH_TOKEN_ADDRESS,
        abi: ERC20_ABI,
        functionName: 'allowance',
        args: wagmiAddress ? [wagmiAddress, ethStaking.getStakingContractAddress()] : undefined,
        query: {
            enabled: !!wagmiAddress && isConnected,
        },
    });

    // Contract write hooks
    const { writeContract: writeApprove, data: approveHash } = useWriteContract();
    const { writeContract: writeStake, data: stakeHash } = useWriteContract();
    const { writeContract: writeUnstake, data: unstakeHash } = useWriteContract();

    // Transaction receipt hooks
    const { isLoading: isApproveLoading, isSuccess: isApproveSuccess } = useWaitForTransactionReceipt({
        hash: approveHash,
    });

    const { isLoading: isStakeLoading, isSuccess: isStakeSuccess } = useWaitForTransactionReceipt({
        hash: stakeHash,
    });

    const { isLoading: isUnstakeLoading, isSuccess: isUnstakeSuccess } = useWaitForTransactionReceipt({
        hash: unstakeHash,
    });

    // Handle successful transactions
    useEffect(() => {
        if (isApproveSuccess) {
            refetchAllowance();
            // Automatically trigger stake after approval if pending
            if (pendingStakeAfterApproval) {
                setPendingStakeAfterApproval(false);
                handleStake();
            }
        }
    }, [isApproveSuccess, refetchAllowance, pendingStakeAfterApproval]);

    useEffect(() => {
        if (isStakeSuccess) {
            setStakeAmount('');
            setIsStaking(false);
            refetch();

            // Only set GAME delegation if not already at 100%
            const gameDelegation = delegations.find(
                delegation => delegation.delegatee === AUTONOMOUS_FINANCE.FAIR_LAUNCH_PROCESSES.GAME
            );
            const gamePercentage = gameDelegation ? parseFloat(gameDelegation.percentage) : 0;

            if (gamePercentage < 100) {
                setGameDelegation();
            }
        }
    }, [isStakeSuccess, refetch, setGameDelegation, delegations]);

    useEffect(() => {
        if (isUnstakeSuccess) {
            setUnstakeAmount('');
            setIsUnstaking(false);
            refetch();
        }
    }, [isUnstakeSuccess, refetch]);

    // Auto-refresh balances when window regains focus (after swap)
    useEffect(() => {
        const handleFocus = () => {
            if (isConnected) {
                refetchEthBalance();
                refetchStethBalance();
                refetchAllowance();
            }
        };

        window.addEventListener('focus', handleFocus);
        return () => window.removeEventListener('focus', handleFocus);
    }, [isConnected, refetchEthBalance, refetchStethBalance, refetchAllowance]);

    const handleConnect = () => {
        open();
    };

    const handleDisconnect = () => {
        open({ view: 'Account' });
    };

    const formatAddress = (addr: string) => {
        return `${addr.slice(0, 3)}...${addr.slice(-3)}`;
    };

    const formatBalance = (balance: bigint | undefined) => {
        if (!balance) return '0.0000';
        const formatted = formatEther(balance);
        return parseFloat(formatted).toFixed(4);
    };

    const handleApprove = async () => {
        if (!stakeAmount || !wagmiAddress) return;

        try {
            setPendingStakeAfterApproval(true);
            const amount = parseEther(stakeAmount);
            writeApprove({
                address: STETH_TOKEN_ADDRESS,
                abi: ERC20_ABI,
                functionName: 'approve',
                args: [ethStaking.getStakingContractAddress(), amount],
            } as any);
        } catch (error) {
            console.error('Approve error:', error);
            setPendingStakeAfterApproval(false);
        }
    };

    const handleDepositClick = async () => {
        if (needsApproval) {
            handleApprove();
        } else {
            handleStake();
        }
    };

    const handleStake = async () => {
        const targetArweaveAddress = arweaveAddress || customArweaveAddress;
        if (!stakeAmount || !wagmiAddress || !targetArweaveAddress) return;

        try {
            setIsStaking(true);
            const stakeConfig = ethStaking.createStakeConfig(0, stakeAmount, targetArweaveAddress);
            writeStake(stakeConfig as any);
        } catch (error) {
            console.error('Stake error:', error);
            setIsStaking(false);
        }
    };

    const handleUnstake = async () => {
        const targetArweaveAddress = arweaveAddress || customArweaveAddress;
        if (!unstakeAmount || !wagmiAddress || !targetArweaveAddress) return;

        try {
            setIsUnstaking(true);
            const unstakeConfig = ethStaking.createWithdrawConfig(0, unstakeAmount, targetArweaveAddress);
            writeUnstake(unstakeConfig as any);
        } catch (error) {
            console.error('Unstake error:', error);
            if (error instanceof Error) {
                alert(`Unstake failed: ${error.message}`);
            } else {
                alert('Unstake failed. Please check your wallet and try again.');
            }
            setIsUnstaking(false);
        }
    };

    const needsApproval = stakeAmount && stethAllowance !== undefined &&
        parseEther(stakeAmount) > (stethAllowance as bigint);

    const maxStakeAmount = stethBalance?.value ? formatEther(stethBalance.value) : '0';
    const maxUnstakeAmount = stakingBalance.stakedAmount ?
        ethStaking.formatAmount(stakingBalance.stakedAmount) : '0';

    return (
        <div className={`wallet-connection-card ${isModalOpen ? 'modal-open' : ''}`}>
            <div className="wallet-connection-header">
                <div className="wallet-connection-icon">
                    <img src="/lido-stETH-logo-transparent.svg" alt="Ethereum" />
                </div>
                <div>
                    <h3 className="wallet-connection-title">stETH Deposits</h3>
                    <p className="wallet-connection-network">Ethereum Network</p>
                </div>
            </div>

            <div className="wallet-connection-status">
                {isConnected ? (
                    <div className="connection-status-connected">
                        <span>🟢</span>
                        <span>Connected</span>
                        {address && (
                            <span className="connection-address">
                                {formatAddress(address)}
                            </span>
                        )}
                    </div>
                ) : (
                    <div className="connection-status-disconnected">
                        <span>🔴</span>
                        <span>Not Connected</span>
                    </div>
                )}
            </div>

            <div className="wallet-connection-balances">
                {isConnected && (
                    <button
                        className="swap-button"
                        onClick={() => {
                            const ethBalance = balance?.value || 0n;
                            const reserveAmount = BigInt('10000000000000000'); // 0.01 ETH in wei
                            const swapAmount = ethBalance > reserveAmount ? ethBalance - reserveAmount : 0n;
                            const formattedAmount = formatEther(swapAmount);

                            open({
                                view: 'Swap',
                                arguments: {
                                    fromToken: '0x0000000000000000000000000000000000000000', // ETH
                                    toToken: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84', // STETH
                                    amount: formattedAmount
                                }
                            });
                        }}
                    >
                        Swap ETH → STETH
                    </button>
                )}

                <div className="balance-item">
                    <span className="balance-label">ETH Balance</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : (
                            `${formatBalance(balance?.value)} ETH`
                        )}
                    </span>
                </div>
                <div className="balance-item">
                    <span className="balance-label">STETH Balance</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : (
                            `${formatBalance(stethBalance?.value)} STETH`
                        )}
                    </span>
                </div>

                {isConnected && (
                    <div className="deposit-withdraw-actions">
                        <button
                            className="deposit-withdraw-button"
                            onClick={() => setIsModalOpen(true)}
                        >
                            Deposit / Withdraw
                        </button>
                    </div>
                )}

                <div className="balance-item">
                    <span className="balance-label">Deposited STETH</span>
                    <span className="balance-value">
                        {!isConnected ? (
                            <span className="balance-placeholder">--</span>
                        ) : stakingBalance.isLoading ? (
                            <span className="balance-loading">Loading...</span>
                        ) : stakingBalance.error ? (
                            <span className="balance-placeholder">N/A</span>
                        ) : (
                            `${stakingBalance.stakedAmount ? parseFloat(ethStaking.formatAmount(stakingBalance.stakedAmount)).toFixed(4) : '0.0000'} STETH`
                        )}
                    </span>
                </div>
            </div>

            {!isConnected ? (
                <button
                    className="wallet-connect-button wallet-connect-button-ethereum"
                    onClick={handleConnect}
                >
                    <img src="/ethereum-logo.svg" alt="Ethereum" style={{ width: '16px', height: '16px' }} />
                    <span>Connect Ethereum</span>
                </button>
            ) : (
                <button
                    className="wallet-disconnect-button"
                    onClick={handleDisconnect}
                >
                    Manage Wallet
                </button>
            )}

            {/* Deposit/Withdraw Modal */}
            {isModalOpen && (
                <div className="modal-overlay" onClick={() => setIsModalOpen(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>STETH Deposit / Withdraw</h3>
                            <button
                                className="modal-close-button"
                                onClick={() => setIsModalOpen(false)}
                            >
                                ×
                            </button>
                        </div>
                        <div className="modal-body">
                            <div className="staking-actions-content">
                                {/* AO Wallet Address Section */}
                                <div className="staking-action-section">
                                    <h4 className="staking-action-title">AO Wallet Address</h4>
                                    <div className="staking-balance-info">
                                        {arweaveAddress ? 'Connected AO Wallet (auto-filled)' : 'Enter your AO wallet address'}
                                    </div>
                                    <div className="staking-input-group">
                                        <input
                                            type="text"
                                            className="staking-input"
                                            placeholder="Enter AO wallet address..."
                                            value={arweaveAddress || customArweaveAddress}
                                            onChange={(e) => {
                                                if (!arweaveAddress) {
                                                    setCustomArweaveAddress(e.target.value);
                                                }
                                            }}
                                            disabled={!!arweaveAddress || isStaking || isUnstaking || isApproveLoading}
                                            style={{ fontFamily: 'monospace', fontSize: '0.9rem' }}
                                        />
                                        {arweaveAddress && (
                                            <div style={{
                                                fontSize: '0.8rem',
                                                color: 'rgba(34, 197, 94, 1)',
                                                marginTop: '4px'
                                            }}>
                                                ✓ Auto-filled from connected AO wallet
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {(arweaveAddress || customArweaveAddress) && (
                                    <>
                                        {/* Stake Section */}
                                        <div className="staking-action-section">
                                            <h4 className="staking-action-title">Deposit STETH</h4>
                                            <div className="staking-balance-info">
                                                Available: {maxStakeAmount} STETH
                                            </div>
                                            <div className="staking-input-group">
                                                <input
                                                    type="number"
                                                    className="staking-input"
                                                    placeholder="0.0"
                                                    value={stakeAmount}
                                                    min="0"
                                                    step="any"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        if (value === '' || (parseFloat(value) >= 0 && !isNaN(parseFloat(value)))) {
                                                            setStakeAmount(value);
                                                        }
                                                    }}
                                                    disabled={isStaking || isApproveLoading}
                                                />
                                                <button
                                                    className="staking-max-btn"
                                                    onClick={() => setStakeAmount(maxStakeAmount)}
                                                    disabled={isStaking || isApproveLoading}
                                                >
                                                    MAX
                                                </button>
                                            </div>
                                            <button
                                                className={`staking-action-btn ${needsApproval ? 'approve-btn' : 'stake-btn'}`}
                                                onClick={handleDepositClick}
                                                disabled={!stakeAmount || isApproveLoading || isStaking || isStakeLoading}
                                            >
                                                {isApproveLoading ? 'Approving...' :
                                                    isStaking || isStakeLoading ? 'Depositing...' :
                                                        needsApproval ? 'Approve & Deposit STETH' : 'Deposit STETH'}
                                            </button>
                                        </div>

                                        {/* Unstake Section */}
                                        <div className="staking-action-section">
                                            <h4 className="staking-action-title">Withdraw STETH</h4>
                                            <div className="staking-balance-info">
                                                Deposited: {maxUnstakeAmount} STETH
                                            </div>
                                            <div className="staking-input-group">
                                                <input
                                                    type="number"
                                                    className="staking-input"
                                                    placeholder="0.0"
                                                    value={unstakeAmount}
                                                    min="0"
                                                    step="any"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        if (value === '' || (parseFloat(value) >= 0 && !isNaN(parseFloat(value)))) {
                                                            setUnstakeAmount(value);
                                                        }
                                                    }}
                                                    disabled={isUnstaking}
                                                />
                                                <button
                                                    className="staking-max-btn"
                                                    onClick={() => setUnstakeAmount(maxUnstakeAmount)}
                                                    disabled={isUnstaking}
                                                >
                                                    MAX
                                                </button>
                                            </div>
                                            <button
                                                className="staking-action-btn unstake-btn"
                                                onClick={handleUnstake}
                                                disabled={!unstakeAmount || isUnstaking || isUnstakeLoading}
                                            >
                                                {isUnstaking || isUnstakeLoading ? 'Withdrawing...' : 'Withdraw STETH'}
                                            </button>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default STETHConnection;
</file>

<file path="src/pages/Mint/components/index.ts">
export { default as ConnectArweaveAOWalletButton } from './ConnectArweaveAOWalletButton';
export { default as ConnectEthereumWalletButton } from './ConnectEthereumWalletButton';
export { ArweaveWalletBalance, EthereumWalletBalance, EthereumWalletTokenBalance, EthereumStakingBalance, DAIStakingBalance } from './WalletBalance';
export { DAIStakingActions, ETHStakingActions } from './StakingActions';
export { WalletConnections } from './WalletConnections';
export { default as TokenomicsSection } from './TokenomicsSection';
export { PermawebMatchSection } from './PermawebMatchSection';
export { default as UtilityBenefitsSection } from './UtilityBenefitsSection';
</file>

<file path="src/pages/Mint/Mint.tsx">
import { useEffect, useState } from 'react';
import { MintCoinFlowAnimation } from '../../shared/components/CoinFlowAnimations/Mint';
import { WalletConnections, TokenomicsSection, PermawebMatchSection, UtilityBenefitsSection } from './components';
import './Mint.css';

const Mint = () => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
  }, []);

  return (
    <div className={`mint-page ${isVisible ? 'animate-in' : ''}`}>
      {/* Animated background layers */}
      <div className="mint-bg-layer-1"></div>
      <div className="mint-bg-layer-2"></div>
      <div className="mint-bg-layer-3"></div>

      {/* Grid overlay */}
      <div className="mint-grid-overlay"></div>

      {/* Treasure Elements */}
      <div className="treasure-element treasure-chest-1">🏴‍☠️</div>
      <div className="treasure-element treasure-chest-2">💰</div>
      <div className="treasure-element treasure-gem-1">💎</div>
      <div className="treasure-element treasure-gem-2">💍</div>
      <div className="treasure-element treasure-coin-1">🪙</div>

      {/* Floating particles */}
      <div className="mint-particles">
        <div className="mint-particle-1"></div>
        <div className="mint-particle-2"></div>
        <div className="mint-particle-3"></div>
        <div className="mint-particle-4"></div>
        <div className="mint-particle-5"></div>

        {/* Geometric shapes */}
        <div className="mint-shape-1"></div>
        <div className="mint-shape-2"></div>
        <div className="mint-shape-3"></div>
        <div className="mint-shape-4"></div>
      </div>

      <div className="mint-content">
        <h1 className="mint-title">$GAME TOKEN MINTING</h1>
        <MintCoinFlowAnimation />
        <p className="mint-description">
          Experience the future of gaming finance with $GAME token. Built on AO the Hyper Parallel Computer,
          with a fair launch model inspired by Bitcoin's proven distribution mechanism.
        </p>

        {/* Mint Headliners */}
        <div className="mint-headliners">
          <div className="mint-headline">
            <div className="mint-headline-value">$2M+</div>
            <div className="mint-headline-label">Total Deposited</div>
          </div>
          <div className="mint-headline">
            <div className="mint-headline-value">Bitcoin Model</div>
            <div className="mint-headline-label">Release Rate</div>
          </div>
          <div className="mint-headline">
            <div className="mint-headline-value">Fair Launch</div>
            <div className="mint-headline-label">Distribution</div>
          </div>
        </div>

        {/* Tokenomics, Match, and Utility Sections */}
        <div className="tokenomics-utility-container">
          <TokenomicsSection />
          <PermawebMatchSection />
          <UtilityBenefitsSection />
        </div>

        {/* Wallet Connections */}
        <WalletConnections />

      </div>
    </div>
  );
};

export default Mint;
</file>

</files>
